[{"D:\\Podaci\\7. sem\\Arhitektura i projektovanje softvera\\ml-pipeline-vcs\\fe_app\\src\\index.js":"1","D:\\Podaci\\7. sem\\Arhitektura i projektovanje softvera\\ml-pipeline-vcs\\fe_app\\src\\reportWebVitals.js":"2","D:\\Podaci\\7. sem\\Arhitektura i projektovanje softvera\\ml-pipeline-vcs\\fe_app\\src\\App.js":"3","D:\\Podaci\\7. sem\\Arhitektura i projektovanje softvera\\ml-pipeline-vcs\\fe_app\\src\\Nodes\\DatasetLoader.jsx":"4","D:\\Podaci\\7. sem\\Arhitektura i projektovanje softvera\\ml-pipeline-vcs\\fe_app\\src\\Nodes\\ModelLoader.jsx":"5","D:\\Podaci\\7. sem\\Arhitektura i projektovanje softvera\\ml-pipeline-vcs\\fe_app\\src\\Nodes\\DataNormalizer.jsx":"6","D:\\Podaci\\7. sem\\Arhitektura i projektovanje softvera\\ml-pipeline-vcs\\fe_app\\src\\Nodes\\DataPlotter.jsx":"7","D:\\Podaci\\7. sem\\Arhitektura i projektovanje softvera\\ml-pipeline-vcs\\fe_app\\src\\Nodes\\ModelEvaluator.jsx":"8","D:\\Podaci\\7. sem\\Arhitektura i projektovanje softvera\\ml-pipeline-vcs\\fe_app\\src\\Nodes\\DataStandardizer.jsx":"9","D:\\Podaci\\7. sem\\Arhitektura i projektovanje softvera\\ml-pipeline-vcs\\fe_app\\src\\Nodes\\ModelPredictor.jsx":"10","D:\\Podaci\\7. sem\\Arhitektura i projektovanje softvera\\ml-pipeline-vcs\\fe_app\\src\\Main\\Main.jsx":"11","D:\\Podaci\\7. sem\\Arhitektura i projektovanje softvera\\ml-pipeline-vcs\\fe_app\\src\\Main\\Header.jsx":"12","D:\\Podaci\\7. sem\\Arhitektura i projektovanje softvera\\ml-pipeline-vcs\\fe_app\\src\\Home\\About.jsx":"13","D:\\Podaci\\7. sem\\Arhitektura i projektovanje softvera\\ml-pipeline-vcs\\fe_app\\src\\Home\\Home.jsx":"14","D:\\Podaci\\7. sem\\Arhitektura i projektovanje softvera\\ml-pipeline-vcs\\fe_app\\src\\Home\\LogIn.js":"15","D:\\Podaci\\7. sem\\Arhitektura i projektovanje softvera\\ml-pipeline-vcs\\fe_app\\src\\Home\\SignUp.js":"16","D:\\Podaci\\7. sem\\Arhitektura i projektovanje softvera\\ml-pipeline-vcs\\fe_app\\src\\UserStart\\UserProfil.jsx":"17","D:\\Podaci\\7. sem\\Arhitektura i projektovanje softvera\\ml-pipeline-vcs\\fe_app\\src\\UserStart\\Start.js":"18","D:\\Podaci\\7. sem\\Arhitektura i projektovanje softvera\\ml-pipeline-vcs\\fe_app\\src\\UserStart\\Team.jsx":"19","D:\\Podaci\\7. sem\\Arhitektura i projektovanje softvera\\ml-pipeline-vcs\\fe_app\\src\\UserStart\\TeamCreate.jsx":"20","D:\\Podaci\\7. sem\\Arhitektura i projektovanje softvera\\ml-pipeline-vcs\\fe_app\\src\\Flow\\FlowCreate.jsx":"21","D:\\Podaci\\7. sem\\Arhitektura i projektovanje softvera\\ml-pipeline-vcs\\fe_app\\src\\Flow\\FlowVersionCreate.jsx":"22","D:\\Podaci\\7. sem\\Arhitektura i projektovanje softvera\\ml-pipeline-vcs\\fe_app\\src\\Flow\\FlowContainer.jsx":"23","D:\\Podaci\\7. sem\\Arhitektura i projektovanje softvera\\ml-pipeline-vcs\\fe_app\\src\\Flow\\Flow.jsx":"24","D:\\Podaci\\7. sem\\Arhitektura i projektovanje softvera\\ml-pipeline-vcs\\fe_app\\src\\Flow\\ExeWindow.jsx":"25"},{"size":500,"mtime":499162500000,"results":"26","hashOfConfig":"27"},{"size":362,"mtime":499162500000,"results":"28","hashOfConfig":"27"},{"size":2194,"mtime":1619380436639,"results":"29","hashOfConfig":"27"},{"size":11550,"mtime":1619367502837,"results":"30","hashOfConfig":"27"},{"size":20244,"mtime":1619369994472,"results":"31","hashOfConfig":"27"},{"size":10770,"mtime":1619380301389,"results":"32","hashOfConfig":"27"},{"size":11765,"mtime":1619367429218,"results":"33","hashOfConfig":"27"},{"size":10611,"mtime":1619367566713,"results":"34","hashOfConfig":"27"},{"size":9073,"mtime":1619367506598,"results":"35","hashOfConfig":"27"},{"size":11646,"mtime":1619381080899,"results":"36","hashOfConfig":"27"},{"size":257,"mtime":1619115102024,"results":"37","hashOfConfig":"27"},{"size":2210,"mtime":1618941668738,"results":"38","hashOfConfig":"27"},{"size":407,"mtime":1619123690388,"results":"39","hashOfConfig":"27"},{"size":1274,"mtime":1619123711814,"results":"40","hashOfConfig":"27"},{"size":2572,"mtime":1618942512169,"results":"41","hashOfConfig":"27"},{"size":2164,"mtime":1618942510307,"results":"42","hashOfConfig":"27"},{"size":1832,"mtime":1619422117397,"results":"43","hashOfConfig":"27"},{"size":2298,"mtime":1619342181203,"results":"44","hashOfConfig":"27"},{"size":4784,"mtime":1619380564574,"results":"45","hashOfConfig":"27"},{"size":1471,"mtime":1618942576768,"results":"46","hashOfConfig":"27"},{"size":5325,"mtime":1619380222937,"results":"47","hashOfConfig":"27"},{"size":5433,"mtime":1619377973310,"results":"48","hashOfConfig":"27"},{"size":1927,"mtime":1619378761999,"results":"49","hashOfConfig":"27"},{"size":6094,"mtime":1619423308015,"results":"50","hashOfConfig":"27"},{"size":488,"mtime":1619381674733,"results":"51","hashOfConfig":"27"},{"filePath":"52","messages":"53","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},"wp5s2w",{"filePath":"55","messages":"56","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"57","messages":"58","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"59","messages":"60","errorCount":0,"warningCount":13,"fixableErrorCount":0,"fixableWarningCount":0,"source":"61","usedDeprecatedRules":"54"},{"filePath":"62","messages":"63","errorCount":0,"warningCount":13,"fixableErrorCount":0,"fixableWarningCount":0,"source":"64","usedDeprecatedRules":"54"},{"filePath":"65","messages":"66","errorCount":0,"warningCount":16,"fixableErrorCount":0,"fixableWarningCount":0,"source":"67","usedDeprecatedRules":"54"},{"filePath":"68","messages":"69","errorCount":0,"warningCount":13,"fixableErrorCount":0,"fixableWarningCount":0,"source":"70","usedDeprecatedRules":"54"},{"filePath":"71","messages":"72","errorCount":0,"warningCount":12,"fixableErrorCount":0,"fixableWarningCount":0,"source":"73","usedDeprecatedRules":"54"},{"filePath":"74","messages":"75","errorCount":0,"warningCount":12,"fixableErrorCount":0,"fixableWarningCount":0,"source":"76","usedDeprecatedRules":"54"},{"filePath":"77","messages":"78","errorCount":0,"warningCount":13,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"79","messages":"80","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"81","messages":"82","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"83","usedDeprecatedRules":"54"},{"filePath":"84","messages":"85","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"86","messages":"87","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"88","usedDeprecatedRules":"54"},{"filePath":"89","messages":"90","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"91","usedDeprecatedRules":"54"},{"filePath":"92","messages":"93","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"94","usedDeprecatedRules":"54"},{"filePath":"95","messages":"96","errorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"97","messages":"98","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"99","usedDeprecatedRules":"54"},{"filePath":"100","messages":"101","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"102","messages":"103","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"104","usedDeprecatedRules":"54"},{"filePath":"105","messages":"106","errorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"107","usedDeprecatedRules":"54"},{"filePath":"108","messages":"109","errorCount":0,"warningCount":15,"fixableErrorCount":0,"fixableWarningCount":0,"source":"110","usedDeprecatedRules":"54"},{"filePath":"111","messages":"112","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"113","usedDeprecatedRules":"54"},{"filePath":"114","messages":"115","errorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"116","messages":"117","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"D:\\Podaci\\7. sem\\Arhitektura i projektovanje softvera\\ml-pipeline-vcs\\fe_app\\src\\index.js",[],["118","119"],"D:\\Podaci\\7. sem\\Arhitektura i projektovanje softvera\\ml-pipeline-vcs\\fe_app\\src\\reportWebVitals.js",[],"D:\\Podaci\\7. sem\\Arhitektura i projektovanje softvera\\ml-pipeline-vcs\\fe_app\\src\\App.js",[],"D:\\Podaci\\7. sem\\Arhitektura i projektovanje softvera\\ml-pipeline-vcs\\fe_app\\src\\Nodes\\DatasetLoader.jsx",["120","121","122","123","124","125","126","127","128","129","130","131","132"],"import React, { useEffect, useState } from 'react';\r\nimport { useParams } from \"react-router-dom\";\r\nimport \"../Flow/Flow.css\";\r\n\r\nexport default function DatasetLoader(props) {\r\n\r\n\r\n    const [update, setUpdate] = useState(0);\r\n    const [details, setDetails] = useState(0);\r\n\r\n    const [items] = useState([\r\n        \"mnist\", \"cifra10\", \"cifra100\", \"imdb\", \"reuters\", \"fashion_mnist\", \"boston_housing\"\r\n    ])\r\n    const [dataset, setDataset] = useState();\r\n    const [input, setInput] = useState([]);\r\n    const [output, setOutput] = useState([]);\r\n\r\n\r\n    useEffect(() => {\r\n        if (props.creationFlag == true) {\r\n            setUpdate(true);\r\n\r\n            let nodes = [...props.nodes];\r\n\r\n            nodes[props.id].available_params = [\"dataset\"];\r\n            nodes[props.id].params = {\r\n                \"dataset\": null\r\n            }\r\n\r\n\r\n            props.setNodes(nodes);\r\n\r\n            //mesto za dodavanje parametara\r\n        }\r\n\r\n    }, []);\r\n\r\n\r\n    useEffect(() => {\r\n        if (props.creationFlag == false) {\r\n            setDataset(props.nodes[props.id]?.params[\"dataset\"]);\r\n            setInput(props.nodes[props.id].input_keys);\r\n            setOutput(props.nodes[props.id]?.output_keys);\r\n        }\r\n    }, [props.nodes]);\r\n\r\n\r\n    const onChange = () => {\r\n        setUpdate(!update);\r\n        if (update) {\r\n            \r\n            let nodes = props.nodes;\r\n            nodes[props.id].input_keys = input;\r\n            nodes[props.id].output_keys = output;\r\n            nodes[props.id].params[\"dataset\"] = dataset;\r\n\r\n            props.setNodes(nodes);\r\n\r\n            props.setUpdateFlag(1);\r\n        }\r\n    }\r\n\r\n    const addInput = () => {\r\n\r\n        let temp = [...input];\r\n        temp.push(\"null\");\r\n        setInput(temp);\r\n\r\n        if (props.creationFlag) {\r\n\r\n            let nodes = [...props.nodes];\r\n            nodes[props.id].input_keys = temp;\r\n            props.setNodes(nodes);\r\n        }\r\n\r\n    }\r\n    const removeInput = (index) => {\r\n        var temp = [...input];\r\n        temp.splice(index, 1);\r\n        setInput(temp);\r\n\r\n        if (props.creationFlag) {\r\n\r\n            let nodes = [...props.nodes];\r\n            nodes[props.id].input_keys = temp;\r\n            props.setNodes(nodes);\r\n        }\r\n    }\r\n\r\n    const changeInput = (index, e) => {\r\n        var temp = [...input];\r\n        temp[index] = e.target.value;\r\n        setInput(temp);\r\n\r\n\r\n        if (props.creationFlag) {\r\n\r\n            let nodes = [...props.nodes];\r\n            nodes[props.id].input_keys = temp;\r\n            props.setNodes(nodes);\r\n        }\r\n    }\r\n\r\n    const addOutput = () => {\r\n\r\n        let temp = [...output];\r\n        temp.push(\"null\");\r\n        setOutput(temp);\r\n\r\n        if (props.creationFlag) {\r\n\r\n            let nodes = [...props.nodes];\r\n            nodes[props.id].output_keys = temp;\r\n            props.setNodes(nodes);\r\n        }\r\n    }\r\n\r\n    const removeOutput = (index) => {\r\n        var temp = [...output];\r\n        temp.splice(index, 1);\r\n        setOutput(temp);\r\n\r\n        if (props.creationFlag) {\r\n\r\n            let nodes = [...props.nodes];\r\n            nodes[props.id].output_keys = temp;\r\n            props.setNodes(nodes);\r\n        }\r\n    }\r\n\r\n    const changeOutput = (index, e) => {\r\n        var temp = [...output];\r\n        temp[index] = e.target.value;\r\n        setOutput(temp);\r\n\r\n        if (props.creationFlag) {\r\n\r\n            let nodes = [...props.nodes];\r\n            nodes[props.id].output_keys = temp;\r\n            props.setNodes(nodes);\r\n        }\r\n    }\r\n\r\n    const changeDataset = (e) => {\r\n        setDataset(e.currentTarget.value);\r\n\r\n        if(props.creationFlag){\r\n            let nodes = [...props.nodes];\r\n            nodes[props.id].params[\"dataset\"] = e.target.value;\r\n            props.setNodes(nodes);\r\n        }\r\n    }\r\n\r\n\r\n    return (\r\n        <div className=\"node\">\r\n            {details == 0 && <br />}\r\n            <span onClick={() => setDetails(!details)}><b>DatasetLoader</b></span>\r\n\r\n            {details == 1 &&\r\n                <div>\r\n                    <hr></hr>\r\n                    {update ?\r\n                        <>\r\n                            <table className=\"NodeTable\">\r\n                                <thead>\r\n                                    <tr>\r\n                                        <th>\r\n                                            Input keys:\r\n                                        <button onClick={() => addInput()}>+</button>\r\n                                        </th>\r\n\r\n                                    </tr>\r\n                                </thead>\r\n                                {input.length == 0 ?\r\n                                    <tbody>\r\n                                        <tr>\r\n                                            <td>\r\n                                                null\r\n                                        </td>\r\n                                        </tr>\r\n                                    </tbody>\r\n                                    :\r\n                                    <>\r\n                                        {input.map((item, index) => (\r\n                                            <tbody key={index}>\r\n                                                <tr>\r\n                                                    <td>\r\n                                                        <input className=\"inputNode\" type=\"text\" value={item} onChange={(e) => changeInput(index, e)} />\r\n                                                        <button onClick={() => removeInput(index)}>-</button>\r\n                                                    </td>\r\n                                                </tr>\r\n                                            </tbody>\r\n                                        ))}\r\n                                    </>}\r\n                            </table>\r\n                            <table className=\"NodeTable\">\r\n                                <thead>\r\n                                    <tr>\r\n                                        <th>\r\n                                            Output keys:\r\n                                        <button onClick={() => addOutput()}>+</button>\r\n                                        </th>\r\n                                    </tr>\r\n                                </thead>\r\n                                {output.length == 0 ?\r\n                                    <tbody>\r\n                                        <tr>\r\n                                            <td>\r\n                                                null\r\n                                        </td>\r\n                                        </tr>\r\n                                    </tbody>\r\n                                    :\r\n                                    <>\r\n                                        {output.map((item, index) => (\r\n                                            <tbody key={index}>\r\n                                                <tr>\r\n                                                    <td>\r\n                                                        <input className=\"inputNode\" type=\"text\" value={item} onChange={(e) => changeOutput(index, e)} />\r\n                                                        <button onClick={() => removeOutput(index)}>-</button>\r\n                                                    </td>\r\n                                                </tr>\r\n                                            </tbody>\r\n                                        ))}\r\n                                    </>}\r\n                            </table>\r\n                            <br />\r\n                        DataSet:\r\n                        <select id=\"dataset\" value={dataset} onChange={e => changeDataset(e)}>\r\n                                {items.map(item => (\r\n                                    <option key={item} value={item}>{item}</option>\r\n                                ))}\r\n                            </select>\r\n                        </>\r\n                        :\r\n                        <>\r\n                            <table className=\"NodeTable\">\r\n                                <thead>\r\n                                    <tr>\r\n                                        <th>\r\n                                            Input keys:\r\n                                    </th>\r\n\r\n                                    </tr>\r\n                                </thead>\r\n                                {input.length == 0 ?\r\n                                    <tbody>\r\n                                        <tr>\r\n                                            <td>\r\n                                                null\r\n                                   </td>\r\n                                        </tr>\r\n                                    </tbody>\r\n                                    :\r\n                                    <>\r\n                                        {input.map((item, index) => (\r\n                                            <tbody key={index}>\r\n                                                <tr>\r\n                                                    <td>\r\n                                                        {item}\r\n                                                    </td>\r\n                                                </tr>\r\n                                            </tbody>\r\n                                        ))}\r\n                                    </>}\r\n                            </table>\r\n                            <table className=\"NodeTable\">\r\n                                <thead>\r\n                                    <tr>\r\n                                        <th>\r\n                                            Output keys:\r\n                                    </th>\r\n                                    </tr>\r\n                                </thead>\r\n                                {output.length == 0 ?\r\n                                    <tbody>\r\n                                        <tr>\r\n                                            <td>\r\n                                                null\r\n                                        </td>\r\n                                        </tr>\r\n                                    </tbody>\r\n                                    :\r\n                                    <>\r\n                                        {output.map((item, index) => (\r\n                                            <tbody key={index}>\r\n                                                <tr>\r\n                                                    <td>\r\n                                                        {item}\r\n                                                    </td>\r\n                                                </tr>\r\n                                            </tbody>\r\n                                        ))}\r\n                                    </>}\r\n                            </table>\r\n                            <br />\r\n                        DataSet: <span> {dataset}</span>\r\n                        </>\r\n                    }\r\n                    <br /><br />\r\n                    {props.creationFlag == false ?\r\n                        <div>\r\n                            <button onClick={() => onChange()}>{update == 1 ? 'Submit' : 'Update'}</button>\r\n                        </div>\r\n                        :\r\n                        <div>\r\n                        </div>\r\n                    }\r\n                </div>\r\n            }\r\n        </div>\r\n    )\r\n}","D:\\Podaci\\7. sem\\Arhitektura i projektovanje softvera\\ml-pipeline-vcs\\fe_app\\src\\Nodes\\ModelLoader.jsx",["133","134","135","136","137","138","139","140","141","142","143","144","145"],"import React, { useEffect, useState } from 'react';\r\nimport \"../Flow/Flow.css\";\r\n\r\nexport default function ModelLoader(props) {\r\n\r\n    const [details, setDetails] = useState(0);\r\n    const [update, setUpdate] = useState(0);\r\n\r\n    const [path, setPath] = useState();\r\n    const [loss, setLoss] = useState();\r\n    const [metrics, setMetrics] = useState();\r\n    const [optimizer, setOprimizer] = useState();\r\n    const [compile, setCompile] = useState();\r\n    const [train, setTrain] = useState();\r\n    const [epochs, setEpochs] = useState();\r\n    const [batchSize, setBatchSize] = useState();\r\n    const [publish, setPublish] = useState();\r\n\r\n    const [input, setInput] = useState([]);\r\n    const [output, setOutput] = useState([]);\r\n\r\n\r\n\r\n    useEffect(() => {\r\n        if (props.creationFlag == true) {\r\n            setUpdate(true);\r\n\r\n            //mesto za dodavanje parametara\r\n\r\n            let nodes = [...props.nodes];\r\n\r\n            nodes[props.id].available_params = [\"path\",\"loss\",\"metrics\",\"optimizer\",\"compile\",\"train\",\"epochs\",\"batchSize\",\"publish\"];\r\n            nodes[props.id].params = {\r\n                \"path\": null,\r\n                \"loss\": null,\r\n                \"metrics\": null,\r\n                \"optimizer\": null,\r\n                \"compile\": null,\r\n                \"train\": null,\r\n                \"epochs\": null,\r\n                \"batchSize\": null,\r\n                \"publish\": null\r\n            }\r\n\r\n\r\n            props.setNodes(nodes);\r\n        }\r\n\r\n    }, []);\r\n\r\n\r\n    useEffect(() => {\r\n        if (props.creationFlag == false) {\r\n            setPath(props.nodes[props.id].params[\"model_path\"]);\r\n            setLoss(props.nodes[props.id].params[\"loss\"]);\r\n            setMetrics(props.nodes[props.id].params[\"metrics\"]);\r\n            setOprimizer(props.nodes[props.id].params[\"optimizer\"]);\r\n            setCompile(props.nodes[props.id].params[\"compile\"] ? 1 : 0);\r\n            setTrain(props.nodes[props.id].params[\"train\"] ? 1 : 0);\r\n            setEpochs(props.nodes[props.id].params[\"epochs\"]);\r\n            setBatchSize(props.nodes[props.id].params[\"batch_size\"]);\r\n            setPublish(props.nodes[props.id].params[\"publish\"] ? 1 : 0);\r\n\r\n            setInput(props.nodes[props.id].input_keys);\r\n            setOutput(props.nodes[props.id].output_keys);\r\n        }\r\n\r\n        //console.log(data);\r\n    }, [props.node]);\r\n\r\n\r\n\r\n\r\n    const onChange = () => {\r\n\r\n        setUpdate(!update);\r\n\r\n        if (update) {\r\n\r\n            let nodes = [...props.nodes];\r\n\r\n            nodes[props.id].input_keys = input;\r\n            nodes[props.id].input_keys = output;\r\n\r\n            nodes[props.id].params[\"model_path\"] = path;\r\n            nodes[props.id].params[\"loss\"] = loss;\r\n            nodes[props.id].params[\"metrics\"] = metrics;\r\n            nodes[props.id].params[\"optimizer\"] = optimizer;\r\n            nodes[props.id].params[\"compile\"] = compile;\r\n            nodes[props.id].params[\"train\"] = train;\r\n            nodes[props.id].params[\"epochs\"] = epochs;\r\n            nodes[props.id].params[\"batch_size\"] = batchSize;\r\n            nodes[props.id].params[\"publish\"] = publish;\r\n\r\n            props.setNodes(nodes);\r\n            props.setUpdateFlag(1);\r\n        }\r\n    }\r\n\r\n    const addInput = () => {\r\n\r\n        let temp = [...input];\r\n        temp.push(\"null\");\r\n        setInput(temp);\r\n\r\n        if (props.creationFlag) {\r\n\r\n            let nodes = [...props.nodes];\r\n            nodes[props.id].input_keys = temp;\r\n            props.setNodes(nodes);\r\n        }\r\n\r\n    }\r\n    const removeInput = (index) => {\r\n        var temp = [...input];\r\n        temp.splice(index, 1);\r\n        setInput(temp);\r\n\r\n        if (props.creationFlag) {\r\n\r\n            let nodes = [...props.nodes];\r\n            nodes[props.id].input_keys = temp;\r\n            props.setNodes(nodes);\r\n        }\r\n    }\r\n\r\n    const changeInput = (index, e) => {\r\n        var temp = [...input];\r\n        temp[index] = e.target.value;\r\n        setInput(temp);\r\n\r\n\r\n        if (props.creationFlag) {\r\n\r\n            let nodes = [...props.nodes];\r\n            nodes[props.id].input_keys = temp;\r\n            props.setNodes(nodes);\r\n        }\r\n    }\r\n\r\n    const addOutput = () => {\r\n\r\n        let temp = [...output];\r\n        temp.push(\"null\");\r\n        setOutput(temp);\r\n\r\n        if (props.creationFlag) {\r\n\r\n            let nodes = [...props.nodes];\r\n            nodes[props.id].output_keys = temp;\r\n            props.setNodes(nodes);\r\n        }\r\n    }\r\n\r\n    const removeOutput = (index) => {\r\n        var temp = [...output];\r\n        temp.splice(index, 1);\r\n        setOutput(temp);\r\n\r\n        if (props.creationFlag) {\r\n\r\n            let nodes = [...props.nodes];\r\n            nodes[props.id].output_keys = temp;\r\n            props.setNodes(nodes);\r\n        }\r\n    }\r\n\r\n    const changeOutput = (index, e) => {\r\n        var temp = [...output];\r\n        temp[index] = e.target.value;\r\n        setOutput(temp);\r\n\r\n        if (props.creationFlag) {\r\n\r\n            let nodes = [...props.nodes];\r\n            nodes[props.id].output_keys = temp;\r\n            props.setNodes(nodes);\r\n        }\r\n    }\r\n\r\n    const changePath = (e) => {\r\n        setPath(e.target.value);\r\n\r\n        if(props.creationFlag){\r\n            let nodes = [...props.nodes];\r\n            nodes[props.id].params[\"model_path\"] = e.target.value;\r\n            props.setNodes(nodes);\r\n        }\r\n    }\r\n\r\n    \r\n    const changeLoss = (e) => {\r\n        setLoss(e.target.value);\r\n\r\n        if(props.creationFlag){\r\n            let nodes = [...props.nodes];\r\n            nodes[props.id].params[\"loss\"] = e.target.value;\r\n            props.setNodes(nodes);\r\n        }\r\n    }\r\n\r\n    const changeMetrics = (e) => {\r\n        setMetrics(e.target.value);\r\n\r\n        if(props.creationFlag){\r\n            let nodes = [...props.nodes];\r\n            nodes[props.id].params[\"metrics\"] = e.target.value;\r\n            props.setNodes(nodes);\r\n        }\r\n    }\r\n\r\n    const changeOptimizer = (e) => {\r\n        setOprimizer(e.target.value);\r\n\r\n        if(props.creationFlag){\r\n            let nodes = [...props.nodes];\r\n            nodes[props.id].params[\"optimizer\"] = e.target.value;\r\n            props.setNodes(nodes);\r\n        }\r\n    }\r\n\r\n    const changeCompile = () => {\r\n\r\n        let newCompile = !compile;\r\n        setCompile(newCompile)\r\n\r\n        if(props.creationFlag){\r\n            let nodes = [...props.nodes];\r\n            nodes[props.id].params[\"compile\"] = newCompile;\r\n            props.setNodes(nodes);\r\n        }\r\n    }\r\n\r\n    const changeTrain = () => {\r\n\r\n        let newTrain = !train;\r\n        setTrain(newTrain)\r\n\r\n        if(props.creationFlag){\r\n            let nodes = [...props.nodes];\r\n            nodes[props.id].params[\"train\"] = newTrain;\r\n            props.setNodes(nodes);\r\n        }\r\n    }\r\n\r\n    const changeEpochs = (e) => {\r\n        setEpochs(e.target.value)\r\n\r\n        if(props.creationFlag){\r\n            let nodes = [...props.nodes];\r\n            nodes[props.id].params[\"epochs\"] = e.target.value;\r\n            props.setNodes(nodes);\r\n        }\r\n    }\r\n\r\n    const changeBatchSize = (e) => {\r\n        setBatchSize(e.target.value)\r\n\r\n        if(props.creationFlag){\r\n            let nodes = [...props.nodes];\r\n            nodes[props.id].params[\"batchSize\"] = e.target.value;\r\n            props.setNodes(nodes);\r\n        }\r\n    }\r\n\r\n    const changePublish = (e) => {\r\n\r\n        let oldPublish = !publish;\r\n        setPublish(oldPublish)\r\n\r\n        if(props.creationFlag){\r\n            let nodes = [...props.nodes];\r\n            nodes[props.id].params[\"publish\"] = oldPublish;\r\n            props.setNodes(nodes);\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div className=\"node\">\r\n            {details == 0 && <br />}\r\n            <span onClick={() => setDetails(!details)}><b>ModelLoader</b></span>\r\n            {details == 1 &&\r\n                <div>\r\n                    <hr></hr>\r\n                    {update == 1 ?\r\n                        <>\r\n                            <table className=\"NodeTable\">\r\n                                <thead>\r\n                                    <tr>\r\n                                        <th>\r\n                                            Input keys:\r\n                                        <button onClick={() => addInput()}>+</button>\r\n                                        </th>\r\n\r\n                                    </tr>\r\n                                </thead>\r\n                                {input.length == 0 ?\r\n                                    <tbody>\r\n                                        <tr>\r\n                                            <td>\r\n                                                null\r\n                                        </td>\r\n                                        </tr>\r\n                                    </tbody>\r\n                                    :\r\n                                    <>\r\n                                        {input.map((item, index) => (\r\n                                            <tbody key={index}>\r\n                                                <tr>\r\n                                                    <td>\r\n                                                        <input className=\"inputNode\" type=\"text\" value={item} onChange={(e) => changeInput(index, e)} />\r\n                                                        <button onClick={() => removeInput(index)}>-</button>\r\n                                                    </td>\r\n                                                </tr>\r\n                                            </tbody>\r\n                                        ))}\r\n                                    </>}\r\n                            </table>\r\n                            <table className=\"NodeTable\">\r\n                                <thead>\r\n                                    <tr>\r\n                                        <th>\r\n                                            Output keys:\r\n                                        <button onClick={() => addOutput()}>+</button>\r\n                                        </th>\r\n                                    </tr>\r\n                                </thead>\r\n                                {output.length == 0 ?\r\n                                    <tbody>\r\n                                        <tr>\r\n                                            <td>\r\n                                                null\r\n                                        </td>\r\n                                        </tr>\r\n                                    </tbody>\r\n                                    :\r\n                                    <>\r\n                                        {output.map((item, index) => (\r\n                                            <tbody key={index}>\r\n                                                <tr>\r\n                                                    <td>\r\n                                                        <input className=\"inputNode\" type=\"text\" value={item} onChange={(e) => changeOutput(index, e)} />\r\n                                                        <button onClick={() => removeOutput(index)}>-</button>\r\n                                                    </td>\r\n                                                </tr>\r\n                                            </tbody>\r\n                                        ))}\r\n                                    </>}\r\n                            </table>\r\n                            <br />\r\n                            <table className=\"NodeTable\">\r\n                                <tr>\r\n                                    <th> Model path: </th>\r\n                                    <td>\r\n                                        <input className=\"inputNode\" type=\"text\" value={path} onChange={(e) => changePath(e)} />\r\n                                    </td>\r\n                                </tr>\r\n                                <tr>\r\n                                    <th> Loss: </th>\r\n                                    <td>\r\n                                        <input className=\"inputNode\" type=\"text\" value={loss} onChange={(e) => changeLoss(e)} />\r\n                                    </td>\r\n                                </tr>\r\n                                <tr>\r\n                                    <th> Metrics: </th>\r\n                                    <td>\r\n                                        <input className=\"inputNode\" type=\"text\" value={metrics} onChange={(e) => changeMetrics(e)} />\r\n                                    </td>\r\n                                </tr>\r\n                                <tr>\r\n                                    <th> Optimizer: </th>\r\n                                    <td>\r\n                                        <input className=\"inputNode\" type=\"text\" value={optimizer} onChange={(e) => changeOptimizer(e)} />\r\n                                    </td>\r\n                                </tr>\r\n                                <tr>\r\n                                    <th> Compile: </th>\r\n                                    <td>\r\n                                        <input type=\"checkbox\" value={compile} checked={compile} onChange={() => changeCompile()} />\r\n                                    </td>\r\n                                </tr>\r\n                                <tr>\r\n                                    <th> Train: </th>\r\n                                    <td>\r\n                                        <input type=\"checkbox\" value={train} checked={train} onChange={() => changeTrain()} />\r\n                                    </td>\r\n                                </tr>\r\n                                <tr>\r\n                                    <th> Epochs: </th>\r\n                                    <td>\r\n                                        <input className=\"inputNode\" type=\"number\" value={epochs} onChange={(e) => changeEpochs(e)} />\r\n                                    </td>\r\n                                </tr>\r\n                                <tr>\r\n                                    <th> Batch size: </th>\r\n                                    <td>\r\n                                        <input className=\"inputNode\" type=\"number\" value={batchSize} onChange={(e) => changeBatchSize(e)} />\r\n                                    </td>\r\n                                </tr>\r\n                                <tr>\r\n                                    <th> Publish: </th>\r\n                                    <td>\r\n                                        <input type=\"checkbox\" value={publish} checked={publish} onChange={() => changePublish()} />\r\n                                    </td>\r\n                                </tr>\r\n                            </table>\r\n                        </>\r\n                        :\r\n                        <>\r\n                            <table className=\"NodeTable\">\r\n                                <thead>\r\n                                    <tr>\r\n                                        <th>\r\n                                            Input keys:\r\n                                    </th>\r\n\r\n                                    </tr>\r\n                                </thead>\r\n                                {input?.length == 0 ?\r\n                                    <tbody>\r\n                                        <tr>\r\n                                            <td>\r\n                                                null\r\n                                   </td>\r\n                                        </tr>\r\n                                    </tbody>\r\n                                    :\r\n                                    <>\r\n                                        {input.map((item, index) => (\r\n                                            <tbody key={index}>\r\n                                                <tr>\r\n                                                    <td>\r\n                                                        {item}\r\n                                                    </td>\r\n                                                </tr>\r\n                                            </tbody>\r\n                                        ))}\r\n                                    </>}\r\n                            </table>\r\n                            <table className=\"NodeTable\">\r\n                                <thead>\r\n                                    <tr>\r\n                                        <th>\r\n                                            Output keys:\r\n                                    </th>\r\n                                    </tr>\r\n                                </thead>\r\n                                {output.length == 0 ?\r\n                                    <tbody>\r\n                                        <tr>\r\n                                            <td>\r\n                                                null\r\n                                        </td>\r\n                                        </tr>\r\n                                    </tbody>\r\n                                    :\r\n                                    <>\r\n                                        {output.map((item, index) => (\r\n                                            <tbody key={index}>\r\n                                                <tr>\r\n                                                    <td>\r\n                                                        {item}\r\n                                                    </td>\r\n                                                </tr>\r\n                                            </tbody>\r\n                                        ))}\r\n                                    </>}\r\n                            </table>\r\n                            <br />\r\n                            <table className=\"NodeTable\">\r\n                                <tr>\r\n                                    <th> Model path: </th>\r\n                                    <td> <p id=\"bilosta\">{path ? path : 'null'}</p> </td>\r\n                                </tr>\r\n                                <tr>\r\n                                    <th> Loss: </th>\r\n                                    <td> {loss ? loss : 'null'} </td>\r\n                                </tr>\r\n                                <tr>\r\n                                    <th> Metrics: </th>\r\n                                    <td> {metrics ? metrics : 'null'} </td>\r\n                                </tr>\r\n                                <tr>\r\n                                    <th> Optimizer: </th>\r\n                                    <td> {optimizer ? optimizer : 'null'} </td>\r\n                                </tr>\r\n                                <tr>\r\n                                    <th> Compile: </th>\r\n                                    <td> {compile ? 'true' : 'false'} </td>\r\n                                </tr>\r\n                                <tr>\r\n                                    <th> Train: </th>\r\n                                    <td> {train ? 'true' : 'false'} </td>\r\n                                </tr>\r\n                                <tr>\r\n                                    <th> Epochs: </th>\r\n                                    <td> {epochs ? epochs : 'null'} </td>\r\n                                </tr>\r\n                                <tr>\r\n                                    <th> Batch size: </th>\r\n                                    <td> {batchSize ? batchSize : 'null'} </td>\r\n                                </tr>\r\n                                <tr>\r\n                                    <th> Publish: </th>\r\n                                    <td> {publish ? 'true' : 'false'} </td>\r\n                                </tr>\r\n                            </table>\r\n                        </>\r\n                    }\r\n                    <br />\r\n                    {props.creationFlag == false ?\r\n                        <div>\r\n                            <button onClick={() => onChange()}>{update == 1 ? 'Submit' : 'Update'}</button>\r\n                        </div>\r\n                        :\r\n                        <div>\r\n                        </div>\r\n                    }\r\n\r\n                </div>\r\n            }\r\n        </div>\r\n    )\r\n}","D:\\Podaci\\7. sem\\Arhitektura i projektovanje softvera\\ml-pipeline-vcs\\fe_app\\src\\Nodes\\DataNormalizer.jsx",["146","147","148","149","150","151","152","153","154","155","156","157","158","159","160","161"],"import SelectInput from '@material-ui/core/Select/SelectInput';\r\nimport React, { forwardRef, useEffect, useState, useImperativeHandle, useCallback } from 'react';\r\nimport \"../Flow/Flow.css\";\r\n\r\nexport default function DataNormalizer(props) {\r\n\r\n\r\n    const [update, setUpdate] = useState(0);\r\n    const [details, setDetails] = useState(0);\r\n\r\n    const [input, setInput] = useState([]);\r\n    const [output, setOutput] = useState([]);\r\n\r\n\r\n    useEffect(() => {\r\n        if (props.creationFlag == true) {\r\n            setUpdate(true);\r\n\r\n            //mesto za dodavanje parametara, ovde ih nema\r\n        }\r\n\r\n    }, []);\r\n\r\n    useEffect(() => {\r\n\r\n        if (props.creationFlag == false) {\r\n            setInput(props.nodes[props.id].input_keys);\r\n            setOutput(props.nodes[props.id].output_keys);\r\n        }\r\n    }, [props.nodes]);\r\n\r\n\r\n    const onChange = () => {\r\n\r\n        setUpdate(!update);\r\n\r\n        if (update) {\r\n            \r\n            let nodes = [...props.nodes];\r\n            nodes[props.id].input_keys = input;\r\n            nodes[props.id].output_keys = output;\r\n\r\n            props.setNodes(nodes);\r\n\r\n            props.setUpdateFlag(1);\r\n        }\r\n    }\r\n\r\n    // const deleteNode = () => {\r\n    //     let nodes = [...props.nodes];\r\n    //     nodes.splice(props.id,1);\r\n    //     props.setNodes(nodes);\r\n    // }\r\n\r\n\r\n    const addInput = () => {\r\n\r\n        let temp = [...input];\r\n        temp.push(\"null\");\r\n        setInput(temp);\r\n\r\n        if (props.creationFlag) {\r\n\r\n            let nodes = [...props.nodes];\r\n            nodes[props.id].input_keys = temp;\r\n            props.setNodes(nodes);\r\n        }\r\n\r\n    }\r\n\r\n    const removeInput = (index) => {\r\n        var temp = [...input];\r\n        temp.splice(index, 1);\r\n        setInput(temp);\r\n\r\n        if (props.creationFlag) {\r\n\r\n            let nodes = [...props.nodes];\r\n            nodes[props.id].input_keys = temp;\r\n            props.setNodes(nodes);\r\n        }\r\n    }\r\n\r\n    const changeInput = (index, e) => {\r\n        var temp = [...input];\r\n        temp[index] = e.target.value;\r\n        setInput(temp);\r\n\r\n\r\n        if (props.creationFlag) {\r\n\r\n            let nodes = [...props.nodes];\r\n            nodes[props.id].input_keys = temp;\r\n            props.setNodes(nodes);\r\n        }\r\n    }\r\n\r\n    const addOutput = () => {\r\n\r\n        let temp = [...output];\r\n        temp.push(\"null\");\r\n        setOutput(temp);\r\n\r\n        if (props.creationFlag) {\r\n\r\n            let nodes = [...props.nodes];\r\n            nodes[props.id].output_keys = temp;\r\n            props.setNodes(nodes);\r\n        }\r\n    }\r\n\r\n    const removeOutput = (index) => {\r\n        var temp = [...output];\r\n        temp.splice(index, 1);\r\n        setOutput(temp);\r\n\r\n        if (props.creationFlag) {\r\n\r\n            let nodes = [...props.nodes];\r\n            nodes[props.id].output_keys = temp;\r\n            props.setNodes(nodes);\r\n        }\r\n    }\r\n\r\n    const changeOutput = (index, e) => {\r\n        var temp = [...output];\r\n        temp[index] = e.target.value;\r\n        setOutput(temp);\r\n\r\n        if (props.creationFlag) {\r\n\r\n            let nodes = [...props.nodes];\r\n            nodes[props.id].output_keys = temp;\r\n            props.setNodes(nodes);\r\n        }\r\n    }\r\n\r\n\r\n    return (\r\n        <div className=\"node\">\r\n            {details == 0 && <br />}\r\n            <span onClick={() => setDetails(!details)}><b>DataNormalizer</b></span>\r\n            {/* {props.creationFlag &&\r\n            <button onClick={() => deleteNode()}>-</button>} */}\r\n            {details == 1 &&\r\n                <div>\r\n                    <hr></hr>\r\n                    {update ?\r\n\r\n                        //Ako treba da se rade promene (update flag je postavljen na 1)\r\n                        <>\r\n                            <table className=\"NodeTable\">\r\n                                <thead>\r\n                                    <tr>\r\n                                        <th>\r\n                                            Input keys:\r\n                                        <button onClick={() => addInput()}>+</button>\r\n                                        </th>\r\n\r\n                                    </tr>\r\n                                </thead>\r\n                                {input.length == 0 ?\r\n                                    <tbody>\r\n                                        <tr>\r\n                                            <td>\r\n                                                null\r\n                                        </td>\r\n                                        </tr>\r\n                                    </tbody>\r\n                                    :\r\n                                    <>\r\n                                        {input.map((item, index) => (\r\n                                            <tbody key={index}>\r\n                                                <tr>\r\n                                                    <td>\r\n                                                        <input className=\"inputNode\" type=\"text\" value={item} onChange={(e) => changeInput(index, e)} />\r\n                                                        <button onClick={() => removeInput(index)}>-</button>\r\n                                                    </td>\r\n                                                </tr>\r\n                                            </tbody>\r\n                                        ))}\r\n                                    </>}\r\n                            </table>\r\n                            <table className=\"NodeTable\">\r\n                                <thead>\r\n                                    <tr>\r\n                                        <th>\r\n                                            Output keys:\r\n                                        <button onClick={() => addOutput()}>+</button>\r\n                                        </th>\r\n                                    </tr>\r\n                                </thead>\r\n                                {output.length == 0 ?\r\n                                    <tbody>\r\n                                        <tr>\r\n                                            <td>\r\n                                                null\r\n                                        </td>\r\n                                        </tr>\r\n                                    </tbody>\r\n                                    :\r\n                                    <>\r\n                                        {output.map((item, index) => (\r\n                                            <tbody key={index}>\r\n                                                <tr>\r\n                                                    <td>\r\n                                                        <input className=\"inputNode\" type=\"text\" value={item} onChange={(e) => changeOutput(index, e)} />\r\n                                                        <button onClick={() => removeOutput(index)}>-</button>\r\n                                                    </td>\r\n                                                </tr>\r\n                                            </tbody>\r\n                                        ))}\r\n                                    </>}\r\n                            </table>\r\n                        </>\r\n                        :\r\n\r\n                        //Ako je update flag 0, radi se samo prikaz\r\n                        <>\r\n                            <table className=\"NodeTable\">\r\n                                <thead>\r\n                                    <tr>\r\n                                        <th>\r\n                                            Input keys:\r\n                                    </th>\r\n\r\n                                    </tr>\r\n                                </thead>\r\n                                {input.length == 0 ?\r\n                                    <tbody>\r\n                                        <tr>\r\n                                            <td>\r\n                                                null\r\n                                   </td>\r\n                                        </tr>\r\n                                    </tbody>\r\n                                    :\r\n                                    <>\r\n                                        {input.map((item, index) => (\r\n                                            <tbody key={index}>\r\n                                                <tr>\r\n                                                    <td>\r\n                                                        {item}\r\n                                                    </td>\r\n                                                </tr>\r\n                                            </tbody>\r\n                                        ))}\r\n                                    </>}\r\n                            </table>\r\n                            <table className=\"NodeTable\">\r\n                                <thead>\r\n                                    <tr>\r\n                                        <th>\r\n                                            Output keys:\r\n                                    </th>\r\n                                    </tr>\r\n                                </thead>\r\n                                {output.length == 0 ?\r\n                                    <tbodu>\r\n                                        <tr>\r\n                                            <td>\r\n                                                null\r\n                                        </td>\r\n                                        </tr>\r\n                                    </tbodu>\r\n                                    :\r\n                                    <>\r\n                                        {output.map((item, index) => (\r\n                                            <tbody key={index}>\r\n                                                <tr>\r\n                                                    <td>\r\n                                                        {item}\r\n                                                    </td>\r\n                                                </tr>\r\n                                            </tbody>\r\n                                        ))}\r\n                                    </>}\r\n                            </table>\r\n                        </>\r\n                    }\r\n                    <br />\r\n                    {props.creationFlag == false ?\r\n                        <div>\r\n                            <button onClick={() => onChange()}>{update == 1 ? 'Submit' : 'Update'}</button>\r\n                        </div>\r\n                        :\r\n                        <div>\r\n                        </div>\r\n                    }\r\n\r\n                </div>\r\n            }\r\n        </div>\r\n    )\r\n}","D:\\Podaci\\7. sem\\Arhitektura i projektovanje softvera\\ml-pipeline-vcs\\fe_app\\src\\Nodes\\DataPlotter.jsx",["162","163","164","165","166","167","168","169","170","171","172","173","174"],"import React, { useEffect, useState } from 'react';\r\nimport \"../Flow/Flow.css\";\r\n\r\nexport default function DataPlotter(props) {\r\n\r\n    const [details, setDetails] = useState(0);\r\n    const [update, setUpdate] = useState(0);\r\n\r\n    const [index, setIndex] = useState(\"\");\r\n\r\n    const [input, setInput] = useState([]);\r\n    const [output, setOutput] = useState([]);\r\n\r\n\r\n    useEffect(() => {\r\n        if (props.creationFlag == true) {\r\n            setUpdate(true);\r\n\r\n            //mesto za dodavanje parametara\r\n\r\n            let nodes = [...props.nodes];\r\n\r\n            nodes[props.id].available_params = [\"index\"];\r\n            nodes[props.id].params = {\r\n                \"index\": null\r\n            }\r\n\r\n            props.setNodes(nodes);\r\n\r\n        }\r\n    }, []);\r\n\r\n    useEffect(() => {\r\n        if (props.creationFlag == false) {\r\n            setIndex(props.nodes[props.id].params[\"index\"]);\r\n            setInput(props.nodes[props.id].input_keys);\r\n            setOutput(props.nodes[props.id].output_keys);\r\n        }\r\n    }, []);\r\n\r\n\r\n\r\n    const onChange = () => {\r\n\r\n        setUpdate(!update);\r\n\r\n        if (update) {\r\n\r\n            let nodes = [...props.nodes];\r\n            nodes[props.id].input_keys = input;\r\n            nodes[props.id].output_keys = output;\r\n            nodes[props.id].params[\"index\"] = index;\r\n\r\n            props.setNodes(nodes);\r\n\r\n            props.setUpdateFlag(1);\r\n        }\r\n    }\r\n\r\n\r\n\r\n    const addInput = () => {\r\n\r\n        let temp = [...input];\r\n        temp.push(\"null\");\r\n        setInput(temp);\r\n\r\n        if (props.creationFlag) {\r\n\r\n            let nodes = [...props.nodes];\r\n            nodes[props.id].input_keys = temp;\r\n            props.setNodes(nodes);\r\n        }\r\n\r\n    }\r\n    const removeInput = (index) => {\r\n        var temp = [...input];\r\n        temp.splice(index, 1);\r\n        setInput(temp);\r\n\r\n        if (props.creationFlag) {\r\n\r\n            let nodes = [...props.nodes];\r\n            nodes[props.id].input_keys = temp;\r\n            props.setNodes(nodes);\r\n        }\r\n    }\r\n\r\n    const changeInput = (index, e) => {\r\n        var temp = [...input];\r\n        temp[index] = e.target.value;\r\n        setInput(temp);\r\n\r\n\r\n        if (props.creationFlag) {\r\n\r\n            let nodes = [...props.nodes];\r\n            nodes[props.id].input_keys = temp;\r\n            props.setNodes(nodes);\r\n        }\r\n    }\r\n\r\n    const addOutput = () => {\r\n\r\n        let temp = [...output];\r\n        temp.push(\"null\");\r\n        setOutput(temp);\r\n\r\n        if (props.creationFlag) {\r\n\r\n            let nodes = [...props.nodes];\r\n            nodes[props.id].output_keys = temp;\r\n            props.setNodes(nodes);\r\n        }\r\n    }\r\n\r\n    const removeOutput = (index) => {\r\n        var temp = [...output];\r\n        temp.splice(index, 1);\r\n        setOutput(temp);\r\n\r\n        if (props.creationFlag) {\r\n\r\n            let nodes = [...props.nodes];\r\n            nodes[props.id].output_keys = temp;\r\n            props.setNodes(nodes);\r\n        }\r\n    }\r\n\r\n    const changeOutput = (index, e) => {\r\n        var temp = [...output];\r\n        temp[index] = e.target.value;\r\n        setOutput(temp);\r\n\r\n        if (props.creationFlag) {\r\n\r\n            let nodes = [...props.nodes];\r\n            nodes[props.id].output_keys = temp;\r\n            props.setNodes(nodes);\r\n        }\r\n    }\r\n\r\n    const changeIndex = (e) => {\r\n        setIndex(e.target.value);\r\n\r\n        if(props.creationFlag){\r\n            let nodes = [...props.nodes];\r\n            nodes[props.id].params[\"index\"] = e.target.value;\r\n            props.setNodes(nodes);\r\n        }\r\n       \r\n    }\r\n\r\n    return (\r\n        <div className=\"node\">\r\n            {details == 0 && <br />}\r\n            <span onClick={() => setDetails(!details)}><b>DataPlotter</b></span>\r\n            {details == 1 &&\r\n                <div>\r\n                    <hr></hr>\r\n                    {update == 1 ?\r\n                        <>\r\n                            <table className=\"NodeTable\">\r\n                                <thead>\r\n                                    <tr>\r\n                                        <th>\r\n                                            Input keys:\r\n                                        <button onClick={() => addInput()}>+</button>\r\n                                        </th>\r\n\r\n                                    </tr>\r\n                                </thead>\r\n                                {input.length == 0 ?\r\n                                    <tbody>\r\n                                        <tr>\r\n                                            <td>\r\n                                                null\r\n                                        </td>\r\n                                        </tr>\r\n                                    </tbody>\r\n                                    :\r\n                                    <>\r\n                                        {input.map((item, index) => (\r\n                                            <tbody key={index}>\r\n                                                <tr>\r\n                                                    <td>\r\n                                                        <input className=\"inputNode\" type=\"text\" value={item} onChange={(e) => changeInput(index, e)} />\r\n                                                        <button onClick={() => removeInput(index)}>-</button>\r\n                                                    </td>\r\n                                                </tr>\r\n                                            </tbody>\r\n                                        ))}\r\n                                    </>}\r\n                            </table>\r\n                            <table className=\"NodeTable\">\r\n                                <thead>\r\n                                    <tr>\r\n                                        <th>\r\n                                            Output keys:\r\n                                        <button onClick={() => addOutput()}>+</button>\r\n                                        </th>\r\n                                    </tr>\r\n                                </thead>\r\n                                {output.length == 0 ?\r\n                                    <tbody>\r\n                                        <tr>\r\n                                            <td>\r\n                                                null\r\n                                        </td>\r\n                                        </tr>\r\n                                    </tbody>\r\n                                    :\r\n                                    <>\r\n                                        {output.map((item, index) => (\r\n                                            <tbody key={index}>\r\n                                                <tr>\r\n                                                    <td>\r\n                                                        <input className=\"inputNode\" type=\"text\" value={item} onChange={(e) => changeOutput(index, e)} />\r\n                                                        <button onClick={() => removeOutput(index)}>-</button>\r\n                                                    </td>\r\n                                                </tr>\r\n                                            </tbody>\r\n                                        ))}\r\n                                    </>}\r\n                            </table>\r\n                            <table>\r\n                                <tbody>\r\n                                    <tr>\r\n                                        <th> Index: </th>\r\n                                        <td>\r\n                                            <input type=\"text\" value={index} onChange={(e) => changeIndex(e)} />\r\n                                        </td>\r\n                                    </tr>\r\n                                </tbody>\r\n                            </table>\r\n                        </>\r\n                        :\r\n                        <>\r\n                            <table className=\"NodeTable\">\r\n                                <thead>\r\n                                    <tr>\r\n                                        <th>\r\n                                            Input keys:\r\n                                    </th>\r\n\r\n                                    </tr>\r\n                                </thead>\r\n                                {input.length == 0 ?\r\n                                    <tbody>\r\n                                        <tr>\r\n                                            <td>\r\n                                                null\r\n                                   </td>\r\n                                        </tr>\r\n                                    </tbody>\r\n                                    :\r\n                                    <>\r\n                                        {input.map((item, index) => (\r\n                                            <tbody key={index}>\r\n                                                <tr>\r\n                                                    <td>\r\n                                                        {item}\r\n                                                    </td>\r\n                                                </tr>\r\n                                            </tbody>\r\n                                        ))}\r\n                                    </>}\r\n                            </table>\r\n                            <table className=\"NodeTable\">\r\n                                <thead>\r\n                                    <tr>\r\n                                        <th>\r\n                                            Output keys:\r\n                                    </th>\r\n                                    </tr>\r\n                                </thead>\r\n                                {output.length == 0 ?\r\n                                    <tbody>\r\n                                        <tr>\r\n                                            <td>\r\n                                                null\r\n                                        </td>\r\n                                        </tr>\r\n                                    </tbody>\r\n                                    :\r\n                                    <>\r\n                                        {output.map((item, index) => (\r\n                                            <tbody key={index}>\r\n                                                <tr>\r\n                                                    <td>\r\n                                                        {item}\r\n                                                    </td>\r\n                                                </tr>\r\n                                            </tbody>\r\n                                        ))}\r\n                                    </>}\r\n                            </table>\r\n                            <table className=\"NodeTable\">\r\n                                <tbody>\r\n                                    <tr>\r\n                                        <th> Index: </th>\r\n                                        <td> {index ? index : 'null'} </td>\r\n                                    </tr>\r\n                                </tbody>\r\n                            </table>\r\n                        </>\r\n                    }\r\n                    <br />\r\n                    {props.creationFlag == false ?\r\n                        <div>\r\n                            <button onClick={() => onChange()}>{update == 1 ? 'Submit' : 'Update'}</button>\r\n                        </div>\r\n                        :\r\n                        <div>\r\n                        </div>\r\n                    }\r\n\r\n                </div>\r\n            }\r\n        </div>\r\n    )\r\n}","D:\\Podaci\\7. sem\\Arhitektura i projektovanje softvera\\ml-pipeline-vcs\\fe_app\\src\\Nodes\\ModelEvaluator.jsx",["175","176","177","178","179","180","181","182","183","184","185","186"],"import React, { useEffect, useState } from 'react';\r\nimport \"../Flow/Flow.css\";\r\n\r\nexport default function ModelEvaluator(props) {\r\n\r\n    const [update, setUpdate] = useState(0);\r\n    const [details, setDetails] = useState(0);\r\n\r\n    const [index, setIndex] = useState(\"\");\r\n\r\n    const [input, setInput] = useState([]);\r\n    const [output, setOutput] = useState([]);\r\n\r\n    useEffect(() => {\r\n        if (props.creationFlag == true) {\r\n            setUpdate(true);\r\n\r\n            //mesto za dodavanje parametara\r\n\r\n            let nodes = [...props.nodes];\r\n\r\n            nodes[props.id].available_params = [\"index\"];\r\n            nodes[props.id].params = {\r\n                \"index\": null\r\n            }\r\n\r\n            props.setNodes(nodes);\r\n        }\r\n    }, []);\r\n\r\n\r\n    useEffect(() => {\r\n        if (props.creationFlag == false) {\r\n            setInput(props.nodes[props.id].input_keys);\r\n            setOutput(props.nodes[props.id]?.output_keys);\r\n            setIndex(props.nodes[props.id].params[\"index\"]);\r\n        }\r\n    }, [props.nodes]);\r\n\r\n\r\n    const onChange = () => {\r\n        setUpdate(!update);\r\n        if (update) {\r\n\r\n            let nodes = props.nodes;\r\n\r\n            nodes[props.id].input_keys = input;\r\n            nodes[props.id].output_keys = output;\r\n            nodes[props.id].params[\"index\"] = index;\r\n\r\n            props.setNodes(nodes);\r\n            props.setUpdateFlag(1)\r\n        }\r\n    }\r\n\r\n\r\n    const addInput = () => {\r\n        setInput(input => [...input, \"null\"]);\r\n    }\r\n\r\n    const removeInput = (index) => {\r\n        var temp = [...input];\r\n        temp.splice(index, 1);\r\n        setInput(temp);\r\n    }\r\n\r\n    const changeInput = (index, e) => {\r\n        var temp = [...input];\r\n        temp[index] = e.target.value;\r\n        setInput(temp);\r\n    }\r\n\r\n    const addOutput = () => {\r\n        setOutput(output => [...output, \"null\"]);\r\n    }\r\n\r\n    const removeOutput = (index) => {\r\n        var temp = [...output];\r\n        temp.splice(index, 1);\r\n        setOutput(temp);\r\n    }\r\n\r\n    const changeOutput = (index, e) => {\r\n        var temp = [...output];\r\n        temp[index] = e.target.value;\r\n        setOutput(temp);\r\n    }\r\n\r\n    const changeIndex = (e) => {\r\n        setIndex(e.target.value);\r\n\r\n        if (props.creationFlag) {\r\n            let nodes = [...props.nodes];\r\n            nodes[props.id].params[\"index\"] = e.target.value;\r\n            props.setNodes(nodes);\r\n        }\r\n\r\n    }\r\n\r\n    return (\r\n        <div className=\"node\">\r\n            {details == 0 && <br />}\r\n            <span onClick={() => setDetails(!details)}><b>ModelEvaluator</b></span>\r\n            {details == 1 &&\r\n                <div>\r\n                    <hr></hr>\r\n                    {update ?\r\n                        <>\r\n                            <table className=\"NodeTable\">\r\n                                <thead>\r\n                                    <tr>\r\n                                        <th>\r\n                                            Input keys:\r\n                                        <button onClick={() => addInput()}>+</button>\r\n                                        </th>\r\n\r\n                                    </tr>\r\n                                </thead>\r\n                                {input.length == 0 ?\r\n                                    <tbody>\r\n                                        <tr>\r\n                                            <td>\r\n                                                null\r\n                                        </td>\r\n                                        </tr>\r\n                                    </tbody>\r\n                                    :\r\n                                    <>\r\n                                        {input.map((item, index) => (\r\n                                            <tbody key={index}>\r\n                                                <tr>\r\n                                                    <td>\r\n                                                        <input className=\"inputNode\" type=\"text\" value={item} onChange={(e) => changeInput(index, e)} />\r\n                                                        <button onClick={() => removeInput(index)}>-</button>\r\n                                                    </td>\r\n                                                </tr>\r\n                                            </tbody>\r\n                                        ))}\r\n                                    </>}\r\n                            </table>\r\n                            <table className=\"NodeTable\">\r\n                                <thead>\r\n                                    <tr>\r\n                                        <th>\r\n                                            Output keys:\r\n                                        <button onClick={() => addOutput()}>+</button>\r\n                                        </th>\r\n                                    </tr>\r\n                                </thead>\r\n                                {output.length == 0 ?\r\n                                    <tbody>\r\n                                        <tr>\r\n                                            <td>\r\n                                                null\r\n                                        </td>\r\n                                        </tr>\r\n                                    </tbody>\r\n                                    :\r\n                                    <>\r\n                                        {output.map((item, index) => (\r\n                                            <tbody key={index}>\r\n                                                <tr>\r\n                                                    <td>\r\n                                                        <input className=\"inputNode\" type=\"text\" value={item} onChange={(e) => changeOutput(index, e)} />\r\n                                                        <button onClick={() => removeOutput(index)}>-</button>\r\n                                                    </td>\r\n                                                </tr>\r\n                                            </tbody>\r\n                                        ))}\r\n                                    </>}\r\n                            </table>\r\n                            <table>\r\n                                <tbody>\r\n                                    <tr>\r\n                                        <th> Index: </th>\r\n                                        <td>\r\n                                            <input type=\"text\" value={index} onChange={(e) => changeIndex(e)} />\r\n                                        </td>\r\n                                    </tr>\r\n                                </tbody>\r\n                            </table>\r\n                        </>\r\n                        :\r\n                        <>\r\n                            <table className=\"NodeTable\">\r\n                                <thead>\r\n                                    <tr>\r\n                                        <th>\r\n                                            Input keys:\r\n                                    </th>\r\n\r\n                                    </tr>\r\n                                </thead>\r\n                                {input.length == 0 ?\r\n                                    <tbody>\r\n                                        <tr>\r\n                                            <td>\r\n                                                null\r\n                                   </td>\r\n                                        </tr>\r\n                                    </tbody>\r\n                                    :\r\n                                    <>\r\n                                        {input.map((item, index) => (\r\n                                            <tbody key={index}>\r\n                                                <tr>\r\n                                                    <td>\r\n                                                        {item}\r\n                                                    </td>\r\n                                                </tr>\r\n                                            </tbody>\r\n                                        ))}\r\n                                    </>}\r\n                            </table>\r\n                            <table className=\"NodeTable\">\r\n                                <thead>\r\n                                    <tr>\r\n                                        <th>\r\n                                            Output keys:\r\n                                    </th>\r\n                                    </tr>\r\n                                </thead>\r\n                                {output.length == 0 ?\r\n                                    <tbody>\r\n                                        <tr>\r\n                                            <td>\r\n                                                null\r\n                                        </td>\r\n                                        </tr>\r\n                                    </tbody>\r\n                                    :\r\n                                    <>\r\n                                        {output.map((item, index) => (\r\n                                            <tbody key={index}>\r\n                                                <tr>\r\n                                                    <td>\r\n                                                        {item}\r\n                                                    </td>\r\n                                                </tr>\r\n                                            </tbody>\r\n                                        ))}\r\n                                    </>}\r\n                            </table>\r\n                            <table className=\"NodeTable\">\r\n                                <tbody>\r\n                                    <tr>\r\n                                        <th> Index: </th>\r\n                                        <td> {index ? index : 'null'} </td>\r\n                                    </tr>\r\n                                </tbody>\r\n                            </table>\r\n                        </>\r\n                    }\r\n                    <br />\r\n                    {props.creationFlag == false ?\r\n                        <div>\r\n                            <button onClick={() => onChange()}>{update == 1 ? 'Submit' : 'Update'}</button>\r\n                        </div>\r\n                        :\r\n                        <div>\r\n                        </div>\r\n                    }\r\n                </div>\r\n            }\r\n        </div>\r\n    )\r\n}","D:\\Podaci\\7. sem\\Arhitektura i projektovanje softvera\\ml-pipeline-vcs\\fe_app\\src\\Nodes\\DataStandardizer.jsx",["187","188","189","190","191","192","193","194","195","196","197","198"],"import React, { useEffect,useState } from 'react';\r\nimport \"../Flow/Flow.css\";\r\n\r\nexport default function DataStandardizer(props){\r\n\r\n    const [update,setUpdate] = useState(0);\r\n    const [details,setDetails] = useState(0);\r\n\r\n    const [input,setInput] = useState([]);\r\n    const [output,setOutput] = useState([]);\r\n\r\n\r\n    useEffect(() => {\r\n        if (props.creationFlag == true) {\r\n            setUpdate(true);\r\n\r\n            //mesto za dodavanje parametara, ovde ih nema\r\n        }\r\n\r\n    }, []);\r\n    \r\n\r\n    useEffect(() =>{\r\n        if (props.creationFlag == false) {\r\n            setInput(props.nodes[props.id].input_keys);\r\n            setOutput(props.nodes[props.id]?.output_keys);\r\n        }\r\n    },[props.nodes]);\r\n\r\n\r\n    const onChange = () =>\r\n    {\r\n        setUpdate(!update);\r\n        if(update){\r\n\r\n            let nodes = props.nodes;\r\n            \r\n            nodes[props.id].input_keys = input;\r\n            nodes[props.id].output_keys = output;\r\n\r\n            props.setNodes(nodes);\r\n            props.setUpdateFlag(1);\r\n        }\r\n    }\r\n\r\n\r\n    const addInput = () =>\r\n    {\r\n        setInput(input => [...input,\"null\"]);\r\n    }\r\n\r\n    const removeInput = (index) =>\r\n    {\r\n        var temp = [...input];\r\n        temp.splice(index,1);\r\n        setInput(temp);\r\n    }\r\n\r\n    const changeInput = (index,e) =>\r\n    {\r\n        var temp = [...input];\r\n        temp[index] = e.target.value;\r\n        setInput(temp);\r\n    }\r\n\r\n    const addOutput = () =>\r\n    {\r\n        setOutput(output => [...output,\"null\"]);\r\n    }\r\n\r\n    const removeOutput = (index) =>\r\n    {\r\n        var temp = [...output];\r\n        temp.splice(index,1);\r\n        setOutput(temp);\r\n    }\r\n\r\n    const changeOutput = (index,e) =>\r\n    {\r\n        var temp = [...output];\r\n        temp[index] = e.target.value;\r\n        setOutput(temp);\r\n    }\r\n\r\n\r\n\r\n    return(\r\n        <div className=\"node\">\r\n           {details == 0 && <br/>}\r\n            <span onClick={() => setDetails(!details)}><b>DataStandardizer</b></span>\r\n                {details == 1 &&\r\n                <div>\r\n                    <hr></hr>\r\n                    {update?\r\n                    <>\r\n                        <table className=\"NodeTable\">\r\n                                <thead>\r\n                                    <tr>\r\n                                        <th>\r\n                                            Input keys:\r\n                                        <button onClick={() => addInput()}>+</button>\r\n                                        </th>\r\n\r\n                                    </tr>\r\n                                </thead>\r\n                                {input.length == 0 ?\r\n                                    <tbody>\r\n                                        <tr>\r\n                                            <td>\r\n                                                null\r\n                                        </td>\r\n                                        </tr>\r\n                                    </tbody>\r\n                                    :\r\n                                    <>\r\n                                        {input.map((item, index) => (\r\n                                            <tbody key={index}>\r\n                                                <tr>\r\n                                                    <td>\r\n                                                        <input className=\"inputNode\" type=\"text\" value={item} onChange={(e) => changeInput(index, e)} />\r\n                                                        <button onClick={() => removeInput(index)}>-</button>\r\n                                                    </td>\r\n                                                </tr>\r\n                                            </tbody>\r\n                                        ))}\r\n                                    </>}\r\n                            </table>\r\n                            <table className=\"NodeTable\">\r\n                                <thead>\r\n                                    <tr>\r\n                                        <th>\r\n                                            Output keys:\r\n                                        <button onClick={() => addOutput()}>+</button>\r\n                                        </th>\r\n                                    </tr>\r\n                                </thead>\r\n                                {output.length == 0 ?\r\n                                    <tbody>\r\n                                        <tr>\r\n                                            <td>\r\n                                                null\r\n                                        </td>\r\n                                        </tr>\r\n                                    </tbody>\r\n                                    :\r\n                                    <>\r\n                                        {output.map((item, index) => (\r\n                                            <tbody key={index}>\r\n                                                <tr>\r\n                                                    <td>\r\n                                                        <input className=\"inputNode\" type=\"text\" value={item} onChange={(e) => changeOutput(index, e)} />\r\n                                                        <button onClick={() => removeOutput(index)}>-</button>\r\n                                                    </td>\r\n                                                </tr>\r\n                                            </tbody>\r\n                                        ))}\r\n                                    </>}\r\n                            </table>\r\n                    </>\r\n                    :\r\n                    <>\r\n                        <table className=\"NodeTable\">\r\n                                <thead>\r\n                                    <tr>\r\n                                        <th>\r\n                                            Input keys:\r\n                                    </th>\r\n\r\n                                    </tr>\r\n                                </thead>\r\n                                {input.length == 0 ?\r\n                                    <tbody>\r\n                                        <tr>\r\n                                            <td>\r\n                                                null\r\n                                   </td>\r\n                                        </tr>\r\n                                    </tbody>\r\n                                    :\r\n                                    <>\r\n                                        {input.map((item, index) => (\r\n                                            <tbody key={index}>\r\n                                                <tr>\r\n                                                    <td>\r\n                                                        {item}\r\n                                                    </td>\r\n                                                </tr>\r\n                                            </tbody>\r\n                                        ))}\r\n                                    </>}\r\n                            </table>\r\n                            <table className=\"NodeTable\">\r\n                                <thead>\r\n                                    <tr>\r\n                                        <th>\r\n                                            Output keys:\r\n                                    </th>\r\n                                    </tr>\r\n                                </thead>\r\n                                {output.length == 0 ?\r\n                                    <tbodu>\r\n                                        <tr>\r\n                                            <td>\r\n                                                null\r\n                                        </td>\r\n                                        </tr>\r\n                                    </tbodu>\r\n                                    :\r\n                                    <>\r\n                                        {output.map((item, index) => (\r\n                                            <tbody key={index}>\r\n                                                <tr>\r\n                                                    <td>\r\n                                                        {item}\r\n                                                    </td>\r\n                                                </tr>\r\n                                            </tbody>\r\n                                        ))}\r\n                                    </>}\r\n                            </table>\r\n                    </>\r\n                    }\r\n                    <br/>\r\n                    {props.creationFlag == false ?\r\n                        <div>\r\n                            <button onClick={() => onChange()}>{update == 1 ? 'Submit' : 'Update'}</button>\r\n                        </div>\r\n                        :\r\n                        <div>\r\n                        </div>\r\n                    }\r\n                </div>  \r\n            }\r\n        </div>\r\n    )\r\n}","D:\\Podaci\\7. sem\\Arhitektura i projektovanje softvera\\ml-pipeline-vcs\\fe_app\\src\\Nodes\\ModelPredictor.jsx",["199","200","201","202","203","204","205","206","207","208","209","210","211"],"D:\\Podaci\\7. sem\\Arhitektura i projektovanje softvera\\ml-pipeline-vcs\\fe_app\\src\\Main\\Main.jsx",[],"D:\\Podaci\\7. sem\\Arhitektura i projektovanje softvera\\ml-pipeline-vcs\\fe_app\\src\\Main\\Header.jsx",["212","213"],"import React from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport { useCookies } from 'react-cookie';\r\nimport {useHistory} from \"react-router-dom\";\r\nimport \"./Header.css\";\r\n\r\nexport default function Header()\r\n{\r\n    const [cookies, setCookies, removeCookies] = useCookies(['user']);\r\n    const history = useHistory();\r\n\r\n    const logout = async () => {\r\n        console.log(`Token ${cookies.token}`);\r\n        /*\r\n        const requestOptions = {\r\n            method: 'PUT',\r\n            header: new Headers({\r\n                   'Authorization': `Token ${cookies.token}`\r\n                })\r\n            };\r\n            \r\n\r\n        const requestOptions = {\r\n        method: 'PUT',\r\n        header:{\r\n                'Authorization': `Token ${cookies.token}`\r\n           },\r\n        body: JSON.stringify({'id':cookie.id})  \r\n        };*/\r\n        const requestOptions = {\r\n            method: 'PUT',\r\n            headers:{\r\n                    'Authorization': `Token ${cookies.token}`,\r\n                    'Content-Type': 'application/json',\r\n                    'accept': 'application/json'\r\n                },\r\n            body: JSON.stringify({\"created_by\":cookies.id})  \r\n        };\r\n        console.log(requestOptions);\r\n        const response = await fetch(\"http://localhost:8000/easy_flow/v1/logout/\",requestOptions);\r\n        console.log(response);\r\n\r\n        console.log(\"Logout\");\r\n        removeCookies(\"token\");\r\n        removeCookies(\"id\");\r\n        history.push(\"/\");\r\n    }\r\n\r\n    return(\r\n        <header>\r\n            <nav>\r\n                <ul>\r\n                    <li>\r\n                        <Link to=\"/main\">\r\n                            Profile\r\n                        </Link>\r\n                    </li>\r\n                    <li>\r\n                        <Link to=\"/main/teamCreate\">\r\n                            Create new team\r\n                        </Link>\r\n                    </li>\r\n                    <li>\r\n                            Teams\r\n                    </li>\r\n\r\n                    <li id=\"logout\">\r\n                        <a onClick={logout}>Logout</a>\r\n                    </li>\r\n                </ul>\r\n            </nav>\r\n        </header>\r\n    )\r\n}","D:\\Podaci\\7. sem\\Arhitektura i projektovanje softvera\\ml-pipeline-vcs\\fe_app\\src\\Home\\About.jsx",[],"D:\\Podaci\\7. sem\\Arhitektura i projektovanje softvera\\ml-pipeline-vcs\\fe_app\\src\\Home\\Home.jsx",["214"],"\r\nimport { useState } from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport './Home.css';\r\nimport LogIn from './LogIn';\r\nimport SingUp from './SignUp';\r\n\r\nexport default function Home() \r\n{\r\n\r\n  const [isLog, setIsLog] = useState(true); \r\n\r\n  const handlerRegister = () =>\r\n  {\r\n    setIsLog(false);\r\n  }\r\n\r\n  const handlerLogIn = () =>\r\n  {\r\n    setIsLog(true)\r\n  }\r\n  \r\n    return (\r\n      <div className=\"content\">\r\n        <div className=\"title\">\r\n          <h1>Welcome to EasyFlow</h1>\r\n          <p className=\"about\">\r\n            We are framework designed for...\r\n            {/* <Link className=\"linkToAbout\" to = \"/about\"> About</Link> */}\r\n            <Link className=\"linkToAbout\" \r\n            to ={{\r\n              pathname:\"/about\",\r\n              state: {modal: \"true\"},\r\n            }}>\r\n              About\r\n            </Link>\r\n            <br/>\r\n            i tako dalje\r\n          </p>\r\n        </div>\r\n        <div className=\"signDiv\">\r\n          <Link onClick={handlerRegister}> Register </Link>\r\n          /\r\n          <Link onClick={handlerLogIn}> LogIn </Link>\r\n          <br/>\r\n          {isLog == true ?\r\n            <LogIn></LogIn>\r\n            :<SingUp></SingUp>\r\n          }\r\n          <br/>\r\n        </div>\r\n      </div>\r\n    );\r\n  }","D:\\Podaci\\7. sem\\Arhitektura i projektovanje softvera\\ml-pipeline-vcs\\fe_app\\src\\Home\\LogIn.js",["215","216"],"import React, { useState } from 'react'\r\nimport { useCookies } from 'react-cookie';\r\nimport {useHistory} from \"react-router-dom\";\r\n\r\nexport default function LogIn() {\r\n\r\n    const [username, setUsername] = useState(\"\");\r\n    const [password, setPassword] = useState(\"\");\r\n    const [isError, setIsError] = useState(false);\r\n    const [cookies, setCookies, removeCookies] = useCookies(['user']);\r\n    const history = useHistory();\r\n\r\n    const updateUsername = e => {\r\n        setUsername(e.target.value);\r\n    }\r\n    const updatePassword = e => {\r\n        setPassword(e.target.value);\r\n    }\r\n\r\n\r\n    async function LogIn(){\r\n\r\n        //console.log(JSON.stringify({\"username\":username,\"password\":password}));\r\n        const requestOptions = {\r\n            method: 'POST',\r\n            headers: {'Content-Type': 'application/json' },\r\n            body: JSON.stringify({\"username\":username,\"password\":password})\r\n        };\r\n\r\n        setIsError(false);\r\n\r\n        const response = await fetch('http://localhost:8000/easy_flow/v1/login/',requestOptions);\r\n        const data = await response.json();\r\n\r\n        if(response.ok)\r\n        {\r\n            /*\r\n            const requestOptionsCookie = {\r\n                method: 'GET',\r\n                headers: {\r\n                    'Authorization': 'Token ' + data.token,\r\n                    'Content-Type': 'application/json' \r\n                }\r\n            };\r\n            const responseCookie = await fetch('http://localhost:8000/easy_flow/v1/get_cookie/'+data.user.id+\"/\",requestOptionsCookie);\r\n            const dataCookie = await responseCookie.json();\r\n            console.log(responseCookie);\r\n            console.log(dataCookie);*/\r\n\r\n            setCookies(\"token\",data.token);\r\n            setCookies(\"id\",data.user.id);\r\n            console.log(\"OK\");\r\n            console.log(data);  \r\n            history.push(\"/main\");\r\n        }\r\n        else{\r\n            //removeCookie(\"token\");\r\n            setIsError(true);\r\n            console.log(\"ERROR\");\r\n        }\r\n        \r\n    }\r\n\r\n    return(\r\n        <div className=\"divSignup\">\r\n            { isError && <div> Incorect username or password </div> }\r\n            <br/>\r\n            Username: <input className=\"inputSignup\" type=\"text\" value={username} onChange={updateUsername}/>\r\n            <br/><br/>\r\n            Password: <input className=\"inputSignup\" type=\"text\" value={password} onChange={updatePassword}/>\r\n            <br/><br/>\r\n            <button id=\"buttonSingup\" onClick={LogIn}>LogIn</button>\r\n            <br/><br/>\r\n        </div>\r\n    )\r\n}","D:\\Podaci\\7. sem\\Arhitektura i projektovanje softvera\\ml-pipeline-vcs\\fe_app\\src\\Home\\SignUp.js",["217"],"import React, { useEffect,useState } from 'react'\r\n\r\nexport default function SingUp() {\r\n\r\n    const [firstname, setFirstname] = useState(\"\");\r\n    const [lastname, setLastname] = useState(\"\");\r\n    const [username, setUsername] = useState(\"\");\r\n    const [email, setEmail] = useState(\"\");\r\n    const [password, setPassword] = useState(\"\");\r\n\r\n    const updateFirstname = e => {\r\n        setFirstname(e.target.value);\r\n    }\r\n    const updateLastname = e => {\r\n        setLastname(e.target.value);\r\n    }\r\n    const updateUsername = e => {\r\n        setUsername(e.target.value);\r\n    }\r\n    const updateEmail = e => {\r\n        setEmail(e.target.value);\r\n    }\r\n    const updatePassword = e => {\r\n        setPassword(e.target.value);\r\n    }\r\n\r\n    const createUser = async(e) =>{\r\n        e.preventDefault();\r\n        const requestOptions = {\r\n            method: 'POST',\r\n            headers: {'Content-Type': 'application/json' },\r\n            body: JSON.stringify({\"username\":username,\"email\":email,\"password\":password,\"first_name\":firstname,\"last_name\":lastname})};\r\n            \r\n        const response = await fetch('http://localhost:8000/easy_flow/v1/user_create/',requestOptions);\r\n        console.log(response);\r\n    }\r\n\r\n    return (\r\n        <div className=\"divSignup\">\r\n            <form onSubmit={createUser}>\r\n                Username: <input className=\"inputSignup\" type=\"text\" value={username} onChange={updateUsername} />\r\n                <br /><br />\r\n                E-mail: <input className=\"inputSignup\" type=\"text\" value={email} onChange={updateEmail} />\r\n                <br /><br />\r\n                Fistname: <input className=\"inputSignup\" type=\"text\" value={firstname} onChange={updateFirstname} />\r\n                <br /><br />\r\n                Lastname: <input className=\"inputSignup\" type=\"text\" value={lastname} onChange={updateLastname} />\r\n                <br /><br />\r\n                Password: <input className=\"inputSignup\" type=\"text\" value={password} onChange={updatePassword} />\r\n                <br /><br />\r\n                <button type=\"submit\" id=\"buttonSingup\">SignUp</button>\r\n            </form>\r\n        </div>\r\n    )\r\n}","D:\\Podaci\\7. sem\\Arhitektura i projektovanje softvera\\ml-pipeline-vcs\\fe_app\\src\\UserStart\\UserProfil.jsx",["218","219","220","221","222","223","224","225","226"],"D:\\Podaci\\7. sem\\Arhitektura i projektovanje softvera\\ml-pipeline-vcs\\fe_app\\src\\UserStart\\Start.js",["227"],"import React, { useEffect,useState } from 'react'\r\nimport { Link } from 'react-router-dom';\r\nimport './Start.css'\r\nimport { useCookies } from 'react-cookie';\r\n\r\nexport default function Start({children}){\r\n\r\n    const [cookies] = useCookies(['user']);\r\n    const [user,setUser] = useState([]);\r\n    const [teams,setTeams] = useState([]);\r\n    const [myTeams, setMyTeams] = useState([]);\r\n\r\n    useEffect(() => {\r\n        getUser();\r\n    },[] );\r\n\r\n    const getUser = async () =>\r\n    {\r\n        const requestOptions = {\r\n            method: 'GET',\r\n            headers:{\r\n                'Authorization': 'Token ' + cookies.token,\r\n                'Content-Type': 'application/json',\r\n                'accept': 'application/json'\r\n            }\r\n            };\r\n        const response = await fetch(\"http://localhost:8000/easy_flow/v1/user/\" + cookies.id +\"/\", requestOptions);\r\n        const data = await response.json();\r\n\r\n        setUser(data);\r\n        setTeams(data.teams);\r\n        setMyTeams(data.created_teams);\r\n    }\r\n\r\n    return (\r\n        <div className=\"content\" id=\"start\">\r\n            <aside id=\"teams\">\r\n                <nav>\r\n                    <ul>\r\n                        <p>\r\n                            <Link to=\"/main/teamCreate\">\r\n                                Create new team\r\n                            </Link>\r\n                        </p>\r\n                        Your teams\r\n                        {myTeams?.map(team => (\r\n                            <li key={team.name}>\r\n                                <Link to={`/main/team/${team.id}/${1}`}>\r\n                                    {team.name}\r\n                                </Link>\r\n                            </li>\r\n                        ))}\r\n                        You are member\r\n                        {teams?.map(team => (\r\n                            <li key={team.name}>\r\n                                <Link to={`/main/team/${team.id}/${0}`}>\r\n                                    {team.leader.username}/{team.name}\r\n                                </Link>\r\n                            </li>\r\n                        ))}\r\n                    </ul>\r\n                </nav>\r\n            </aside>\r\n            <main>\r\n                {children(user)}\r\n            </main>\r\n        </div>\r\n    )\r\n}","D:\\Podaci\\7. sem\\Arhitektura i projektovanje softvera\\ml-pipeline-vcs\\fe_app\\src\\UserStart\\Team.jsx",["228","229","230"],"D:\\Podaci\\7. sem\\Arhitektura i projektovanje softvera\\ml-pipeline-vcs\\fe_app\\src\\UserStart\\TeamCreate.jsx",["231"],"import React, { useEffect,useState } from 'react';\r\nimport { useCookies } from 'react-cookie';\r\n\r\nexport default function TeamCreate({user}){\r\n\r\n    const [teamname, setTeamname] = useState(\"\");\r\n    const [cookies] = useCookies(['user']);\r\n\r\n    const updateTeamname = e => {\r\n        setTeamname(e.target.value);\r\n    }\r\n\r\n    const createTeam = async(e) => {\r\n        e.preventDefault();\r\n        const requestOptions = {\r\n            method: 'POST',\r\n            headers:{\r\n                'Authorization': 'Token ' + cookies.token,\r\n                'Content-Type': 'application/json',\r\n                'accept': 'application/json'\r\n            },\r\n            body: JSON.stringify({\"created_by\":cookies.id,\"name\":teamname})\r\n        };\r\n\r\n        const response = await fetch(\"http://localhost:8000/easy_flow/v1/team_create/\",requestOptions);\r\n        const data = await response.json();\r\n        console.log(data);\r\n\r\n        if(response.ok)\r\n        {\r\n            console.log(\"OK\");\r\n            console.log(data);\r\n        }\r\n        else\r\n        {\r\n            console.log(\"ERROR\");\r\n        }\r\n    }\r\n\r\n    return(\r\n        <div className=\"contentBody\">\r\n            \r\n        <form onSubmit={createTeam}>\r\n            Team name: <input className=\"inputSignup\" type=\"text\" value={teamname} onChange={updateTeamname} />\r\n            <br /><br />\r\n            <button type=\"submit\" id=\"buttonSingup\">Create team</button>\r\n        </form>\r\n    </div>\r\n    )\r\n}\r\n","D:\\Podaci\\7. sem\\Arhitektura i projektovanje softvera\\ml-pipeline-vcs\\fe_app\\src\\Flow\\FlowCreate.jsx",["232","233","234","235","236","237","238","239","240"],"import React, { useEffect,useState,useReducer } from 'react';\r\nimport './Flow.css';\r\nimport { useCookies } from 'react-cookie';\r\n\r\nimport { useParams } from 'react-router-dom';\r\nimport DatasetLoader from '../Nodes/DatasetLoader';\r\nimport ModelLoader from '../Nodes/ModelLoader';\r\nimport DataNormalizer from '../Nodes/DataNormalizer';\r\nimport DataPlotter from '../Nodes/DataPlotter';\r\nimport ModelEvaluator from '../Nodes/ModelEvaluator';\r\nimport DataStandardizer from '../Nodes/DataStandardizer';\r\nimport ModelPredictor from '../Nodes/ModelPredictor';\r\n\r\n\r\nexport default function FlowCreate(){\r\n\r\n    const [cookies] = useCookies(['user']);\r\n    const {teamid} = useParams();\r\n\r\n    const [flowname, setFlowName] = useState(\"\");\r\n    const [initialVersion, setInitialVersion] = useState(\"\");\r\n\r\n\r\n    const [nodes, setNodes] = useState([]);\r\n    const [isMount, setIsMount] = useState(1);\r\n\r\n\r\n    //const [nodeComponents, setNodeComponents] = useState();\r\n    //const [nodesCount, setNodesCount] = useState(0);\r\n\r\n    const [flow, setFlow] = useState({\r\n        \"created_by\": cookies.id,\r\n        \"team\" : teamid,\r\n        serialized_flow: {\r\n            flow_name: flowname,\r\n            flow_version: initialVersion,\r\n            nodes: nodes,\r\n        }\r\n    });\r\n\r\n        \r\n    useEffect(() => {\r\n        if(isMount)\r\n            setIsMount(0);\r\n        else\r\n            createFlowVersion();\r\n    },[flow] );\r\n\r\n\r\n    const createFlowVersion = async() => {\r\n\r\n        const requestOptions = {\r\n            method: 'POST',\r\n            headers:{\r\n                'Authorization': 'Token ' + cookies.token,\r\n                'Content-Type': 'application/json',\r\n                'accept': 'application/json'\r\n            },\r\n            body: JSON.stringify(flow)\r\n        };\r\n\r\n        const response = await fetch(\"http://localhost:8000/easy_flow/v1/flow_create/\",requestOptions);\r\n        const data = await response.json();\r\n        console.log(data);\r\n    }\r\n\r\n    const handleSave = () => {\r\n        setFlow({...flow, serialized_flow: {...flow.serialized_flow,flow_name: flowname, flow_version: initialVersion, nodes: nodes}});\r\n    }\r\n\r\n    const addNode = (type) => {\r\n\r\n        var node = {\r\n            \"available_params\": [],\r\n            \"input_keys\": [],\r\n            \"output_keys\": [],\r\n            \"params\": {},\r\n            \"type\": type\r\n        }\r\n        setNodes(nodes => [...nodes, node]);\r\n    }\r\n             \r\n    return(\r\n        <div className=\"flowCreate\">\r\n            <div className=\"nodeSelection\">\r\n                Flow name: <input className=\"inputNode\" type=\"text\" value={flowname} onChange={(e) => setFlowName(e.target.value)}/>\r\n                <br/>\r\n                Initial version: <input className=\"inputNode\" type=\"text\" value={initialVersion} onChange={(e) => setInitialVersion(e.target.value)}/>\r\n                <p id=\"naslov\">Create initial version for: {flowname}</p>\r\n                <p>Add commponent:</p>\r\n                <ul>\r\n                    <p className=\"link\" onClick={() => addNode(\"data_normalizer\")}>- DataNormalizer</p>\r\n                    <p className=\"link\" onClick={() => addNode(\"data_plotter\")}>- DataPlotter</p>\r\n                    <p className=\"link\" onClick={() => addNode(\"keras_dataset_loader\")}>- DatasetLoader</p>\r\n                    <p className=\"link\" onClick={() => addNode(\"data_standardizer\")}>- DataStandardizer</p>\r\n                    <p className=\"link\" onClick={() => addNode(\"model_evaluator\")}>- ModelEvaluator</p>\r\n                    <p className=\"link\" onClick={() => addNode(\"model_loader\")}>- ModelLoader</p>\r\n                    <p className=\"link\" onClick={() => addNode(\"model_predictor\")}>- ModlerPredictor</p>\r\n                </ul>\r\n                <button onClick={() => handleSave()}>Save</button>\r\n            </div>\r\n            <div className=\"flowReview\">\r\n\r\n                {nodes?.map((node, index) => (\r\n                    <div key={index}>\r\n                        {node.type == \"data_normalizer\" &&\r\n                        <DataNormalizer nodes={nodes} setNodes={setNodes} creationFlag={true} id={index}/>}\r\n\r\n                        {node.type == \"data_plotter\" &&\r\n                        <DataPlotter nodes={nodes} setNodes={setNodes} creationFlag={true} id={index}/>}\r\n                        \r\n                        {node.type == \"keras_dataset_loader\" && \r\n                        <DatasetLoader nodes={nodes} setNodes={setNodes} creationFlag={true} id={index}/>}    \r\n\r\n                        {node.type == \"data_standardizer\" &&\r\n                        <DataStandardizer nodes={nodes} setNodes={setNodes} creationFlag={true} id={index}/>}\r\n                        \r\n                        {node.type == \"model_evaluator\" &&\r\n                        <ModelEvaluator nodes={nodes} setNodes={setNodes} creationFlag={true} id={index}/>}\r\n\r\n                        {node.type == \"model_loader\" &&  \r\n                        <ModelLoader  nodes={nodes} setNodes={setNodes} creationFlag={true} id={index}/>}\r\n                        \r\n                        {node.type == \"model_predictor\" &&\r\n                        <ModelPredictor nodes={nodes} setNodes={setNodes} creationFlag={true} id={index}/>}\r\n                    </div>\r\n                ))}\r\n            </div>\r\n        </div>\r\n    )\r\n    \r\n}\r\n","D:\\Podaci\\7. sem\\Arhitektura i projektovanje softvera\\ml-pipeline-vcs\\fe_app\\src\\Flow\\FlowVersionCreate.jsx",["241","242","243","244","245","246","247","248","249","250","251","252","253","254","255"],"import React, { forwardRef, useRef, useEffect,useState,useImperativeHandle } from 'react';\r\nimport './Flow.css';\r\nimport { useCookies } from 'react-cookie';\r\nimport TreeView from '@material-ui/lab/TreeView';\r\nimport TreeItem from '@material-ui/lab/TreeItem';\r\nimport ExpandMoreIcon from '@material-ui/icons/ExpandMore';\r\nimport ChevronRightIcon from '@material-ui/icons/ChevronRight';\r\nimport { useParams } from 'react-router-dom';\r\n\r\nimport DatasetLoader from '../Nodes/DatasetLoader';\r\nimport ModelLoader from '../Nodes/ModelLoader';\r\nimport DataNormalizer from '../Nodes/DataNormalizer';\r\nimport DataPlotter from '../Nodes/DataPlotter';\r\nimport ModelEvaluator from '../Nodes/ModelEvaluator';\r\nimport DataStandardizer from '../Nodes/DataStandardizer';\r\nimport ModelPredictor from '../Nodes/ModelPredictor';\r\n\r\nexport default function FlowVersionCreate(){\r\n\r\n    const [cookies] = useCookies(['user']);\r\n    //const {teamid} = useParams();\r\n    const {rootid} = useParams();\r\n    const {flowname} = useParams();\r\n    const {prev} = useParams();\r\n    \r\n\r\n    const [initialVersion, setInitialVersion] = useState(\"\");\r\n\r\n    const [nodes, setNodes] = useState([]);\r\n    const [isMount, setIsMount] = useState(1);\r\n\r\n\r\n    const [flow,setFlow] = useState(\r\n    {\r\n        \"created_by\": cookies.id,\r\n        \"flow\" : rootid,\r\n        \"prev_flow_version\": prev,\r\n        \"serialized_flow\": {\r\n            flow_name: flowname,\r\n            flow_version: initialVersion,\r\n            nodes: nodes\r\n        }\r\n    });\r\n\r\n\r\n    useEffect(() => {\r\n        if(isMount)\r\n            setIsMount(0);\r\n        else\r\n            createFlowVersion();\r\n    },[flow] );\r\n\r\n\r\n    const createFlowVersion = async() => {\r\n\r\n        const requestOptions = {\r\n            method: 'POST',\r\n            headers:{\r\n                'Authorization': 'Token ' + cookies.token,\r\n                'Content-Type': 'application/json',\r\n                'accept': 'application/json'\r\n            },\r\n            body: JSON.stringify(flow)\r\n        };\r\n\r\n        const response = await fetch(\"http://localhost:8000/easy_flow/v1/flow_version_create/\",requestOptions);\r\n        const data = await response.json();\r\n        console.log(data);\r\n    }\r\n\r\n\r\n    const handleSave = () => {\r\n        setFlow({...flow, serialized_flow: {...flow.serialized_flow,flow_name: flowname, flow_version: initialVersion, nodes: nodes}});\r\n    }\r\n\r\n    const addNode = (type) => {\r\n\r\n        var node = {\r\n            \"available_params\": [],\r\n            \"input_keys\": [],\r\n            \"output_keys\": [],\r\n            \"params\": {},\r\n            \"type\": type\r\n        }\r\n\r\n        setNodes(nodes => [...nodes, node]);\r\n    }\r\n             \r\n\r\n    return(\r\n        <div className=\"flowCreate\">\r\n            <div className=\"nodeSelection\">\r\n                <p id=\"naslov\">Create flow version for: {flowname}</p>\r\n                <br/>   \r\n                Version number: <input className=\"inputNode\" type=\"text\" value={initialVersion} onChange={(e) => setInitialVersion(e.target.value)}/>\r\n                <p>Add commponent:</p>\r\n                <ul>\r\n                    <p className=\"link\" onClick={() => addNode(\"data_normalizer\")}>- DataNormalizer</p>\r\n                    <p className=\"link\" onClick={() => addNode(\"data_plotter\")}>- DataPlotter</p>\r\n                    <p className=\"link\" onClick={() => addNode(\"keras_dataset_loader\")}>- DatasetLoader</p>\r\n                    <p className=\"link\" onClick={() => addNode(\"data_standardizer\")}>- DataStandardizer</p>\r\n                    <p className=\"link\" onClick={() => addNode(\"model_evaluator\")}>- ModelEvaluator</p>\r\n                    <p className=\"link\" onClick={() => addNode(\"model_loader\")}>- ModelLoader</p>\r\n                    <p className=\"link\" onClick={() => addNode(\"model_predictor\")}>- ModlerPredictor</p>\r\n                </ul>\r\n                <button onClick={() => handleSave()}>Save</button>\r\n            </div>\r\n            <div className=\"flowReview\">\r\n            {nodes?.map((node, index) => (\r\n                    <div key={index}>\r\n                        {node.type == \"data_normalizer\" &&\r\n                        <DataNormalizer nodes={nodes} setNodes={setNodes} creationFlag={true} id={index}/>}\r\n\r\n                        {node.type == \"data_plotter\" &&\r\n                        <DataPlotter nodes={nodes} setNodes={setNodes} creationFlag={true} id={index}/>}\r\n                        \r\n                        {node.type == \"keras_dataset_loader\" && \r\n                        <DatasetLoader nodes={nodes} setNodes={setNodes} creationFlag={true} id={index}/>}    \r\n\r\n                        {node.type == \"data_standardizer\" &&\r\n                        <DataStandardizer nodes={nodes} setNodes={setNodes} creationFlag={true} id={index}/>}\r\n                        \r\n                        {node.type == \"model_evaluator\" &&\r\n                        <ModelEvaluator nodes={nodes} setNodes={setNodes} creationFlag={true} id={index}/>}\r\n\r\n                        {node.type == \"model_loader\" &&  \r\n                        <ModelLoader  nodes={nodes} setNodes={setNodes} creationFlag={true} id={index}/>}\r\n                        \r\n                        {node.type == \"model_predictor\" &&\r\n                        <ModelPredictor nodes={nodes} setNodes={setNodes} creationFlag={true} id={index}/>}\r\n                    </div>\r\n                ))}\r\n            </div>\r\n        </div>\r\n    )\r\n    \r\n}\r\n","D:\\Podaci\\7. sem\\Arhitektura i projektovanje softvera\\ml-pipeline-vcs\\fe_app\\src\\Flow\\FlowContainer.jsx",["256","257","258","259","260"],"import React, { useEffect,useState } from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport { useCookies } from 'react-cookie';  \r\nimport { useParams } from \"react-router-dom\";\r\n\r\nimport './Flow.css';\r\nimport FlowCreate from './FlowCreate';\r\nimport Flow from './Flow';\r\n\r\nexport default function FlowContainer({children}){\r\n\r\n    const [cookies] = useCookies(['user']);\r\n    const {teamid} = useParams();\r\n    const {drugi} = useParams();\r\n    const [team,setTeam] = useState([]);\r\n    const [flows,setFlows] = useState([]);\r\n\r\n    useEffect(() => {\r\n        getTeam();\r\n    },[] );\r\n\r\n    const getTeam = async () =>\r\n    {\r\n        const requestOptions = {\r\n            method: 'GET',\r\n            headers:{\r\n                'Authorization': 'Token ' + cookies.token,\r\n                'Content-Type': 'application/json',\r\n                'accept': 'application/json'\r\n            }\r\n            };\r\n        const response = await fetch(\"http://localhost:8000/easy_flow/v1/team/\" + teamid +\"/\", requestOptions);\r\n        const data = await response.json();\r\n        setTeam(data);\r\n        setFlows(data.flows);\r\n    }\r\n\r\n\r\n    return(\r\n        <div className=\"content\" id=\"flow\">\r\n            <aside id=\"side\">\r\n                <nav>\r\n                    Flows list\r\n                    <ul>\r\n                        {flows?.map(flow =>(\r\n                            <li key={flow.name}>\r\n                                <Link to={`/flow/${teamid}/${flow.name}/${flow.root.id}`} forceRefresh={true}>\r\n                                    {flow.name}\r\n                                </Link>\r\n                            </li>\r\n                        ))}\r\n                    </ul>\r\n                </nav>\r\n                <Link to={`/flow/${teamid}/create`}>Create flow</Link>\r\n                <br/>\r\n            </aside>\r\n            <main>\r\n                {children}\r\n            </main>\r\n        </div>\r\n    )\r\n}","D:\\Podaci\\7. sem\\Arhitektura i projektovanje softvera\\ml-pipeline-vcs\\fe_app\\src\\Flow\\Flow.jsx",["261","262","263","264","265","266","267","268","269"],"D:\\Podaci\\7. sem\\Arhitektura i projektovanje softvera\\ml-pipeline-vcs\\fe_app\\src\\Flow\\ExeWindow.jsx",["270","271","272"],{"ruleId":"273","replacedBy":"274"},{"ruleId":"275","replacedBy":"276"},{"ruleId":"277","severity":1,"message":"278","line":2,"column":10,"nodeType":"279","messageId":"280","endLine":2,"endColumn":19},{"ruleId":"281","severity":1,"message":"282","line":20,"column":32,"nodeType":"283","messageId":"284","endLine":20,"endColumn":34},{"ruleId":"285","severity":1,"message":"286","line":36,"column":8,"nodeType":"287","endLine":36,"endColumn":10,"suggestions":"288"},{"ruleId":"281","severity":1,"message":"282","line":40,"column":32,"nodeType":"283","messageId":"284","endLine":40,"endColumn":34},{"ruleId":"285","severity":1,"message":"289","line":45,"column":8,"nodeType":"287","endLine":45,"endColumn":21,"suggestions":"290"},{"ruleId":"281","severity":1,"message":"282","line":157,"column":22,"nodeType":"283","messageId":"284","endLine":157,"endColumn":24},{"ruleId":"281","severity":1,"message":"282","line":160,"column":22,"nodeType":"283","messageId":"284","endLine":160,"endColumn":24},{"ruleId":"281","severity":1,"message":"282","line":175,"column":47,"nodeType":"283","messageId":"284","endLine":175,"endColumn":49},{"ruleId":"281","severity":1,"message":"282","line":206,"column":48,"nodeType":"283","messageId":"284","endLine":206,"endColumn":50},{"ruleId":"281","severity":1,"message":"282","line":247,"column":47,"nodeType":"283","messageId":"284","endLine":247,"endColumn":49},{"ruleId":"281","severity":1,"message":"282","line":276,"column":48,"nodeType":"283","messageId":"284","endLine":276,"endColumn":50},{"ruleId":"281","severity":1,"message":"282","line":302,"column":41,"nodeType":"283","messageId":"284","endLine":302,"endColumn":43},{"ruleId":"281","severity":1,"message":"282","line":304,"column":72,"nodeType":"283","messageId":"284","endLine":304,"endColumn":74},{"ruleId":"281","severity":1,"message":"282","line":25,"column":32,"nodeType":"283","messageId":"284","endLine":25,"endColumn":34},{"ruleId":"285","severity":1,"message":"286","line":49,"column":8,"nodeType":"287","endLine":49,"endColumn":10,"suggestions":"291"},{"ruleId":"281","severity":1,"message":"282","line":53,"column":32,"nodeType":"283","messageId":"284","endLine":53,"endColumn":34},{"ruleId":"285","severity":1,"message":"292","line":69,"column":8,"nodeType":"287","endLine":69,"endColumn":20,"suggestions":"293"},{"ruleId":"281","severity":1,"message":"282","line":280,"column":22,"nodeType":"283","messageId":"284","endLine":280,"endColumn":24},{"ruleId":"281","severity":1,"message":"282","line":282,"column":22,"nodeType":"283","messageId":"284","endLine":282,"endColumn":24},{"ruleId":"281","severity":1,"message":"282","line":285,"column":29,"nodeType":"283","messageId":"284","endLine":285,"endColumn":31},{"ruleId":"281","severity":1,"message":"282","line":297,"column":47,"nodeType":"283","messageId":"284","endLine":297,"endColumn":49},{"ruleId":"281","severity":1,"message":"282","line":328,"column":48,"nodeType":"283","messageId":"284","endLine":328,"endColumn":50},{"ruleId":"281","severity":1,"message":"282","line":419,"column":48,"nodeType":"283","messageId":"284","endLine":419,"endColumn":50},{"ruleId":"281","severity":1,"message":"282","line":448,"column":48,"nodeType":"283","messageId":"284","endLine":448,"endColumn":50},{"ruleId":"281","severity":1,"message":"282","line":511,"column":41,"nodeType":"283","messageId":"284","endLine":511,"endColumn":43},{"ruleId":"281","severity":1,"message":"282","line":513,"column":72,"nodeType":"283","messageId":"284","endLine":513,"endColumn":74},{"ruleId":"277","severity":1,"message":"294","line":1,"column":8,"nodeType":"279","messageId":"280","endLine":1,"endColumn":19},{"ruleId":"277","severity":1,"message":"295","line":2,"column":17,"nodeType":"279","messageId":"280","endLine":2,"endColumn":27},{"ruleId":"277","severity":1,"message":"296","line":2,"column":50,"nodeType":"279","messageId":"280","endLine":2,"endColumn":69},{"ruleId":"277","severity":1,"message":"297","line":2,"column":71,"nodeType":"279","messageId":"280","endLine":2,"endColumn":82},{"ruleId":"281","severity":1,"message":"282","line":16,"column":32,"nodeType":"283","messageId":"284","endLine":16,"endColumn":34},{"ruleId":"285","severity":1,"message":"298","line":22,"column":8,"nodeType":"287","endLine":22,"endColumn":10,"suggestions":"299"},{"ruleId":"281","severity":1,"message":"282","line":26,"column":32,"nodeType":"283","messageId":"284","endLine":26,"endColumn":34},{"ruleId":"285","severity":1,"message":"300","line":30,"column":8,"nodeType":"287","endLine":30,"endColumn":21,"suggestions":"301"},{"ruleId":"281","severity":1,"message":"282","line":141,"column":22,"nodeType":"283","messageId":"284","endLine":141,"endColumn":24},{"ruleId":"281","severity":1,"message":"282","line":145,"column":22,"nodeType":"283","messageId":"284","endLine":145,"endColumn":24},{"ruleId":"281","severity":1,"message":"282","line":162,"column":47,"nodeType":"283","messageId":"284","endLine":162,"endColumn":49},{"ruleId":"281","severity":1,"message":"282","line":193,"column":48,"nodeType":"283","messageId":"284","endLine":193,"endColumn":50},{"ruleId":"281","severity":1,"message":"282","line":229,"column":47,"nodeType":"283","messageId":"284","endLine":229,"endColumn":49},{"ruleId":"281","severity":1,"message":"282","line":258,"column":48,"nodeType":"283","messageId":"284","endLine":258,"endColumn":50},{"ruleId":"281","severity":1,"message":"282","line":282,"column":41,"nodeType":"283","messageId":"284","endLine":282,"endColumn":43},{"ruleId":"281","severity":1,"message":"282","line":284,"column":72,"nodeType":"283","messageId":"284","endLine":284,"endColumn":74},{"ruleId":"281","severity":1,"message":"282","line":16,"column":32,"nodeType":"283","messageId":"284","endLine":16,"endColumn":34},{"ruleId":"285","severity":1,"message":"286","line":31,"column":8,"nodeType":"287","endLine":31,"endColumn":10,"suggestions":"302"},{"ruleId":"281","severity":1,"message":"282","line":34,"column":32,"nodeType":"283","messageId":"284","endLine":34,"endColumn":34},{"ruleId":"285","severity":1,"message":"303","line":39,"column":8,"nodeType":"287","endLine":39,"endColumn":10,"suggestions":"304"},{"ruleId":"281","severity":1,"message":"282","line":156,"column":22,"nodeType":"283","messageId":"284","endLine":156,"endColumn":24},{"ruleId":"281","severity":1,"message":"282","line":158,"column":22,"nodeType":"283","messageId":"284","endLine":158,"endColumn":24},{"ruleId":"281","severity":1,"message":"282","line":161,"column":29,"nodeType":"283","messageId":"284","endLine":161,"endColumn":31},{"ruleId":"281","severity":1,"message":"282","line":173,"column":47,"nodeType":"283","messageId":"284","endLine":173,"endColumn":49},{"ruleId":"281","severity":1,"message":"282","line":204,"column":48,"nodeType":"283","messageId":"284","endLine":204,"endColumn":50},{"ruleId":"281","severity":1,"message":"282","line":248,"column":47,"nodeType":"283","messageId":"284","endLine":248,"endColumn":49},{"ruleId":"281","severity":1,"message":"282","line":277,"column":48,"nodeType":"283","messageId":"284","endLine":277,"endColumn":50},{"ruleId":"281","severity":1,"message":"282","line":309,"column":41,"nodeType":"283","messageId":"284","endLine":309,"endColumn":43},{"ruleId":"281","severity":1,"message":"282","line":311,"column":72,"nodeType":"283","messageId":"284","endLine":311,"endColumn":74},{"ruleId":"281","severity":1,"message":"282","line":15,"column":32,"nodeType":"283","messageId":"284","endLine":15,"endColumn":34},{"ruleId":"285","severity":1,"message":"286","line":29,"column":8,"nodeType":"287","endLine":29,"endColumn":10,"suggestions":"305"},{"ruleId":"281","severity":1,"message":"282","line":33,"column":32,"nodeType":"283","messageId":"284","endLine":33,"endColumn":34},{"ruleId":"285","severity":1,"message":"300","line":38,"column":8,"nodeType":"287","endLine":38,"endColumn":21,"suggestions":"306"},{"ruleId":"281","severity":1,"message":"282","line":102,"column":22,"nodeType":"283","messageId":"284","endLine":102,"endColumn":24},{"ruleId":"281","severity":1,"message":"282","line":104,"column":22,"nodeType":"283","messageId":"284","endLine":104,"endColumn":24},{"ruleId":"281","severity":1,"message":"282","line":119,"column":47,"nodeType":"283","messageId":"284","endLine":119,"endColumn":49},{"ruleId":"281","severity":1,"message":"282","line":150,"column":48,"nodeType":"283","messageId":"284","endLine":150,"endColumn":50},{"ruleId":"281","severity":1,"message":"282","line":194,"column":47,"nodeType":"283","messageId":"284","endLine":194,"endColumn":49},{"ruleId":"281","severity":1,"message":"282","line":223,"column":48,"nodeType":"283","messageId":"284","endLine":223,"endColumn":50},{"ruleId":"281","severity":1,"message":"282","line":255,"column":41,"nodeType":"283","messageId":"284","endLine":255,"endColumn":43},{"ruleId":"281","severity":1,"message":"282","line":257,"column":72,"nodeType":"283","messageId":"284","endLine":257,"endColumn":74},{"ruleId":"281","severity":1,"message":"282","line":14,"column":32,"nodeType":"283","messageId":"284","endLine":14,"endColumn":34},{"ruleId":"285","severity":1,"message":"298","line":20,"column":8,"nodeType":"287","endLine":20,"endColumn":10,"suggestions":"307"},{"ruleId":"281","severity":1,"message":"282","line":24,"column":32,"nodeType":"283","messageId":"284","endLine":24,"endColumn":34},{"ruleId":"285","severity":1,"message":"300","line":28,"column":7,"nodeType":"287","endLine":28,"endColumn":20,"suggestions":"308"},{"ruleId":"281","severity":1,"message":"282","line":89,"column":21,"nodeType":"283","messageId":"284","endLine":89,"endColumn":23},{"ruleId":"281","severity":1,"message":"282","line":91,"column":26,"nodeType":"283","messageId":"284","endLine":91,"endColumn":28},{"ruleId":"281","severity":1,"message":"282","line":106,"column":47,"nodeType":"283","messageId":"284","endLine":106,"endColumn":49},{"ruleId":"281","severity":1,"message":"282","line":137,"column":48,"nodeType":"283","messageId":"284","endLine":137,"endColumn":50},{"ruleId":"281","severity":1,"message":"282","line":171,"column":47,"nodeType":"283","messageId":"284","endLine":171,"endColumn":49},{"ruleId":"281","severity":1,"message":"282","line":200,"column":48,"nodeType":"283","messageId":"284","endLine":200,"endColumn":50},{"ruleId":"281","severity":1,"message":"282","line":224,"column":41,"nodeType":"283","messageId":"284","endLine":224,"endColumn":43},{"ruleId":"281","severity":1,"message":"282","line":226,"column":72,"nodeType":"283","messageId":"284","endLine":226,"endColumn":74},{"ruleId":"281","severity":1,"message":"282","line":15,"column":32,"nodeType":"283","messageId":"284","endLine":15,"endColumn":34},{"ruleId":"285","severity":1,"message":"286","line":30,"column":8,"nodeType":"287","endLine":30,"endColumn":10,"suggestions":"309"},{"ruleId":"281","severity":1,"message":"282","line":34,"column":32,"nodeType":"283","messageId":"284","endLine":34,"endColumn":34},{"ruleId":"285","severity":1,"message":"310","line":39,"column":8,"nodeType":"287","endLine":39,"endColumn":21,"suggestions":"311"},{"ruleId":"281","severity":1,"message":"282","line":152,"column":22,"nodeType":"283","messageId":"284","endLine":152,"endColumn":24},{"ruleId":"281","severity":1,"message":"282","line":154,"column":22,"nodeType":"283","messageId":"284","endLine":154,"endColumn":24},{"ruleId":"281","severity":1,"message":"282","line":157,"column":29,"nodeType":"283","messageId":"284","endLine":157,"endColumn":31},{"ruleId":"281","severity":1,"message":"282","line":169,"column":47,"nodeType":"283","messageId":"284","endLine":169,"endColumn":49},{"ruleId":"281","severity":1,"message":"282","line":200,"column":48,"nodeType":"283","messageId":"284","endLine":200,"endColumn":50},{"ruleId":"281","severity":1,"message":"282","line":242,"column":48,"nodeType":"283","messageId":"284","endLine":242,"endColumn":50},{"ruleId":"281","severity":1,"message":"282","line":271,"column":48,"nodeType":"283","messageId":"284","endLine":271,"endColumn":50},{"ruleId":"281","severity":1,"message":"282","line":303,"column":41,"nodeType":"283","messageId":"284","endLine":303,"endColumn":43},{"ruleId":"281","severity":1,"message":"282","line":305,"column":72,"nodeType":"283","messageId":"284","endLine":305,"endColumn":74},{"ruleId":"277","severity":1,"message":"312","line":9,"column":21,"nodeType":"279","messageId":"280","endLine":9,"endColumn":31},{"ruleId":"313","severity":1,"message":"314","line":68,"column":25,"nodeType":"315","endLine":68,"endColumn":45},{"ruleId":"281","severity":1,"message":"282","line":46,"column":18,"nodeType":"283","messageId":"284","endLine":46,"endColumn":20},{"ruleId":"277","severity":1,"message":"316","line":10,"column":12,"nodeType":"279","messageId":"280","endLine":10,"endColumn":19},{"ruleId":"277","severity":1,"message":"317","line":10,"column":33,"nodeType":"279","messageId":"280","endLine":10,"endColumn":46},{"ruleId":"277","severity":1,"message":"318","line":1,"column":17,"nodeType":"279","messageId":"280","endLine":1,"endColumn":26},{"ruleId":"277","severity":1,"message":"319","line":1,"column":27,"nodeType":"279","messageId":"280","endLine":1,"endColumn":37},{"ruleId":"277","severity":1,"message":"320","line":2,"column":27,"nodeType":"279","messageId":"280","endLine":2,"endColumn":33},{"ruleId":"277","severity":1,"message":"321","line":2,"column":35,"nodeType":"279","messageId":"280","endLine":2,"endColumn":41},{"ruleId":"277","severity":1,"message":"322","line":2,"column":43,"nodeType":"279","messageId":"280","endLine":2,"endColumn":48},{"ruleId":"277","severity":1,"message":"323","line":3,"column":10,"nodeType":"279","messageId":"280","endLine":3,"endColumn":14},{"ruleId":"277","severity":1,"message":"324","line":11,"column":12,"nodeType":"279","messageId":"280","endLine":11,"endColumn":20},{"ruleId":"277","severity":1,"message":"325","line":11,"column":21,"nodeType":"279","messageId":"280","endLine":11,"endColumn":32},{"ruleId":"277","severity":1,"message":"326","line":12,"column":12,"nodeType":"279","messageId":"280","endLine":12,"endColumn":16},{"ruleId":"277","severity":1,"message":"327","line":12,"column":17,"nodeType":"279","messageId":"280","endLine":12,"endColumn":24},{"ruleId":"285","severity":1,"message":"328","line":15,"column":7,"nodeType":"287","endLine":15,"endColumn":9,"suggestions":"329"},{"ruleId":"285","severity":1,"message":"330","line":33,"column":7,"nodeType":"287","endLine":33,"endColumn":15,"suggestions":"331"},{"ruleId":"277","severity":1,"message":"332","line":56,"column":15,"nodeType":"279","messageId":"280","endLine":56,"endColumn":19},{"ruleId":"281","severity":1,"message":"282","line":98,"column":25,"nodeType":"283","messageId":"284","endLine":98,"endColumn":27},{"ruleId":"277","severity":1,"message":"318","line":1,"column":17,"nodeType":"279","messageId":"280","endLine":1,"endColumn":26},{"ruleId":"277","severity":1,"message":"319","line":1,"column":36,"nodeType":"279","messageId":"280","endLine":1,"endColumn":46},{"ruleId":"285","severity":1,"message":"333","line":47,"column":7,"nodeType":"287","endLine":47,"endColumn":13,"suggestions":"334"},{"ruleId":"281","severity":1,"message":"282","line":106,"column":36,"nodeType":"283","messageId":"284","endLine":106,"endColumn":38},{"ruleId":"281","severity":1,"message":"282","line":109,"column":36,"nodeType":"283","messageId":"284","endLine":109,"endColumn":38},{"ruleId":"281","severity":1,"message":"282","line":112,"column":36,"nodeType":"283","messageId":"284","endLine":112,"endColumn":38},{"ruleId":"281","severity":1,"message":"282","line":115,"column":36,"nodeType":"283","messageId":"284","endLine":115,"endColumn":38},{"ruleId":"281","severity":1,"message":"282","line":118,"column":36,"nodeType":"283","messageId":"284","endLine":118,"endColumn":38},{"ruleId":"281","severity":1,"message":"282","line":121,"column":36,"nodeType":"283","messageId":"284","endLine":121,"endColumn":38},{"ruleId":"281","severity":1,"message":"282","line":124,"column":36,"nodeType":"283","messageId":"284","endLine":124,"endColumn":38},{"ruleId":"277","severity":1,"message":"295","line":1,"column":17,"nodeType":"279","messageId":"280","endLine":1,"endColumn":27},{"ruleId":"277","severity":1,"message":"335","line":1,"column":29,"nodeType":"279","messageId":"280","endLine":1,"endColumn":35},{"ruleId":"277","severity":1,"message":"296","line":1,"column":56,"nodeType":"279","messageId":"280","endLine":1,"endColumn":75},{"ruleId":"277","severity":1,"message":"336","line":4,"column":8,"nodeType":"279","messageId":"280","endLine":4,"endColumn":16},{"ruleId":"277","severity":1,"message":"337","line":5,"column":8,"nodeType":"279","messageId":"280","endLine":5,"endColumn":16},{"ruleId":"277","severity":1,"message":"338","line":6,"column":8,"nodeType":"279","messageId":"280","endLine":6,"endColumn":22},{"ruleId":"277","severity":1,"message":"339","line":7,"column":8,"nodeType":"279","messageId":"280","endLine":7,"endColumn":24},{"ruleId":"285","severity":1,"message":"333","line":51,"column":7,"nodeType":"287","endLine":51,"endColumn":13,"suggestions":"340"},{"ruleId":"281","severity":1,"message":"282","line":111,"column":36,"nodeType":"283","messageId":"284","endLine":111,"endColumn":38},{"ruleId":"281","severity":1,"message":"282","line":114,"column":36,"nodeType":"283","messageId":"284","endLine":114,"endColumn":38},{"ruleId":"281","severity":1,"message":"282","line":117,"column":36,"nodeType":"283","messageId":"284","endLine":117,"endColumn":38},{"ruleId":"281","severity":1,"message":"282","line":120,"column":36,"nodeType":"283","messageId":"284","endLine":120,"endColumn":38},{"ruleId":"281","severity":1,"message":"282","line":123,"column":36,"nodeType":"283","messageId":"284","endLine":123,"endColumn":38},{"ruleId":"281","severity":1,"message":"282","line":126,"column":36,"nodeType":"283","messageId":"284","endLine":126,"endColumn":38},{"ruleId":"281","severity":1,"message":"282","line":129,"column":36,"nodeType":"283","messageId":"284","endLine":129,"endColumn":38},{"ruleId":"277","severity":1,"message":"341","line":7,"column":8,"nodeType":"279","messageId":"280","endLine":7,"endColumn":18},{"ruleId":"277","severity":1,"message":"342","line":8,"column":8,"nodeType":"279","messageId":"280","endLine":8,"endColumn":12},{"ruleId":"277","severity":1,"message":"343","line":14,"column":12,"nodeType":"279","messageId":"280","endLine":14,"endColumn":17},{"ruleId":"277","severity":1,"message":"344","line":15,"column":12,"nodeType":"279","messageId":"280","endLine":15,"endColumn":16},{"ruleId":"285","severity":1,"message":"330","line":20,"column":7,"nodeType":"287","endLine":20,"endColumn":9,"suggestions":"345"},{"ruleId":"285","severity":1,"message":"346","line":39,"column":7,"nodeType":"287","endLine":39,"endColumn":15,"suggestions":"347"},{"ruleId":"285","severity":1,"message":"348","line":44,"column":7,"nodeType":"287","endLine":44,"endColumn":19,"suggestions":"349"},{"ruleId":"281","severity":1,"message":"282","line":138,"column":32,"nodeType":"283","messageId":"284","endLine":138,"endColumn":34},{"ruleId":"281","severity":1,"message":"282","line":141,"column":32,"nodeType":"283","messageId":"284","endLine":141,"endColumn":34},{"ruleId":"281","severity":1,"message":"282","line":144,"column":32,"nodeType":"283","messageId":"284","endLine":144,"endColumn":34},{"ruleId":"281","severity":1,"message":"282","line":147,"column":32,"nodeType":"283","messageId":"284","endLine":147,"endColumn":34},{"ruleId":"281","severity":1,"message":"282","line":150,"column":32,"nodeType":"283","messageId":"284","endLine":150,"endColumn":34},{"ruleId":"281","severity":1,"message":"282","line":153,"column":32,"nodeType":"283","messageId":"284","endLine":153,"endColumn":34},{"ruleId":"281","severity":1,"message":"282","line":156,"column":32,"nodeType":"283","messageId":"284","endLine":156,"endColumn":34},{"ruleId":"277","severity":1,"message":"318","line":1,"column":17,"nodeType":"279","messageId":"280","endLine":1,"endColumn":26},{"ruleId":"277","severity":1,"message":"350","line":1,"column":27,"nodeType":"279","messageId":"280","endLine":1,"endColumn":35},{"ruleId":"277","severity":1,"message":"351","line":3,"column":10,"nodeType":"279","messageId":"280","endLine":3,"endColumn":20},"no-native-reassign",["352"],"no-negated-in-lhs",["353"],"no-unused-vars","'useParams' is defined but never used.","Identifier","unusedVar","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'props'. Either include it or remove the dependency array. However, 'props' will change when *any* prop changes, so the preferred fix is to destructure the 'props' object outside of the useEffect call and refer to those specific props inside useEffect.","ArrayExpression",["354"],"React Hook useEffect has missing dependencies: 'props.creationFlag' and 'props.id'. Either include them or remove the dependency array. If 'setDataset' needs the current value of 'props.id', you can also switch to useReducer instead of useState and read 'props.id' in the reducer.",["355"],["356"],"React Hook useEffect has missing dependencies: 'props.creationFlag', 'props.id', and 'props.nodes'. Either include them or remove the dependency array. If 'setPath' needs the current value of 'props.nodes', you can also switch to useReducer instead of useState and read 'props.nodes' in the reducer.",["357"],"'SelectInput' is defined but never used.","'forwardRef' is defined but never used.","'useImperativeHandle' is defined but never used.","'useCallback' is defined but never used.","React Hook useEffect has a missing dependency: 'props.creationFlag'. Either include it or remove the dependency array.",["358"],"React Hook useEffect has missing dependencies: 'props.creationFlag' and 'props.id'. Either include them or remove the dependency array. If 'setInput' needs the current value of 'props.id', you can also switch to useReducer instead of useState and read 'props.id' in the reducer.",["359"],["360"],"React Hook useEffect has missing dependencies: 'props.creationFlag', 'props.id', and 'props.nodes'. Either include them or remove the dependency array. If 'setIndex' needs the current value of 'props.nodes', you can also switch to useReducer instead of useState and read 'props.nodes' in the reducer.",["361"],["362"],["363"],["364"],["365"],["366"],"React Hook useEffect has missing dependencies: 'props.creationFlag' and 'props.id'. Either include them or remove the dependency array. If 'setIndex' needs the current value of 'props.id', you can also switch to useReducer instead of useState and read 'props.id' in the reducer.",["367"],"'setCookies' is assigned a value but never used.","jsx-a11y/anchor-is-valid","The href attribute is required for an anchor to be keyboard accessible. Provide a valid, navigable address as the href value. If you cannot provide an href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","JSXOpeningElement","'cookies' is assigned a value but never used.","'removeCookies' is assigned a value but never used.","'useEffect' is defined but never used.","'useReducer' is defined but never used.","'Router' is defined but never used.","'Switch' is defined but never used.","'Route' is defined but never used.","'Link' is defined but never used.","'flowJson' is assigned a value but never used.","'setFlowJson' is assigned a value but never used.","'flow' is assigned a value but never used.","'setFlow' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'getUser'. Either include it or remove the dependency array.",["368"],"React Hook useEffect has a missing dependency: 'getTeam'. Either include it or remove the dependency array.",["369"],"'data' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'createFlowVersion' and 'isMount'. Either include them or remove the dependency array.",["370"],"'useRef' is defined but never used.","'TreeView' is defined but never used.","'TreeItem' is defined but never used.","'ExpandMoreIcon' is defined but never used.","'ChevronRightIcon' is defined but never used.",["371"],"'FlowCreate' is defined but never used.","'Flow' is defined but never used.","'drugi' is assigned a value but never used.","'team' is assigned a value but never used.",["372"],"React Hook useEffect has a missing dependency: 'getFlowTree'. Either include it or remove the dependency array.",["373"],"React Hook useEffect has missing dependencies: 'flowJson', 'nodes', and 'updateFlowVersion'. Either include them or remove the dependency array. You can also do a functional update 'setFlowJson(f => ...)' if you only need 'flowJson' in the 'setFlowJson' call.",["374"],"'useState' is defined but never used.","'useCookies' is defined but never used.","no-global-assign","no-unsafe-negation",{"desc":"375","fix":"376"},{"desc":"377","fix":"378"},{"desc":"375","fix":"379"},{"desc":"380","fix":"381"},{"desc":"382","fix":"383"},{"desc":"377","fix":"384"},{"desc":"375","fix":"385"},{"desc":"377","fix":"386"},{"desc":"375","fix":"387"},{"desc":"377","fix":"388"},{"desc":"382","fix":"389"},{"desc":"377","fix":"390"},{"desc":"375","fix":"391"},{"desc":"377","fix":"392"},{"desc":"393","fix":"394"},{"desc":"395","fix":"396"},{"desc":"397","fix":"398"},{"desc":"397","fix":"399"},{"desc":"400","fix":"401"},{"desc":"402","fix":"403"},{"desc":"404","fix":"405"},"Update the dependencies array to be: [props]",{"range":"406","text":"407"},"Update the dependencies array to be: [props.creationFlag, props.id, props.nodes]",{"range":"408","text":"409"},{"range":"410","text":"407"},"Update the dependencies array to be: [props.creationFlag, props.id, props.node, props.nodes]",{"range":"411","text":"412"},"Update the dependencies array to be: [props.creationFlag]",{"range":"413","text":"414"},{"range":"415","text":"409"},{"range":"416","text":"407"},{"range":"417","text":"409"},{"range":"418","text":"407"},{"range":"419","text":"409"},{"range":"420","text":"414"},{"range":"421","text":"409"},{"range":"422","text":"407"},{"range":"423","text":"409"},"Update the dependencies array to be: [getUser]",{"range":"424","text":"425"},"Update the dependencies array to be: [getTeam, teamid]",{"range":"426","text":"427"},"Update the dependencies array to be: [createFlowVersion, flow, isMount]",{"range":"428","text":"429"},{"range":"430","text":"429"},"Update the dependencies array to be: [getTeam]",{"range":"431","text":"432"},"Update the dependencies array to be: [getFlowTree, rootid]",{"range":"433","text":"434"},"Update the dependencies array to be: [flowJson, nodes, updateFlag, updateFlowVersion]",{"range":"435","text":"436"},[954,956],"[props]",[1233,1246],"[props.creationFlag, props.id, props.nodes]",[1481,1483],[2341,2353],"[props.creationFlag, props.id, props.node, props.nodes]",[616,618],"[props.creationFlag]",[827,840],[763,765],[1034,1036],[762,764],[1036,1049],[499,501],[713,726],[736,738],[1009,1022],[438,440],"[getUser]",[1016,1024],"[getTeam, teamid]",[1407,1413],"[createFlowVersion, flow, isMount]",[1642,1648],[586,588],"[getTeam]",[1362,1370],"[getFlowTree, rootid]",[1487,1499],"[flowJson, nodes, updateFlag, updateFlowVersion]"]