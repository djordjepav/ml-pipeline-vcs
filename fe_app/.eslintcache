[{"D:\\Podaci\\7. sem\\Arhitektura i projektovanje softvera\\ml-pipeline-vcs\\fe_app\\src\\index.js":"1","D:\\Podaci\\7. sem\\Arhitektura i projektovanje softvera\\ml-pipeline-vcs\\fe_app\\src\\reportWebVitals.js":"2","D:\\Podaci\\7. sem\\Arhitektura i projektovanje softvera\\ml-pipeline-vcs\\fe_app\\src\\App.js":"3","D:\\Podaci\\7. sem\\Arhitektura i projektovanje softvera\\ml-pipeline-vcs\\fe_app\\src\\Nodes\\DatasetLoader.jsx":"4","D:\\Podaci\\7. sem\\Arhitektura i projektovanje softvera\\ml-pipeline-vcs\\fe_app\\src\\Nodes\\ModelLoader.jsx":"5","D:\\Podaci\\7. sem\\Arhitektura i projektovanje softvera\\ml-pipeline-vcs\\fe_app\\src\\Nodes\\DataNormalizer.jsx":"6","D:\\Podaci\\7. sem\\Arhitektura i projektovanje softvera\\ml-pipeline-vcs\\fe_app\\src\\Nodes\\DataPlotter.jsx":"7","D:\\Podaci\\7. sem\\Arhitektura i projektovanje softvera\\ml-pipeline-vcs\\fe_app\\src\\Nodes\\ModelEvaluator.jsx":"8","D:\\Podaci\\7. sem\\Arhitektura i projektovanje softvera\\ml-pipeline-vcs\\fe_app\\src\\Nodes\\DataStandardizer.jsx":"9","D:\\Podaci\\7. sem\\Arhitektura i projektovanje softvera\\ml-pipeline-vcs\\fe_app\\src\\Nodes\\ModelPredictor.jsx":"10","D:\\Podaci\\7. sem\\Arhitektura i projektovanje softvera\\ml-pipeline-vcs\\fe_app\\src\\Main\\Main.jsx":"11","D:\\Podaci\\7. sem\\Arhitektura i projektovanje softvera\\ml-pipeline-vcs\\fe_app\\src\\Main\\Header.jsx":"12","D:\\Podaci\\7. sem\\Arhitektura i projektovanje softvera\\ml-pipeline-vcs\\fe_app\\src\\Home\\About.jsx":"13","D:\\Podaci\\7. sem\\Arhitektura i projektovanje softvera\\ml-pipeline-vcs\\fe_app\\src\\Home\\Home.jsx":"14","D:\\Podaci\\7. sem\\Arhitektura i projektovanje softvera\\ml-pipeline-vcs\\fe_app\\src\\Home\\LogIn.js":"15","D:\\Podaci\\7. sem\\Arhitektura i projektovanje softvera\\ml-pipeline-vcs\\fe_app\\src\\Home\\SignUp.js":"16","D:\\Podaci\\7. sem\\Arhitektura i projektovanje softvera\\ml-pipeline-vcs\\fe_app\\src\\UserStart\\UserProfil.jsx":"17","D:\\Podaci\\7. sem\\Arhitektura i projektovanje softvera\\ml-pipeline-vcs\\fe_app\\src\\UserStart\\Start.js":"18","D:\\Podaci\\7. sem\\Arhitektura i projektovanje softvera\\ml-pipeline-vcs\\fe_app\\src\\UserStart\\Team.jsx":"19","D:\\Podaci\\7. sem\\Arhitektura i projektovanje softvera\\ml-pipeline-vcs\\fe_app\\src\\UserStart\\TeamCreate.jsx":"20","D:\\Podaci\\7. sem\\Arhitektura i projektovanje softvera\\ml-pipeline-vcs\\fe_app\\src\\Flow\\FlowCreate.jsx":"21","D:\\Podaci\\7. sem\\Arhitektura i projektovanje softvera\\ml-pipeline-vcs\\fe_app\\src\\Flow\\FlowVersionCreate.jsx":"22","D:\\Podaci\\7. sem\\Arhitektura i projektovanje softvera\\ml-pipeline-vcs\\fe_app\\src\\Flow\\FlowContainer.jsx":"23","D:\\Podaci\\7. sem\\Arhitektura i projektovanje softvera\\ml-pipeline-vcs\\fe_app\\src\\Flow\\Flow.jsx":"24","D:\\Podaci\\7. sem\\Arhitektura i projektovanje softvera\\ml-pipeline-vcs\\fe_app\\src\\Flow\\ExeWindow.jsx":"25"},{"size":500,"mtime":499162500000,"results":"26","hashOfConfig":"27"},{"size":362,"mtime":499162500000,"results":"28","hashOfConfig":"27"},{"size":2204,"mtime":1619470081058,"results":"29","hashOfConfig":"27"},{"size":11596,"mtime":1619534839820,"results":"30","hashOfConfig":"27"},{"size":20264,"mtime":1619535465330,"results":"31","hashOfConfig":"27"},{"size":10770,"mtime":1619380301389,"results":"32","hashOfConfig":"27"},{"size":11765,"mtime":1619367429218,"results":"33","hashOfConfig":"27"},{"size":10611,"mtime":1619367566713,"results":"34","hashOfConfig":"27"},{"size":9073,"mtime":1619367506598,"results":"35","hashOfConfig":"27"},{"size":11646,"mtime":1619381080899,"results":"36","hashOfConfig":"27"},{"size":257,"mtime":1619115102024,"results":"37","hashOfConfig":"27"},{"size":2198,"mtime":1619524976381,"results":"38","hashOfConfig":"27"},{"size":407,"mtime":1619123690388,"results":"39","hashOfConfig":"27"},{"size":1274,"mtime":1619123711814,"results":"40","hashOfConfig":"27"},{"size":2572,"mtime":1618942512169,"results":"41","hashOfConfig":"27"},{"size":2164,"mtime":1618942510307,"results":"42","hashOfConfig":"27"},{"size":1832,"mtime":1619445119594,"results":"43","hashOfConfig":"27"},{"size":2329,"mtime":1619455417784,"results":"44","hashOfConfig":"27"},{"size":4795,"mtime":1619523581063,"results":"45","hashOfConfig":"27"},{"size":1471,"mtime":1618942576768,"results":"46","hashOfConfig":"27"},{"size":5325,"mtime":1619380222937,"results":"47","hashOfConfig":"27"},{"size":5433,"mtime":1619377973310,"results":"48","hashOfConfig":"27"},{"size":1906,"mtime":1619470084697,"results":"49","hashOfConfig":"27"},{"size":7896,"mtime":1619528043304,"results":"50","hashOfConfig":"27"},{"size":5970,"mtime":1619534793435,"results":"51","hashOfConfig":"27"},{"filePath":"52","messages":"53","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},"wp5s2w",{"filePath":"55","messages":"56","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"57","messages":"58","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"59","messages":"60","errorCount":0,"warningCount":13,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"61","messages":"62","errorCount":0,"warningCount":13,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"63","messages":"64","errorCount":0,"warningCount":16,"fixableErrorCount":0,"fixableWarningCount":0,"source":"65","usedDeprecatedRules":"54"},{"filePath":"66","messages":"67","errorCount":0,"warningCount":13,"fixableErrorCount":0,"fixableWarningCount":0,"source":"68","usedDeprecatedRules":"54"},{"filePath":"69","messages":"70","errorCount":0,"warningCount":12,"fixableErrorCount":0,"fixableWarningCount":0,"source":"71","usedDeprecatedRules":"54"},{"filePath":"72","messages":"73","errorCount":0,"warningCount":12,"fixableErrorCount":0,"fixableWarningCount":0,"source":"74","usedDeprecatedRules":"54"},{"filePath":"75","messages":"76","errorCount":0,"warningCount":13,"fixableErrorCount":0,"fixableWarningCount":0,"source":"77","usedDeprecatedRules":"54"},{"filePath":"78","messages":"79","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"80","messages":"81","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"82","usedDeprecatedRules":"54"},{"filePath":"83","messages":"84","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"85","messages":"86","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"87","usedDeprecatedRules":"54"},{"filePath":"88","messages":"89","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"90","usedDeprecatedRules":"54"},{"filePath":"91","messages":"92","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"93","usedDeprecatedRules":"54"},{"filePath":"94","messages":"95","errorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"96","usedDeprecatedRules":"54"},{"filePath":"97","messages":"98","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"99","usedDeprecatedRules":"54"},{"filePath":"100","messages":"101","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"102","usedDeprecatedRules":"54"},{"filePath":"103","messages":"104","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"105","usedDeprecatedRules":"54"},{"filePath":"106","messages":"107","errorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"108","usedDeprecatedRules":"54"},{"filePath":"109","messages":"110","errorCount":0,"warningCount":15,"fixableErrorCount":0,"fixableWarningCount":0,"source":"111","usedDeprecatedRules":"54"},{"filePath":"112","messages":"113","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"114","usedDeprecatedRules":"54"},{"filePath":"115","messages":"116","errorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":"117","usedDeprecatedRules":"54"},{"filePath":"118","messages":"119","errorCount":0,"warningCount":14,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"D:\\Podaci\\7. sem\\Arhitektura i projektovanje softvera\\ml-pipeline-vcs\\fe_app\\src\\index.js",[],["120","121"],"D:\\Podaci\\7. sem\\Arhitektura i projektovanje softvera\\ml-pipeline-vcs\\fe_app\\src\\reportWebVitals.js",[],"D:\\Podaci\\7. sem\\Arhitektura i projektovanje softvera\\ml-pipeline-vcs\\fe_app\\src\\App.js",[],"D:\\Podaci\\7. sem\\Arhitektura i projektovanje softvera\\ml-pipeline-vcs\\fe_app\\src\\Nodes\\DatasetLoader.jsx",["122","123","124","125","126","127","128","129","130","131","132","133","134"],"D:\\Podaci\\7. sem\\Arhitektura i projektovanje softvera\\ml-pipeline-vcs\\fe_app\\src\\Nodes\\ModelLoader.jsx",["135","136","137","138","139","140","141","142","143","144","145","146","147"],"D:\\Podaci\\7. sem\\Arhitektura i projektovanje softvera\\ml-pipeline-vcs\\fe_app\\src\\Nodes\\DataNormalizer.jsx",["148","149","150","151","152","153","154","155","156","157","158","159","160","161","162","163"],"import SelectInput from '@material-ui/core/Select/SelectInput';\r\nimport React, { forwardRef, useEffect, useState, useImperativeHandle, useCallback } from 'react';\r\nimport \"../Flow/Flow.css\";\r\n\r\nexport default function DataNormalizer(props) {\r\n\r\n\r\n    const [update, setUpdate] = useState(0);\r\n    const [details, setDetails] = useState(0);\r\n\r\n    const [input, setInput] = useState([]);\r\n    const [output, setOutput] = useState([]);\r\n\r\n\r\n    useEffect(() => {\r\n        if (props.creationFlag == true) {\r\n            setUpdate(true);\r\n\r\n            //mesto za dodavanje parametara, ovde ih nema\r\n        }\r\n\r\n    }, []);\r\n\r\n    useEffect(() => {\r\n\r\n        if (props.creationFlag == false) {\r\n            setInput(props.nodes[props.id].input_keys);\r\n            setOutput(props.nodes[props.id].output_keys);\r\n        }\r\n    }, [props.nodes]);\r\n\r\n\r\n    const onChange = () => {\r\n\r\n        setUpdate(!update);\r\n\r\n        if (update) {\r\n            \r\n            let nodes = [...props.nodes];\r\n            nodes[props.id].input_keys = input;\r\n            nodes[props.id].output_keys = output;\r\n\r\n            props.setNodes(nodes);\r\n\r\n            props.setUpdateFlag(1);\r\n        }\r\n    }\r\n\r\n    // const deleteNode = () => {\r\n    //     let nodes = [...props.nodes];\r\n    //     nodes.splice(props.id,1);\r\n    //     props.setNodes(nodes);\r\n    // }\r\n\r\n\r\n    const addInput = () => {\r\n\r\n        let temp = [...input];\r\n        temp.push(\"null\");\r\n        setInput(temp);\r\n\r\n        if (props.creationFlag) {\r\n\r\n            let nodes = [...props.nodes];\r\n            nodes[props.id].input_keys = temp;\r\n            props.setNodes(nodes);\r\n        }\r\n\r\n    }\r\n\r\n    const removeInput = (index) => {\r\n        var temp = [...input];\r\n        temp.splice(index, 1);\r\n        setInput(temp);\r\n\r\n        if (props.creationFlag) {\r\n\r\n            let nodes = [...props.nodes];\r\n            nodes[props.id].input_keys = temp;\r\n            props.setNodes(nodes);\r\n        }\r\n    }\r\n\r\n    const changeInput = (index, e) => {\r\n        var temp = [...input];\r\n        temp[index] = e.target.value;\r\n        setInput(temp);\r\n\r\n\r\n        if (props.creationFlag) {\r\n\r\n            let nodes = [...props.nodes];\r\n            nodes[props.id].input_keys = temp;\r\n            props.setNodes(nodes);\r\n        }\r\n    }\r\n\r\n    const addOutput = () => {\r\n\r\n        let temp = [...output];\r\n        temp.push(\"null\");\r\n        setOutput(temp);\r\n\r\n        if (props.creationFlag) {\r\n\r\n            let nodes = [...props.nodes];\r\n            nodes[props.id].output_keys = temp;\r\n            props.setNodes(nodes);\r\n        }\r\n    }\r\n\r\n    const removeOutput = (index) => {\r\n        var temp = [...output];\r\n        temp.splice(index, 1);\r\n        setOutput(temp);\r\n\r\n        if (props.creationFlag) {\r\n\r\n            let nodes = [...props.nodes];\r\n            nodes[props.id].output_keys = temp;\r\n            props.setNodes(nodes);\r\n        }\r\n    }\r\n\r\n    const changeOutput = (index, e) => {\r\n        var temp = [...output];\r\n        temp[index] = e.target.value;\r\n        setOutput(temp);\r\n\r\n        if (props.creationFlag) {\r\n\r\n            let nodes = [...props.nodes];\r\n            nodes[props.id].output_keys = temp;\r\n            props.setNodes(nodes);\r\n        }\r\n    }\r\n\r\n\r\n    return (\r\n        <div className=\"node\">\r\n            {details == 0 && <br />}\r\n            <span onClick={() => setDetails(!details)}><b>DataNormalizer</b></span>\r\n            {/* {props.creationFlag &&\r\n            <button onClick={() => deleteNode()}>-</button>} */}\r\n            {details == 1 &&\r\n                <div>\r\n                    <hr></hr>\r\n                    {update ?\r\n\r\n                        //Ako treba da se rade promene (update flag je postavljen na 1)\r\n                        <>\r\n                            <table className=\"NodeTable\">\r\n                                <thead>\r\n                                    <tr>\r\n                                        <th>\r\n                                            Input keys:\r\n                                        <button onClick={() => addInput()}>+</button>\r\n                                        </th>\r\n\r\n                                    </tr>\r\n                                </thead>\r\n                                {input.length == 0 ?\r\n                                    <tbody>\r\n                                        <tr>\r\n                                            <td>\r\n                                                null\r\n                                        </td>\r\n                                        </tr>\r\n                                    </tbody>\r\n                                    :\r\n                                    <>\r\n                                        {input.map((item, index) => (\r\n                                            <tbody key={index}>\r\n                                                <tr>\r\n                                                    <td>\r\n                                                        <input className=\"inputNode\" type=\"text\" value={item} onChange={(e) => changeInput(index, e)} />\r\n                                                        <button onClick={() => removeInput(index)}>-</button>\r\n                                                    </td>\r\n                                                </tr>\r\n                                            </tbody>\r\n                                        ))}\r\n                                    </>}\r\n                            </table>\r\n                            <table className=\"NodeTable\">\r\n                                <thead>\r\n                                    <tr>\r\n                                        <th>\r\n                                            Output keys:\r\n                                        <button onClick={() => addOutput()}>+</button>\r\n                                        </th>\r\n                                    </tr>\r\n                                </thead>\r\n                                {output.length == 0 ?\r\n                                    <tbody>\r\n                                        <tr>\r\n                                            <td>\r\n                                                null\r\n                                        </td>\r\n                                        </tr>\r\n                                    </tbody>\r\n                                    :\r\n                                    <>\r\n                                        {output.map((item, index) => (\r\n                                            <tbody key={index}>\r\n                                                <tr>\r\n                                                    <td>\r\n                                                        <input className=\"inputNode\" type=\"text\" value={item} onChange={(e) => changeOutput(index, e)} />\r\n                                                        <button onClick={() => removeOutput(index)}>-</button>\r\n                                                    </td>\r\n                                                </tr>\r\n                                            </tbody>\r\n                                        ))}\r\n                                    </>}\r\n                            </table>\r\n                        </>\r\n                        :\r\n\r\n                        //Ako je update flag 0, radi se samo prikaz\r\n                        <>\r\n                            <table className=\"NodeTable\">\r\n                                <thead>\r\n                                    <tr>\r\n                                        <th>\r\n                                            Input keys:\r\n                                    </th>\r\n\r\n                                    </tr>\r\n                                </thead>\r\n                                {input.length == 0 ?\r\n                                    <tbody>\r\n                                        <tr>\r\n                                            <td>\r\n                                                null\r\n                                   </td>\r\n                                        </tr>\r\n                                    </tbody>\r\n                                    :\r\n                                    <>\r\n                                        {input.map((item, index) => (\r\n                                            <tbody key={index}>\r\n                                                <tr>\r\n                                                    <td>\r\n                                                        {item}\r\n                                                    </td>\r\n                                                </tr>\r\n                                            </tbody>\r\n                                        ))}\r\n                                    </>}\r\n                            </table>\r\n                            <table className=\"NodeTable\">\r\n                                <thead>\r\n                                    <tr>\r\n                                        <th>\r\n                                            Output keys:\r\n                                    </th>\r\n                                    </tr>\r\n                                </thead>\r\n                                {output.length == 0 ?\r\n                                    <tbodu>\r\n                                        <tr>\r\n                                            <td>\r\n                                                null\r\n                                        </td>\r\n                                        </tr>\r\n                                    </tbodu>\r\n                                    :\r\n                                    <>\r\n                                        {output.map((item, index) => (\r\n                                            <tbody key={index}>\r\n                                                <tr>\r\n                                                    <td>\r\n                                                        {item}\r\n                                                    </td>\r\n                                                </tr>\r\n                                            </tbody>\r\n                                        ))}\r\n                                    </>}\r\n                            </table>\r\n                        </>\r\n                    }\r\n                    <br />\r\n                    {props.creationFlag == false ?\r\n                        <div>\r\n                            <button onClick={() => onChange()}>{update == 1 ? 'Submit' : 'Update'}</button>\r\n                        </div>\r\n                        :\r\n                        <div>\r\n                        </div>\r\n                    }\r\n\r\n                </div>\r\n            }\r\n        </div>\r\n    )\r\n}","D:\\Podaci\\7. sem\\Arhitektura i projektovanje softvera\\ml-pipeline-vcs\\fe_app\\src\\Nodes\\DataPlotter.jsx",["164","165","166","167","168","169","170","171","172","173","174","175","176"],"import React, { useEffect, useState } from 'react';\r\nimport \"../Flow/Flow.css\";\r\n\r\nexport default function DataPlotter(props) {\r\n\r\n    const [details, setDetails] = useState(0);\r\n    const [update, setUpdate] = useState(0);\r\n\r\n    const [index, setIndex] = useState(\"\");\r\n\r\n    const [input, setInput] = useState([]);\r\n    const [output, setOutput] = useState([]);\r\n\r\n\r\n    useEffect(() => {\r\n        if (props.creationFlag == true) {\r\n            setUpdate(true);\r\n\r\n            //mesto za dodavanje parametara\r\n\r\n            let nodes = [...props.nodes];\r\n\r\n            nodes[props.id].available_params = [\"index\"];\r\n            nodes[props.id].params = {\r\n                \"index\": null\r\n            }\r\n\r\n            props.setNodes(nodes);\r\n\r\n        }\r\n    }, []);\r\n\r\n    useEffect(() => {\r\n        if (props.creationFlag == false) {\r\n            setIndex(props.nodes[props.id].params[\"index\"]);\r\n            setInput(props.nodes[props.id].input_keys);\r\n            setOutput(props.nodes[props.id].output_keys);\r\n        }\r\n    }, []);\r\n\r\n\r\n\r\n    const onChange = () => {\r\n\r\n        setUpdate(!update);\r\n\r\n        if (update) {\r\n\r\n            let nodes = [...props.nodes];\r\n            nodes[props.id].input_keys = input;\r\n            nodes[props.id].output_keys = output;\r\n            nodes[props.id].params[\"index\"] = index;\r\n\r\n            props.setNodes(nodes);\r\n\r\n            props.setUpdateFlag(1);\r\n        }\r\n    }\r\n\r\n\r\n\r\n    const addInput = () => {\r\n\r\n        let temp = [...input];\r\n        temp.push(\"null\");\r\n        setInput(temp);\r\n\r\n        if (props.creationFlag) {\r\n\r\n            let nodes = [...props.nodes];\r\n            nodes[props.id].input_keys = temp;\r\n            props.setNodes(nodes);\r\n        }\r\n\r\n    }\r\n    const removeInput = (index) => {\r\n        var temp = [...input];\r\n        temp.splice(index, 1);\r\n        setInput(temp);\r\n\r\n        if (props.creationFlag) {\r\n\r\n            let nodes = [...props.nodes];\r\n            nodes[props.id].input_keys = temp;\r\n            props.setNodes(nodes);\r\n        }\r\n    }\r\n\r\n    const changeInput = (index, e) => {\r\n        var temp = [...input];\r\n        temp[index] = e.target.value;\r\n        setInput(temp);\r\n\r\n\r\n        if (props.creationFlag) {\r\n\r\n            let nodes = [...props.nodes];\r\n            nodes[props.id].input_keys = temp;\r\n            props.setNodes(nodes);\r\n        }\r\n    }\r\n\r\n    const addOutput = () => {\r\n\r\n        let temp = [...output];\r\n        temp.push(\"null\");\r\n        setOutput(temp);\r\n\r\n        if (props.creationFlag) {\r\n\r\n            let nodes = [...props.nodes];\r\n            nodes[props.id].output_keys = temp;\r\n            props.setNodes(nodes);\r\n        }\r\n    }\r\n\r\n    const removeOutput = (index) => {\r\n        var temp = [...output];\r\n        temp.splice(index, 1);\r\n        setOutput(temp);\r\n\r\n        if (props.creationFlag) {\r\n\r\n            let nodes = [...props.nodes];\r\n            nodes[props.id].output_keys = temp;\r\n            props.setNodes(nodes);\r\n        }\r\n    }\r\n\r\n    const changeOutput = (index, e) => {\r\n        var temp = [...output];\r\n        temp[index] = e.target.value;\r\n        setOutput(temp);\r\n\r\n        if (props.creationFlag) {\r\n\r\n            let nodes = [...props.nodes];\r\n            nodes[props.id].output_keys = temp;\r\n            props.setNodes(nodes);\r\n        }\r\n    }\r\n\r\n    const changeIndex = (e) => {\r\n        setIndex(e.target.value);\r\n\r\n        if(props.creationFlag){\r\n            let nodes = [...props.nodes];\r\n            nodes[props.id].params[\"index\"] = e.target.value;\r\n            props.setNodes(nodes);\r\n        }\r\n       \r\n    }\r\n\r\n    return (\r\n        <div className=\"node\">\r\n            {details == 0 && <br />}\r\n            <span onClick={() => setDetails(!details)}><b>DataPlotter</b></span>\r\n            {details == 1 &&\r\n                <div>\r\n                    <hr></hr>\r\n                    {update == 1 ?\r\n                        <>\r\n                            <table className=\"NodeTable\">\r\n                                <thead>\r\n                                    <tr>\r\n                                        <th>\r\n                                            Input keys:\r\n                                        <button onClick={() => addInput()}>+</button>\r\n                                        </th>\r\n\r\n                                    </tr>\r\n                                </thead>\r\n                                {input.length == 0 ?\r\n                                    <tbody>\r\n                                        <tr>\r\n                                            <td>\r\n                                                null\r\n                                        </td>\r\n                                        </tr>\r\n                                    </tbody>\r\n                                    :\r\n                                    <>\r\n                                        {input.map((item, index) => (\r\n                                            <tbody key={index}>\r\n                                                <tr>\r\n                                                    <td>\r\n                                                        <input className=\"inputNode\" type=\"text\" value={item} onChange={(e) => changeInput(index, e)} />\r\n                                                        <button onClick={() => removeInput(index)}>-</button>\r\n                                                    </td>\r\n                                                </tr>\r\n                                            </tbody>\r\n                                        ))}\r\n                                    </>}\r\n                            </table>\r\n                            <table className=\"NodeTable\">\r\n                                <thead>\r\n                                    <tr>\r\n                                        <th>\r\n                                            Output keys:\r\n                                        <button onClick={() => addOutput()}>+</button>\r\n                                        </th>\r\n                                    </tr>\r\n                                </thead>\r\n                                {output.length == 0 ?\r\n                                    <tbody>\r\n                                        <tr>\r\n                                            <td>\r\n                                                null\r\n                                        </td>\r\n                                        </tr>\r\n                                    </tbody>\r\n                                    :\r\n                                    <>\r\n                                        {output.map((item, index) => (\r\n                                            <tbody key={index}>\r\n                                                <tr>\r\n                                                    <td>\r\n                                                        <input className=\"inputNode\" type=\"text\" value={item} onChange={(e) => changeOutput(index, e)} />\r\n                                                        <button onClick={() => removeOutput(index)}>-</button>\r\n                                                    </td>\r\n                                                </tr>\r\n                                            </tbody>\r\n                                        ))}\r\n                                    </>}\r\n                            </table>\r\n                            <table>\r\n                                <tbody>\r\n                                    <tr>\r\n                                        <th> Index: </th>\r\n                                        <td>\r\n                                            <input type=\"text\" value={index} onChange={(e) => changeIndex(e)} />\r\n                                        </td>\r\n                                    </tr>\r\n                                </tbody>\r\n                            </table>\r\n                        </>\r\n                        :\r\n                        <>\r\n                            <table className=\"NodeTable\">\r\n                                <thead>\r\n                                    <tr>\r\n                                        <th>\r\n                                            Input keys:\r\n                                    </th>\r\n\r\n                                    </tr>\r\n                                </thead>\r\n                                {input.length == 0 ?\r\n                                    <tbody>\r\n                                        <tr>\r\n                                            <td>\r\n                                                null\r\n                                   </td>\r\n                                        </tr>\r\n                                    </tbody>\r\n                                    :\r\n                                    <>\r\n                                        {input.map((item, index) => (\r\n                                            <tbody key={index}>\r\n                                                <tr>\r\n                                                    <td>\r\n                                                        {item}\r\n                                                    </td>\r\n                                                </tr>\r\n                                            </tbody>\r\n                                        ))}\r\n                                    </>}\r\n                            </table>\r\n                            <table className=\"NodeTable\">\r\n                                <thead>\r\n                                    <tr>\r\n                                        <th>\r\n                                            Output keys:\r\n                                    </th>\r\n                                    </tr>\r\n                                </thead>\r\n                                {output.length == 0 ?\r\n                                    <tbody>\r\n                                        <tr>\r\n                                            <td>\r\n                                                null\r\n                                        </td>\r\n                                        </tr>\r\n                                    </tbody>\r\n                                    :\r\n                                    <>\r\n                                        {output.map((item, index) => (\r\n                                            <tbody key={index}>\r\n                                                <tr>\r\n                                                    <td>\r\n                                                        {item}\r\n                                                    </td>\r\n                                                </tr>\r\n                                            </tbody>\r\n                                        ))}\r\n                                    </>}\r\n                            </table>\r\n                            <table className=\"NodeTable\">\r\n                                <tbody>\r\n                                    <tr>\r\n                                        <th> Index: </th>\r\n                                        <td> {index ? index : 'null'} </td>\r\n                                    </tr>\r\n                                </tbody>\r\n                            </table>\r\n                        </>\r\n                    }\r\n                    <br />\r\n                    {props.creationFlag == false ?\r\n                        <div>\r\n                            <button onClick={() => onChange()}>{update == 1 ? 'Submit' : 'Update'}</button>\r\n                        </div>\r\n                        :\r\n                        <div>\r\n                        </div>\r\n                    }\r\n\r\n                </div>\r\n            }\r\n        </div>\r\n    )\r\n}","D:\\Podaci\\7. sem\\Arhitektura i projektovanje softvera\\ml-pipeline-vcs\\fe_app\\src\\Nodes\\ModelEvaluator.jsx",["177","178","179","180","181","182","183","184","185","186","187","188"],"import React, { useEffect, useState } from 'react';\r\nimport \"../Flow/Flow.css\";\r\n\r\nexport default function ModelEvaluator(props) {\r\n\r\n    const [update, setUpdate] = useState(0);\r\n    const [details, setDetails] = useState(0);\r\n\r\n    const [index, setIndex] = useState(\"\");\r\n\r\n    const [input, setInput] = useState([]);\r\n    const [output, setOutput] = useState([]);\r\n\r\n    useEffect(() => {\r\n        if (props.creationFlag == true) {\r\n            setUpdate(true);\r\n\r\n            //mesto za dodavanje parametara\r\n\r\n            let nodes = [...props.nodes];\r\n\r\n            nodes[props.id].available_params = [\"index\"];\r\n            nodes[props.id].params = {\r\n                \"index\": null\r\n            }\r\n\r\n            props.setNodes(nodes);\r\n        }\r\n    }, []);\r\n\r\n\r\n    useEffect(() => {\r\n        if (props.creationFlag == false) {\r\n            setInput(props.nodes[props.id].input_keys);\r\n            setOutput(props.nodes[props.id]?.output_keys);\r\n            setIndex(props.nodes[props.id].params[\"index\"]);\r\n        }\r\n    }, [props.nodes]);\r\n\r\n\r\n    const onChange = () => {\r\n        setUpdate(!update);\r\n        if (update) {\r\n\r\n            let nodes = props.nodes;\r\n\r\n            nodes[props.id].input_keys = input;\r\n            nodes[props.id].output_keys = output;\r\n            nodes[props.id].params[\"index\"] = index;\r\n\r\n            props.setNodes(nodes);\r\n            props.setUpdateFlag(1)\r\n        }\r\n    }\r\n\r\n\r\n    const addInput = () => {\r\n        setInput(input => [...input, \"null\"]);\r\n    }\r\n\r\n    const removeInput = (index) => {\r\n        var temp = [...input];\r\n        temp.splice(index, 1);\r\n        setInput(temp);\r\n    }\r\n\r\n    const changeInput = (index, e) => {\r\n        var temp = [...input];\r\n        temp[index] = e.target.value;\r\n        setInput(temp);\r\n    }\r\n\r\n    const addOutput = () => {\r\n        setOutput(output => [...output, \"null\"]);\r\n    }\r\n\r\n    const removeOutput = (index) => {\r\n        var temp = [...output];\r\n        temp.splice(index, 1);\r\n        setOutput(temp);\r\n    }\r\n\r\n    const changeOutput = (index, e) => {\r\n        var temp = [...output];\r\n        temp[index] = e.target.value;\r\n        setOutput(temp);\r\n    }\r\n\r\n    const changeIndex = (e) => {\r\n        setIndex(e.target.value);\r\n\r\n        if (props.creationFlag) {\r\n            let nodes = [...props.nodes];\r\n            nodes[props.id].params[\"index\"] = e.target.value;\r\n            props.setNodes(nodes);\r\n        }\r\n\r\n    }\r\n\r\n    return (\r\n        <div className=\"node\">\r\n            {details == 0 && <br />}\r\n            <span onClick={() => setDetails(!details)}><b>ModelEvaluator</b></span>\r\n            {details == 1 &&\r\n                <div>\r\n                    <hr></hr>\r\n                    {update ?\r\n                        <>\r\n                            <table className=\"NodeTable\">\r\n                                <thead>\r\n                                    <tr>\r\n                                        <th>\r\n                                            Input keys:\r\n                                        <button onClick={() => addInput()}>+</button>\r\n                                        </th>\r\n\r\n                                    </tr>\r\n                                </thead>\r\n                                {input.length == 0 ?\r\n                                    <tbody>\r\n                                        <tr>\r\n                                            <td>\r\n                                                null\r\n                                        </td>\r\n                                        </tr>\r\n                                    </tbody>\r\n                                    :\r\n                                    <>\r\n                                        {input.map((item, index) => (\r\n                                            <tbody key={index}>\r\n                                                <tr>\r\n                                                    <td>\r\n                                                        <input className=\"inputNode\" type=\"text\" value={item} onChange={(e) => changeInput(index, e)} />\r\n                                                        <button onClick={() => removeInput(index)}>-</button>\r\n                                                    </td>\r\n                                                </tr>\r\n                                            </tbody>\r\n                                        ))}\r\n                                    </>}\r\n                            </table>\r\n                            <table className=\"NodeTable\">\r\n                                <thead>\r\n                                    <tr>\r\n                                        <th>\r\n                                            Output keys:\r\n                                        <button onClick={() => addOutput()}>+</button>\r\n                                        </th>\r\n                                    </tr>\r\n                                </thead>\r\n                                {output.length == 0 ?\r\n                                    <tbody>\r\n                                        <tr>\r\n                                            <td>\r\n                                                null\r\n                                        </td>\r\n                                        </tr>\r\n                                    </tbody>\r\n                                    :\r\n                                    <>\r\n                                        {output.map((item, index) => (\r\n                                            <tbody key={index}>\r\n                                                <tr>\r\n                                                    <td>\r\n                                                        <input className=\"inputNode\" type=\"text\" value={item} onChange={(e) => changeOutput(index, e)} />\r\n                                                        <button onClick={() => removeOutput(index)}>-</button>\r\n                                                    </td>\r\n                                                </tr>\r\n                                            </tbody>\r\n                                        ))}\r\n                                    </>}\r\n                            </table>\r\n                            <table>\r\n                                <tbody>\r\n                                    <tr>\r\n                                        <th> Index: </th>\r\n                                        <td>\r\n                                            <input type=\"text\" value={index} onChange={(e) => changeIndex(e)} />\r\n                                        </td>\r\n                                    </tr>\r\n                                </tbody>\r\n                            </table>\r\n                        </>\r\n                        :\r\n                        <>\r\n                            <table className=\"NodeTable\">\r\n                                <thead>\r\n                                    <tr>\r\n                                        <th>\r\n                                            Input keys:\r\n                                    </th>\r\n\r\n                                    </tr>\r\n                                </thead>\r\n                                {input.length == 0 ?\r\n                                    <tbody>\r\n                                        <tr>\r\n                                            <td>\r\n                                                null\r\n                                   </td>\r\n                                        </tr>\r\n                                    </tbody>\r\n                                    :\r\n                                    <>\r\n                                        {input.map((item, index) => (\r\n                                            <tbody key={index}>\r\n                                                <tr>\r\n                                                    <td>\r\n                                                        {item}\r\n                                                    </td>\r\n                                                </tr>\r\n                                            </tbody>\r\n                                        ))}\r\n                                    </>}\r\n                            </table>\r\n                            <table className=\"NodeTable\">\r\n                                <thead>\r\n                                    <tr>\r\n                                        <th>\r\n                                            Output keys:\r\n                                    </th>\r\n                                    </tr>\r\n                                </thead>\r\n                                {output.length == 0 ?\r\n                                    <tbody>\r\n                                        <tr>\r\n                                            <td>\r\n                                                null\r\n                                        </td>\r\n                                        </tr>\r\n                                    </tbody>\r\n                                    :\r\n                                    <>\r\n                                        {output.map((item, index) => (\r\n                                            <tbody key={index}>\r\n                                                <tr>\r\n                                                    <td>\r\n                                                        {item}\r\n                                                    </td>\r\n                                                </tr>\r\n                                            </tbody>\r\n                                        ))}\r\n                                    </>}\r\n                            </table>\r\n                            <table className=\"NodeTable\">\r\n                                <tbody>\r\n                                    <tr>\r\n                                        <th> Index: </th>\r\n                                        <td> {index ? index : 'null'} </td>\r\n                                    </tr>\r\n                                </tbody>\r\n                            </table>\r\n                        </>\r\n                    }\r\n                    <br />\r\n                    {props.creationFlag == false ?\r\n                        <div>\r\n                            <button onClick={() => onChange()}>{update == 1 ? 'Submit' : 'Update'}</button>\r\n                        </div>\r\n                        :\r\n                        <div>\r\n                        </div>\r\n                    }\r\n                </div>\r\n            }\r\n        </div>\r\n    )\r\n}","D:\\Podaci\\7. sem\\Arhitektura i projektovanje softvera\\ml-pipeline-vcs\\fe_app\\src\\Nodes\\DataStandardizer.jsx",["189","190","191","192","193","194","195","196","197","198","199","200"],"import React, { useEffect,useState } from 'react';\r\nimport \"../Flow/Flow.css\";\r\n\r\nexport default function DataStandardizer(props){\r\n\r\n    const [update,setUpdate] = useState(0);\r\n    const [details,setDetails] = useState(0);\r\n\r\n    const [input,setInput] = useState([]);\r\n    const [output,setOutput] = useState([]);\r\n\r\n\r\n    useEffect(() => {\r\n        if (props.creationFlag == true) {\r\n            setUpdate(true);\r\n\r\n            //mesto za dodavanje parametara, ovde ih nema\r\n        }\r\n\r\n    }, []);\r\n    \r\n\r\n    useEffect(() =>{\r\n        if (props.creationFlag == false) {\r\n            setInput(props.nodes[props.id].input_keys);\r\n            setOutput(props.nodes[props.id]?.output_keys);\r\n        }\r\n    },[props.nodes]);\r\n\r\n\r\n    const onChange = () =>\r\n    {\r\n        setUpdate(!update);\r\n        if(update){\r\n\r\n            let nodes = props.nodes;\r\n            \r\n            nodes[props.id].input_keys = input;\r\n            nodes[props.id].output_keys = output;\r\n\r\n            props.setNodes(nodes);\r\n            props.setUpdateFlag(1);\r\n        }\r\n    }\r\n\r\n\r\n    const addInput = () =>\r\n    {\r\n        setInput(input => [...input,\"null\"]);\r\n    }\r\n\r\n    const removeInput = (index) =>\r\n    {\r\n        var temp = [...input];\r\n        temp.splice(index,1);\r\n        setInput(temp);\r\n    }\r\n\r\n    const changeInput = (index,e) =>\r\n    {\r\n        var temp = [...input];\r\n        temp[index] = e.target.value;\r\n        setInput(temp);\r\n    }\r\n\r\n    const addOutput = () =>\r\n    {\r\n        setOutput(output => [...output,\"null\"]);\r\n    }\r\n\r\n    const removeOutput = (index) =>\r\n    {\r\n        var temp = [...output];\r\n        temp.splice(index,1);\r\n        setOutput(temp);\r\n    }\r\n\r\n    const changeOutput = (index,e) =>\r\n    {\r\n        var temp = [...output];\r\n        temp[index] = e.target.value;\r\n        setOutput(temp);\r\n    }\r\n\r\n\r\n\r\n    return(\r\n        <div className=\"node\">\r\n           {details == 0 && <br/>}\r\n            <span onClick={() => setDetails(!details)}><b>DataStandardizer</b></span>\r\n                {details == 1 &&\r\n                <div>\r\n                    <hr></hr>\r\n                    {update?\r\n                    <>\r\n                        <table className=\"NodeTable\">\r\n                                <thead>\r\n                                    <tr>\r\n                                        <th>\r\n                                            Input keys:\r\n                                        <button onClick={() => addInput()}>+</button>\r\n                                        </th>\r\n\r\n                                    </tr>\r\n                                </thead>\r\n                                {input.length == 0 ?\r\n                                    <tbody>\r\n                                        <tr>\r\n                                            <td>\r\n                                                null\r\n                                        </td>\r\n                                        </tr>\r\n                                    </tbody>\r\n                                    :\r\n                                    <>\r\n                                        {input.map((item, index) => (\r\n                                            <tbody key={index}>\r\n                                                <tr>\r\n                                                    <td>\r\n                                                        <input className=\"inputNode\" type=\"text\" value={item} onChange={(e) => changeInput(index, e)} />\r\n                                                        <button onClick={() => removeInput(index)}>-</button>\r\n                                                    </td>\r\n                                                </tr>\r\n                                            </tbody>\r\n                                        ))}\r\n                                    </>}\r\n                            </table>\r\n                            <table className=\"NodeTable\">\r\n                                <thead>\r\n                                    <tr>\r\n                                        <th>\r\n                                            Output keys:\r\n                                        <button onClick={() => addOutput()}>+</button>\r\n                                        </th>\r\n                                    </tr>\r\n                                </thead>\r\n                                {output.length == 0 ?\r\n                                    <tbody>\r\n                                        <tr>\r\n                                            <td>\r\n                                                null\r\n                                        </td>\r\n                                        </tr>\r\n                                    </tbody>\r\n                                    :\r\n                                    <>\r\n                                        {output.map((item, index) => (\r\n                                            <tbody key={index}>\r\n                                                <tr>\r\n                                                    <td>\r\n                                                        <input className=\"inputNode\" type=\"text\" value={item} onChange={(e) => changeOutput(index, e)} />\r\n                                                        <button onClick={() => removeOutput(index)}>-</button>\r\n                                                    </td>\r\n                                                </tr>\r\n                                            </tbody>\r\n                                        ))}\r\n                                    </>}\r\n                            </table>\r\n                    </>\r\n                    :\r\n                    <>\r\n                        <table className=\"NodeTable\">\r\n                                <thead>\r\n                                    <tr>\r\n                                        <th>\r\n                                            Input keys:\r\n                                    </th>\r\n\r\n                                    </tr>\r\n                                </thead>\r\n                                {input.length == 0 ?\r\n                                    <tbody>\r\n                                        <tr>\r\n                                            <td>\r\n                                                null\r\n                                   </td>\r\n                                        </tr>\r\n                                    </tbody>\r\n                                    :\r\n                                    <>\r\n                                        {input.map((item, index) => (\r\n                                            <tbody key={index}>\r\n                                                <tr>\r\n                                                    <td>\r\n                                                        {item}\r\n                                                    </td>\r\n                                                </tr>\r\n                                            </tbody>\r\n                                        ))}\r\n                                    </>}\r\n                            </table>\r\n                            <table className=\"NodeTable\">\r\n                                <thead>\r\n                                    <tr>\r\n                                        <th>\r\n                                            Output keys:\r\n                                    </th>\r\n                                    </tr>\r\n                                </thead>\r\n                                {output.length == 0 ?\r\n                                    <tbodu>\r\n                                        <tr>\r\n                                            <td>\r\n                                                null\r\n                                        </td>\r\n                                        </tr>\r\n                                    </tbodu>\r\n                                    :\r\n                                    <>\r\n                                        {output.map((item, index) => (\r\n                                            <tbody key={index}>\r\n                                                <tr>\r\n                                                    <td>\r\n                                                        {item}\r\n                                                    </td>\r\n                                                </tr>\r\n                                            </tbody>\r\n                                        ))}\r\n                                    </>}\r\n                            </table>\r\n                    </>\r\n                    }\r\n                    <br/>\r\n                    {props.creationFlag == false ?\r\n                        <div>\r\n                            <button onClick={() => onChange()}>{update == 1 ? 'Submit' : 'Update'}</button>\r\n                        </div>\r\n                        :\r\n                        <div>\r\n                        </div>\r\n                    }\r\n                </div>  \r\n            }\r\n        </div>\r\n    )\r\n}","D:\\Podaci\\7. sem\\Arhitektura i projektovanje softvera\\ml-pipeline-vcs\\fe_app\\src\\Nodes\\ModelPredictor.jsx",["201","202","203","204","205","206","207","208","209","210","211","212","213"],"import React, { useEffect, useState } from 'react';\r\n\r\nexport default function ModelPredictor(props) {\r\n\r\n    const [details, setDetails] = useState(0);\r\n    const [update, setUpdate] = useState(0);\r\n\r\n    const [index, setIndex] = useState();\r\n\r\n    const [input, setInput] = useState([]);\r\n    const [output, setOutput] = useState([]);\r\n\r\n\r\n    useEffect(() => {\r\n        if (props.creationFlag == true) {\r\n            setUpdate(true);\r\n\r\n\r\n            //mesto za dodavanje parametara\r\n\r\n            let nodes = [...props.nodes];\r\n\r\n            nodes[props.id].available_params = [\"index\"];\r\n            nodes[props.id].params = {\r\n                \"index\": null\r\n            }\r\n            props.setNodes(nodes);\r\n        }\r\n\r\n    }, []);\r\n\r\n\r\n    useEffect(() => {\r\n        if (props.creationFlag == false) {\r\n            setIndex(props.nodes[props.id].params[\"index\"]);\r\n            setInput(props.nodes[props.id].input_keys);\r\n            setOutput(props.nodes[props.id].output_keys);\r\n        }\r\n    }, [props.nodes]);\r\n\r\n\r\n\r\n    const onChange = () => {\r\n        setUpdate(!update);\r\n        if (update) {\r\n\r\n            let nodes = [...props.nodes];\r\n            nodes[props.id].input_keys = input;\r\n            nodes[props.id].output_keys = output;\r\n            nodes[props.id].params[\"index\"] = index;\r\n            \r\n            props.setNodes(nodes);\r\n            props.setUpdateFlag(1);\r\n        }\r\n    }\r\n\r\n\r\n\r\n    const addInput = () => {\r\n\r\n        let temp = [...input];\r\n        temp.push(\"null\");\r\n        setInput(temp);\r\n\r\n        if (props.creationFlag) {\r\n\r\n            let nodes = [...props.nodes];\r\n            nodes[props.id].input_keys = temp;\r\n            props.setNodes(nodes);\r\n        }\r\n\r\n    }\r\n    const removeInput = (index) => {\r\n        var temp = [...input];\r\n        temp.splice(index, 1);\r\n        setInput(temp);\r\n\r\n        if (props.creationFlag) {\r\n\r\n            let nodes = [...props.nodes];\r\n            nodes[props.id].input_keys = temp;\r\n            props.setNodes(nodes);\r\n        }\r\n    }\r\n\r\n    const changeInput = (index, e) => {\r\n        var temp = [...input];\r\n        temp[index] = e.target.value;\r\n        setInput(temp);\r\n\r\n\r\n        if (props.creationFlag) {\r\n\r\n            let nodes = [...props.nodes];\r\n            nodes[props.id].input_keys = temp;\r\n            props.setNodes(nodes);\r\n        }\r\n    }\r\n\r\n    const addOutput = () => {\r\n\r\n        let temp = [...output];\r\n        temp.push(\"null\");\r\n        setOutput(temp);\r\n\r\n        if (props.creationFlag) {\r\n\r\n            let nodes = [...props.nodes];\r\n            nodes[props.id].output_keys = temp;\r\n            props.setNodes(nodes);\r\n        }\r\n    }\r\n\r\n    const removeOutput = (index) => {\r\n        var temp = [...output];\r\n        temp.splice(index, 1);\r\n        setOutput(temp);\r\n\r\n        if (props.creationFlag) {\r\n\r\n            let nodes = [...props.nodes];\r\n            nodes[props.id].output_keys = temp;\r\n            props.setNodes(nodes);\r\n        }\r\n    }\r\n\r\n    const changeOutput = (index, e) => {\r\n        var temp = [...output];\r\n        temp[index] = e.target.value;\r\n        setOutput(temp);\r\n\r\n        if (props.creationFlag) {\r\n\r\n            let nodes = [...props.nodes];\r\n            nodes[props.id].output_keys = temp;\r\n            props.setNodes(nodes);\r\n        }\r\n    }\r\n\r\n    const changeIndex = (e) => {\r\n        setIndex(e.target.value)\r\n\r\n        if (props.creationFlag) {\r\n            let nodes = [...props.nodes];\r\n            nodes[props.id].params[\"index\"] = e.target.value;\r\n            props.setNodes(nodes);\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div className=\"node\">\r\n            {details == 0 && <br />}\r\n            <span onClick={() => setDetails(!details)}><b>ModelPredictor</b></span>\r\n            {details == 1 &&\r\n                <div>\r\n                    <hr></hr>\r\n                    {update == 1 ?\r\n                        <>\r\n                            <table className=\"NodeTable\">\r\n                                <thead>\r\n                                    <tr>\r\n                                        <th>\r\n                                            Input keys:\r\n                                        <button onClick={() => addInput()}>+</button>\r\n                                        </th>\r\n\r\n                                    </tr>\r\n                                </thead>\r\n                                {input.length == 0 ?\r\n                                    <tbody>\r\n                                        <tr>\r\n                                            <td>\r\n                                                null\r\n                                        </td>\r\n                                        </tr>\r\n                                    </tbody>\r\n                                    :\r\n                                    <>\r\n                                        {input.map((item, index) => (\r\n                                            <tbody key={index}>\r\n                                                <tr>\r\n                                                    <td>\r\n                                                        <input className=\"inputNode\" type=\"text\" value={item} onChange={(e) => changeInput(index, e)} />\r\n                                                        <button onClick={() => removeInput(index)}>-</button>\r\n                                                    </td>\r\n                                                </tr>\r\n                                            </tbody>\r\n                                        ))}\r\n                                    </>}\r\n                            </table>\r\n                            <table className=\"NodeTable\">\r\n                                <thead>\r\n                                    <tr>\r\n                                        <th>\r\n                                            Output keys:\r\n                                        <button onClick={() => addOutput()}>+</button>\r\n                                        </th>\r\n                                    </tr>\r\n                                </thead>\r\n                                {output.length == 0 ?\r\n                                    <tbody>\r\n                                        <tr>\r\n                                            <td>\r\n                                                null\r\n                                        </td>\r\n                                        </tr>\r\n                                    </tbody>\r\n                                    :\r\n                                    <>\r\n                                        {output.map((item, index) => (\r\n                                            <tbody key={index}>\r\n                                                <tr>\r\n                                                    <td>\r\n                                                        <input className=\"inputNode\" type=\"text\" value={item} onChange={(e) => changeOutput(index, e)} />\r\n                                                        <button onClick={() => removeOutput(index)}>-</button>\r\n                                                    </td>\r\n                                                </tr>\r\n                                            </tbody>\r\n                                        ))}\r\n                                    </>}\r\n                            </table>\r\n                            <table>\r\n                                <tr>\r\n                                    <th> Index: </th>\r\n                                    <td>\r\n                                        <input type=\"number\" value={index} onChange={(e) => changeIndex(e)} />\r\n                                    </td>\r\n                                </tr>\r\n                            </table>\r\n                        </>\r\n                        :\r\n                        <>\r\n                            <table className=\"NodeTable\">\r\n                                <thead>\r\n                                    <tr>\r\n                                        <th>\r\n                                            Input keys:\r\n                                    </th>\r\n\r\n                                    </tr>\r\n                                </thead>\r\n                                {input?.length == 0 ?\r\n                                    <tbody>\r\n                                        <tr>\r\n                                            <td>\r\n                                                null\r\n                                   </td>\r\n                                        </tr>\r\n                                    </tbody>\r\n                                    :\r\n                                    <>\r\n                                        {input.map((item, index) => (\r\n                                            <tbody key={index}>\r\n                                                <tr>\r\n                                                    <td>\r\n                                                        {item}\r\n                                                    </td>\r\n                                                </tr>\r\n                                            </tbody>\r\n                                        ))}\r\n                                    </>}\r\n                            </table>\r\n                            <table className=\"NodeTable\">\r\n                                <thead>\r\n                                    <tr>\r\n                                        <th>\r\n                                            Output keys:\r\n                                    </th>\r\n                                    </tr>\r\n                                </thead>\r\n                                {output.length == 0 ?\r\n                                    <tbody>\r\n                                        <tr>\r\n                                            <td>\r\n                                                null\r\n                                        </td>\r\n                                        </tr>\r\n                                    </tbody>\r\n                                    :\r\n                                    <>\r\n                                        {output.map((item, index) => (\r\n                                            <tbody key={index}>\r\n                                                <tr>\r\n                                                    <td>\r\n                                                        {item}\r\n                                                    </td>\r\n                                                </tr>\r\n                                            </tbody>\r\n                                        ))}\r\n                                    </>}\r\n                            </table>\r\n                            <table className=\"NodeTable\">\r\n                                <tbody>\r\n                                    <tr>\r\n                                        <th> Index: </th>\r\n                                        <td> {index ? index : 'null'} </td>\r\n                                    </tr>\r\n                                </tbody>\r\n                            </table>\r\n                        </>\r\n                    }\r\n                    <br />\r\n                    {props.creationFlag == false ?\r\n                        <div>\r\n                            <button onClick={() => onChange()}>{update == 1 ? 'Submit' : 'Update'}</button>\r\n                        </div>\r\n                        :\r\n                        <div>\r\n                        </div>\r\n                    }\r\n                </div>\r\n            }\r\n        </div>\r\n    )\r\n}","D:\\Podaci\\7. sem\\Arhitektura i projektovanje softvera\\ml-pipeline-vcs\\fe_app\\src\\Main\\Main.jsx",[],"D:\\Podaci\\7. sem\\Arhitektura i projektovanje softvera\\ml-pipeline-vcs\\fe_app\\src\\Main\\Header.jsx",["214"],"import React from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport { useCookies } from 'react-cookie';\r\nimport {useHistory} from \"react-router-dom\";\r\nimport \"./Header.css\";\r\n\r\nexport default function Header()\r\n{\r\n    const [cookies, removeCookies] = useCookies(['user']);\r\n    const history = useHistory();\r\n\r\n    const logout = async () => {\r\n        console.log(`Token ${cookies.token}`);\r\n        /*\r\n        const requestOptions = {\r\n            method: 'PUT',\r\n            header: new Headers({\r\n                   'Authorization': `Token ${cookies.token}`\r\n                })\r\n            };\r\n            \r\n\r\n        const requestOptions = {\r\n        method: 'PUT',\r\n        header:{\r\n                'Authorization': `Token ${cookies.token}`\r\n           },\r\n        body: JSON.stringify({'id':cookie.id})  \r\n        };*/\r\n        const requestOptions = {\r\n            method: 'PUT',\r\n            headers:{\r\n                    'Authorization': `Token ${cookies.token}`,\r\n                    'Content-Type': 'application/json',\r\n                    'accept': 'application/json'\r\n                },\r\n            body: JSON.stringify({\"created_by\":cookies.id})  \r\n        };\r\n        console.log(requestOptions);\r\n        const response = await fetch(\"http://localhost:8000/easy_flow/v1/logout/\",requestOptions);\r\n        console.log(response);\r\n\r\n        console.log(\"Logout\");\r\n        removeCookies(\"token\");\r\n        removeCookies(\"id\");\r\n        history.push(\"/\");\r\n    }\r\n\r\n    return(\r\n        <header>\r\n            <nav>\r\n                <ul>\r\n                    <li>\r\n                        <Link to=\"/main\">\r\n                            Profile\r\n                        </Link>\r\n                    </li>\r\n                    <li>\r\n                        <Link to=\"/main/teamCreate\">\r\n                            Create new team\r\n                        </Link>\r\n                    </li>\r\n                    <li>\r\n                            Teams\r\n                    </li>\r\n\r\n                    <li id=\"logout\">\r\n                        <a onClick={logout}>Logout</a>\r\n                    </li>\r\n                </ul>\r\n            </nav>\r\n        </header>\r\n    )\r\n}","D:\\Podaci\\7. sem\\Arhitektura i projektovanje softvera\\ml-pipeline-vcs\\fe_app\\src\\Home\\About.jsx",[],"D:\\Podaci\\7. sem\\Arhitektura i projektovanje softvera\\ml-pipeline-vcs\\fe_app\\src\\Home\\Home.jsx",["215"],"\r\nimport { useState } from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport './Home.css';\r\nimport LogIn from './LogIn';\r\nimport SingUp from './SignUp';\r\n\r\nexport default function Home() \r\n{\r\n\r\n  const [isLog, setIsLog] = useState(true); \r\n\r\n  const handlerRegister = () =>\r\n  {\r\n    setIsLog(false);\r\n  }\r\n\r\n  const handlerLogIn = () =>\r\n  {\r\n    setIsLog(true)\r\n  }\r\n  \r\n    return (\r\n      <div className=\"content\">\r\n        <div className=\"title\">\r\n          <h1>Welcome to EasyFlow</h1>\r\n          <p className=\"about\">\r\n            We are framework designed for...\r\n            {/* <Link className=\"linkToAbout\" to = \"/about\"> About</Link> */}\r\n            <Link className=\"linkToAbout\" \r\n            to ={{\r\n              pathname:\"/about\",\r\n              state: {modal: \"true\"},\r\n            }}>\r\n              About\r\n            </Link>\r\n            <br/>\r\n            i tako dalje\r\n          </p>\r\n        </div>\r\n        <div className=\"signDiv\">\r\n          <Link onClick={handlerRegister}> Register </Link>\r\n          /\r\n          <Link onClick={handlerLogIn}> LogIn </Link>\r\n          <br/>\r\n          {isLog == true ?\r\n            <LogIn></LogIn>\r\n            :<SingUp></SingUp>\r\n          }\r\n          <br/>\r\n        </div>\r\n      </div>\r\n    );\r\n  }","D:\\Podaci\\7. sem\\Arhitektura i projektovanje softvera\\ml-pipeline-vcs\\fe_app\\src\\Home\\LogIn.js",["216","217"],"import React, { useState } from 'react'\r\nimport { useCookies } from 'react-cookie';\r\nimport {useHistory} from \"react-router-dom\";\r\n\r\nexport default function LogIn() {\r\n\r\n    const [username, setUsername] = useState(\"\");\r\n    const [password, setPassword] = useState(\"\");\r\n    const [isError, setIsError] = useState(false);\r\n    const [cookies, setCookies, removeCookies] = useCookies(['user']);\r\n    const history = useHistory();\r\n\r\n    const updateUsername = e => {\r\n        setUsername(e.target.value);\r\n    }\r\n    const updatePassword = e => {\r\n        setPassword(e.target.value);\r\n    }\r\n\r\n\r\n    async function LogIn(){\r\n\r\n        //console.log(JSON.stringify({\"username\":username,\"password\":password}));\r\n        const requestOptions = {\r\n            method: 'POST',\r\n            headers: {'Content-Type': 'application/json' },\r\n            body: JSON.stringify({\"username\":username,\"password\":password})\r\n        };\r\n\r\n        setIsError(false);\r\n\r\n        const response = await fetch('http://localhost:8000/easy_flow/v1/login/',requestOptions);\r\n        const data = await response.json();\r\n\r\n        if(response.ok)\r\n        {\r\n            /*\r\n            const requestOptionsCookie = {\r\n                method: 'GET',\r\n                headers: {\r\n                    'Authorization': 'Token ' + data.token,\r\n                    'Content-Type': 'application/json' \r\n                }\r\n            };\r\n            const responseCookie = await fetch('http://localhost:8000/easy_flow/v1/get_cookie/'+data.user.id+\"/\",requestOptionsCookie);\r\n            const dataCookie = await responseCookie.json();\r\n            console.log(responseCookie);\r\n            console.log(dataCookie);*/\r\n\r\n            setCookies(\"token\",data.token);\r\n            setCookies(\"id\",data.user.id);\r\n            console.log(\"OK\");\r\n            console.log(data);  \r\n            history.push(\"/main\");\r\n        }\r\n        else{\r\n            //removeCookie(\"token\");\r\n            setIsError(true);\r\n            console.log(\"ERROR\");\r\n        }\r\n        \r\n    }\r\n\r\n    return(\r\n        <div className=\"divSignup\">\r\n            { isError && <div> Incorect username or password </div> }\r\n            <br/>\r\n            Username: <input className=\"inputSignup\" type=\"text\" value={username} onChange={updateUsername}/>\r\n            <br/><br/>\r\n            Password: <input className=\"inputSignup\" type=\"text\" value={password} onChange={updatePassword}/>\r\n            <br/><br/>\r\n            <button id=\"buttonSingup\" onClick={LogIn}>LogIn</button>\r\n            <br/><br/>\r\n        </div>\r\n    )\r\n}","D:\\Podaci\\7. sem\\Arhitektura i projektovanje softvera\\ml-pipeline-vcs\\fe_app\\src\\Home\\SignUp.js",["218"],"import React, { useEffect,useState } from 'react'\r\n\r\nexport default function SingUp() {\r\n\r\n    const [firstname, setFirstname] = useState(\"\");\r\n    const [lastname, setLastname] = useState(\"\");\r\n    const [username, setUsername] = useState(\"\");\r\n    const [email, setEmail] = useState(\"\");\r\n    const [password, setPassword] = useState(\"\");\r\n\r\n    const updateFirstname = e => {\r\n        setFirstname(e.target.value);\r\n    }\r\n    const updateLastname = e => {\r\n        setLastname(e.target.value);\r\n    }\r\n    const updateUsername = e => {\r\n        setUsername(e.target.value);\r\n    }\r\n    const updateEmail = e => {\r\n        setEmail(e.target.value);\r\n    }\r\n    const updatePassword = e => {\r\n        setPassword(e.target.value);\r\n    }\r\n\r\n    const createUser = async(e) =>{\r\n        e.preventDefault();\r\n        const requestOptions = {\r\n            method: 'POST',\r\n            headers: {'Content-Type': 'application/json' },\r\n            body: JSON.stringify({\"username\":username,\"email\":email,\"password\":password,\"first_name\":firstname,\"last_name\":lastname})};\r\n            \r\n        const response = await fetch('http://localhost:8000/easy_flow/v1/user_create/',requestOptions);\r\n        console.log(response);\r\n    }\r\n\r\n    return (\r\n        <div className=\"divSignup\">\r\n            <form onSubmit={createUser}>\r\n                Username: <input className=\"inputSignup\" type=\"text\" value={username} onChange={updateUsername} />\r\n                <br /><br />\r\n                E-mail: <input className=\"inputSignup\" type=\"text\" value={email} onChange={updateEmail} />\r\n                <br /><br />\r\n                Fistname: <input className=\"inputSignup\" type=\"text\" value={firstname} onChange={updateFirstname} />\r\n                <br /><br />\r\n                Lastname: <input className=\"inputSignup\" type=\"text\" value={lastname} onChange={updateLastname} />\r\n                <br /><br />\r\n                Password: <input className=\"inputSignup\" type=\"text\" value={password} onChange={updatePassword} />\r\n                <br /><br />\r\n                <button type=\"submit\" id=\"buttonSingup\">SignUp</button>\r\n            </form>\r\n        </div>\r\n    )\r\n}","D:\\Podaci\\7. sem\\Arhitektura i projektovanje softvera\\ml-pipeline-vcs\\fe_app\\src\\UserStart\\UserProfil.jsx",["219","220","221","222","223","224","225","226","227"],"import React, { useEffect,useReducer,useState } from 'react'\r\nimport { BrowserRouter as Router, Switch, Route } from 'react-router-dom';\r\nimport { Link } from 'react-router-dom';\r\nimport { useCookies } from 'react-cookie';\r\nimport './Start.css'\r\n\r\nexport default function UserProfil({user}){\r\n    \r\n    const [cookies] = useCookies(['user']);\r\n\r\n    const [flowJson,setFlowJson] = useState();\r\n    const [flow,setFlow] = useState(\r\n        {\r\n            created_by: cookies.id,\r\n            serialized_flow: {}\r\n        })\r\n\r\n    useEffect(() => {\r\n        //getUser();\r\n    },[] );\r\n\r\n\r\n    return (\r\n        <div className=\"contentBody\" id=\"Info\">\r\n            <table className=\"InfoTable\">\r\n                <h2>Profile info</h2>\r\n                    <tr>\r\n                        <th>\r\n                            Username:\r\n                        </th>\r\n                        <td>\r\n                            {user?.username}\r\n                        </td>\r\n                    </tr>\r\n                    <tr>\r\n                        <th>\r\n                            Email:\r\n                        </th>\r\n                        <td>\r\n                            {user?.email}\r\n                        </td>\r\n                    </tr>\r\n                    <tr>\r\n                        <th>\r\n                            Firstname:\r\n                        </th>\r\n                        <td>\r\n                            {user?.first_name}\r\n                        </td>\r\n                    </tr>\r\n                    <tr>\r\n                        <th>\r\n                            Lastname:\r\n                        </th>\r\n                        <td>\r\n                            {user?.last_name}\r\n                        </td>\r\n                    </tr>\r\n            </table>\r\n\r\n        \r\n\r\n        </div>\r\n    )\r\n}","D:\\Podaci\\7. sem\\Arhitektura i projektovanje softvera\\ml-pipeline-vcs\\fe_app\\src\\UserStart\\Start.js",["228"],"import React, { useEffect,useState } from 'react'\r\nimport { Link } from 'react-router-dom';\r\nimport './Start.css'\r\nimport { useCookies } from 'react-cookie';\r\n\r\nexport default function Start({children}){\r\n\r\n    const [cookies] = useCookies(['user']);\r\n    const [user,setUser] = useState([]);\r\n    const [teams,setTeams] = useState([]);\r\n    const [myTeams, setMyTeams] = useState([]);\r\n\r\n    useEffect(() => {\r\n        getUser();\r\n    },[] );\r\n\r\n    const getUser = async () =>\r\n    {\r\n        const requestOptions = {\r\n            method: 'GET',\r\n            headers:{\r\n                'Authorization': 'Token ' + cookies.token,\r\n                'Content-Type': 'application/json',\r\n                'accept': 'application/json'\r\n            }\r\n            };\r\n        const response = await fetch(\"http://localhost:8000/easy_flow/v1/user/\" + cookies.id +\"/\", requestOptions);\r\n        const data = await response.json();\r\n\r\n        setUser(data);\r\n        setTeams(data.teams);\r\n        setMyTeams(data.created_teams);\r\n    }\r\n\r\n    return (\r\n        <div className=\"content\" id=\"start\">\r\n            <aside id=\"teams\">\r\n                <nav>\r\n                    <ul>\r\n                        <p>\r\n                            <Link to=\"/main/teamCreate\">\r\n                                Create new team\r\n                            </Link>\r\n                        </p>\r\n                        Your teams\r\n                        {myTeams?.map(team => (\r\n                            <li key={team.name}>\r\n                                <Link to={`/main/team/${team.id}/${1}`}>\r\n                                    {team.name}\r\n                                </Link>\r\n                            </li>\r\n                        ))}\r\n                        <br/>\r\n                        You are member\r\n                        {teams?.map(team => (\r\n                            <li key={team.name}>\r\n                                <Link to={`/main/team/${team.id}/${0}`}>\r\n                                    {team.leader.username}/{team.name}\r\n                                </Link>\r\n                            </li>\r\n                        ))}\r\n                    </ul>\r\n                </nav>\r\n            </aside>\r\n            <main>\r\n                {children(user)}\r\n            </main>\r\n        </div>\r\n    )\r\n}","D:\\Podaci\\7. sem\\Arhitektura i projektovanje softvera\\ml-pipeline-vcs\\fe_app\\src\\UserStart\\Team.jsx",["229","230","231"],"import React, { useEffect,useState } from 'react'\r\nimport { useParams } from \"react-router-dom\";\r\nimport { useCookies } from 'react-cookie';\r\nimport { Link } from 'react-router-dom';\r\n\r\nexport default function Team(){\r\n\r\n    const {teamid} = useParams();\r\n    const {leader} = useParams();\r\n    const [team,setTeam] = useState([]);\r\n    const [flows,setFlows] = useState([]);\r\n    const [cookies] = useCookies(['user']);\r\n\r\n\r\n    const getTeam = async () =>\r\n    {\r\n        const requestOptions = {\r\n            method: 'GET',\r\n            headers:{\r\n                'Authorization': 'Token ' + cookies.token,\r\n                'Content-Type': 'application/json',\r\n                'accept': 'application/json'\r\n            }\r\n            };\r\n        const response = await fetch(\"http://localhost:8000/easy_flow/v1/team/\" + teamid +\"/\", requestOptions);\r\n        const data = await response.json();\r\n        setTeam(data);\r\n        setFlows(data.flows);\r\n    }\r\n    \r\n    useEffect(() => {\r\n        getTeam();\r\n    },[teamid] );\r\n\r\n\r\n    const [username, setUsername] = useState(\"\");\r\n\r\n    const updateUsername = e => {\r\n        setUsername(e.target.value);\r\n    }\r\n\r\n\r\n    const addMember = async(e) => {\r\n        e.preventDefault();\r\n        const requestOptions = {\r\n            method: 'PUT',\r\n            headers:{\r\n                'Authorization': 'Token ' + cookies.token,\r\n                'Content-Type': 'application/json',\r\n                'accept': 'application/json'\r\n            },\r\n            body: JSON.stringify({\"created_by\":cookies.id,\"user\":username,\"team\":teamid})\r\n        };\r\n\r\n        const response = await fetch(\"http://localhost:8000/easy_flow/v1/add_member/\",requestOptions);\r\n        const data = await response.json();\r\n\r\n        if(response.ok)\r\n        {\r\n            console.log(\"OK\");\r\n        }\r\n        else\r\n        {\r\n            console.log(\"ERROR\");\r\n        }\r\n    }\r\n\r\n\r\n    const removeFlow = async(flowid) => {\r\n        const requestOptions = {\r\n            method: 'DELETE',\r\n            headers:{\r\n                'Authorization': 'Token ' + cookies.token,\r\n                'Content-Type': 'application/json',\r\n                'accept': 'application/json'\r\n            },\r\n            body: JSON.stringify({\"flow\":cookies.id})\r\n        };\r\n\r\n        const response = await fetch(\"http://localhost:8000/easy_flow/v1/flow_remove/\",requestOptions);\r\n        \r\n        console.log(response);    \r\n    }\r\n\r\n\r\n    return(\r\n        <div className=\"contentBody\" id=\"Info\">\r\n            <div>\r\n                <h2>Team info</h2>\r\n                <p>Name: {team?.name}</p>\r\n                <h2>Members</h2>\r\n                <ul>\r\n                {team?.members?.map(member => (\r\n                    <li>{member.username}</li>\r\n                  ))}\r\n                </ul>\r\n                <br/>\r\n                {leader == true &&\r\n                <div>\r\n                <p>Add member:</p>\r\n                <form onSubmit={addMember}>\r\n                    User email: \r\n                    <input className=\"inputSignup\" type=\"text\" value={username} onChange={updateUsername} />\r\n                    <br /><br />\r\n                    <button type=\"submit\" id=\"buttonSingup\">Add member</button>\r\n                </form>\r\n                </div>}\r\n            </div>\r\n            \r\n            <div className=\"flows\">\r\n                <h2>Flows created by this team:</h2>\r\n                <table className=\"flowsTable\">\r\n                    <thead>\r\n                        <th>Flow name</th>\r\n                        <th>Created:</th>\r\n                    </thead>\r\n                    <tbody>\r\n                        {flows?.map(flow=>(\r\n                            <tr>\r\n                                <td>\r\n                                    <Link to={`/flow/${teamid}/${flow.id}/${flow.name}/${flow.root.id}`}>\r\n                                        {flow.name}\r\n                                    </Link>\r\n                                </td>\r\n                                <td>\r\n                                    {flow.timestamp.slice(0,10)+\"   \"+flow.timestamp.slice(11,19)}\r\n                                </td>\r\n                                <td>\r\n                                    <button id=\"delete\" onClick={() => removeFlow(flow.id)}>\r\n                                        Remove\r\n                                    </button>\r\n                                </td>\r\n                            </tr>\r\n                        ))}\r\n                    </tbody>\r\n                </table>\r\n\r\n                <br/>\r\n                <br/>\r\n\r\n                <Link type=\"button\" to={`/flow/${teamid}/create`}>\r\n                    Create new flow\r\n                </Link>\r\n                \r\n            </div>\r\n        </div>\r\n    )\r\n}","D:\\Podaci\\7. sem\\Arhitektura i projektovanje softvera\\ml-pipeline-vcs\\fe_app\\src\\UserStart\\TeamCreate.jsx",["232"],"import React, { useEffect,useState } from 'react';\r\nimport { useCookies } from 'react-cookie';\r\n\r\nexport default function TeamCreate({user}){\r\n\r\n    const [teamname, setTeamname] = useState(\"\");\r\n    const [cookies] = useCookies(['user']);\r\n\r\n    const updateTeamname = e => {\r\n        setTeamname(e.target.value);\r\n    }\r\n\r\n    const createTeam = async(e) => {\r\n        e.preventDefault();\r\n        const requestOptions = {\r\n            method: 'POST',\r\n            headers:{\r\n                'Authorization': 'Token ' + cookies.token,\r\n                'Content-Type': 'application/json',\r\n                'accept': 'application/json'\r\n            },\r\n            body: JSON.stringify({\"created_by\":cookies.id,\"name\":teamname})\r\n        };\r\n\r\n        const response = await fetch(\"http://localhost:8000/easy_flow/v1/team_create/\",requestOptions);\r\n        const data = await response.json();\r\n        console.log(data);\r\n\r\n        if(response.ok)\r\n        {\r\n            console.log(\"OK\");\r\n            console.log(data);\r\n        }\r\n        else\r\n        {\r\n            console.log(\"ERROR\");\r\n        }\r\n    }\r\n\r\n    return(\r\n        <div className=\"contentBody\">\r\n            \r\n        <form onSubmit={createTeam}>\r\n            Team name: <input className=\"inputSignup\" type=\"text\" value={teamname} onChange={updateTeamname} />\r\n            <br /><br />\r\n            <button type=\"submit\" id=\"buttonSingup\">Create team</button>\r\n        </form>\r\n    </div>\r\n    )\r\n}\r\n","D:\\Podaci\\7. sem\\Arhitektura i projektovanje softvera\\ml-pipeline-vcs\\fe_app\\src\\Flow\\FlowCreate.jsx",["233","234","235","236","237","238","239","240","241"],"import React, { useEffect,useState,useReducer } from 'react';\r\nimport './Flow.css';\r\nimport { useCookies } from 'react-cookie';\r\n\r\nimport { useParams } from 'react-router-dom';\r\nimport DatasetLoader from '../Nodes/DatasetLoader';\r\nimport ModelLoader from '../Nodes/ModelLoader';\r\nimport DataNormalizer from '../Nodes/DataNormalizer';\r\nimport DataPlotter from '../Nodes/DataPlotter';\r\nimport ModelEvaluator from '../Nodes/ModelEvaluator';\r\nimport DataStandardizer from '../Nodes/DataStandardizer';\r\nimport ModelPredictor from '../Nodes/ModelPredictor';\r\n\r\n\r\nexport default function FlowCreate(){\r\n\r\n    const [cookies] = useCookies(['user']);\r\n    const {teamid} = useParams();\r\n\r\n    const [flowname, setFlowName] = useState(\"\");\r\n    const [initialVersion, setInitialVersion] = useState(\"\");\r\n\r\n\r\n    const [nodes, setNodes] = useState([]);\r\n    const [isMount, setIsMount] = useState(1);\r\n\r\n\r\n    //const [nodeComponents, setNodeComponents] = useState();\r\n    //const [nodesCount, setNodesCount] = useState(0);\r\n\r\n    const [flow, setFlow] = useState({\r\n        \"created_by\": cookies.id,\r\n        \"team\" : teamid,\r\n        serialized_flow: {\r\n            flow_name: flowname,\r\n            flow_version: initialVersion,\r\n            nodes: nodes,\r\n        }\r\n    });\r\n\r\n        \r\n    useEffect(() => {\r\n        if(isMount)\r\n            setIsMount(0);\r\n        else\r\n            createFlowVersion();\r\n    },[flow] );\r\n\r\n\r\n    const createFlowVersion = async() => {\r\n\r\n        const requestOptions = {\r\n            method: 'POST',\r\n            headers:{\r\n                'Authorization': 'Token ' + cookies.token,\r\n                'Content-Type': 'application/json',\r\n                'accept': 'application/json'\r\n            },\r\n            body: JSON.stringify(flow)\r\n        };\r\n\r\n        const response = await fetch(\"http://localhost:8000/easy_flow/v1/flow_create/\",requestOptions);\r\n        const data = await response.json();\r\n        console.log(data);\r\n    }\r\n\r\n    const handleSave = () => {\r\n        setFlow({...flow, serialized_flow: {...flow.serialized_flow,flow_name: flowname, flow_version: initialVersion, nodes: nodes}});\r\n    }\r\n\r\n    const addNode = (type) => {\r\n\r\n        var node = {\r\n            \"available_params\": [],\r\n            \"input_keys\": [],\r\n            \"output_keys\": [],\r\n            \"params\": {},\r\n            \"type\": type\r\n        }\r\n        setNodes(nodes => [...nodes, node]);\r\n    }\r\n             \r\n    return(\r\n        <div className=\"flowCreate\">\r\n            <div className=\"nodeSelection\">\r\n                Flow name: <input className=\"inputNode\" type=\"text\" value={flowname} onChange={(e) => setFlowName(e.target.value)}/>\r\n                <br/>\r\n                Initial version: <input className=\"inputNode\" type=\"text\" value={initialVersion} onChange={(e) => setInitialVersion(e.target.value)}/>\r\n                <p id=\"naslov\">Create initial version for: {flowname}</p>\r\n                <p>Add commponent:</p>\r\n                <ul>\r\n                    <p className=\"link\" onClick={() => addNode(\"data_normalizer\")}>- DataNormalizer</p>\r\n                    <p className=\"link\" onClick={() => addNode(\"data_plotter\")}>- DataPlotter</p>\r\n                    <p className=\"link\" onClick={() => addNode(\"keras_dataset_loader\")}>- DatasetLoader</p>\r\n                    <p className=\"link\" onClick={() => addNode(\"data_standardizer\")}>- DataStandardizer</p>\r\n                    <p className=\"link\" onClick={() => addNode(\"model_evaluator\")}>- ModelEvaluator</p>\r\n                    <p className=\"link\" onClick={() => addNode(\"model_loader\")}>- ModelLoader</p>\r\n                    <p className=\"link\" onClick={() => addNode(\"model_predictor\")}>- ModlerPredictor</p>\r\n                </ul>\r\n                <button onClick={() => handleSave()}>Save</button>\r\n            </div>\r\n            <div className=\"flowReview\">\r\n\r\n                {nodes?.map((node, index) => (\r\n                    <div key={index}>\r\n                        {node.type == \"data_normalizer\" &&\r\n                        <DataNormalizer nodes={nodes} setNodes={setNodes} creationFlag={true} id={index}/>}\r\n\r\n                        {node.type == \"data_plotter\" &&\r\n                        <DataPlotter nodes={nodes} setNodes={setNodes} creationFlag={true} id={index}/>}\r\n                        \r\n                        {node.type == \"keras_dataset_loader\" && \r\n                        <DatasetLoader nodes={nodes} setNodes={setNodes} creationFlag={true} id={index}/>}    \r\n\r\n                        {node.type == \"data_standardizer\" &&\r\n                        <DataStandardizer nodes={nodes} setNodes={setNodes} creationFlag={true} id={index}/>}\r\n                        \r\n                        {node.type == \"model_evaluator\" &&\r\n                        <ModelEvaluator nodes={nodes} setNodes={setNodes} creationFlag={true} id={index}/>}\r\n\r\n                        {node.type == \"model_loader\" &&  \r\n                        <ModelLoader  nodes={nodes} setNodes={setNodes} creationFlag={true} id={index}/>}\r\n                        \r\n                        {node.type == \"model_predictor\" &&\r\n                        <ModelPredictor nodes={nodes} setNodes={setNodes} creationFlag={true} id={index}/>}\r\n                    </div>\r\n                ))}\r\n            </div>\r\n        </div>\r\n    )\r\n    \r\n}\r\n","D:\\Podaci\\7. sem\\Arhitektura i projektovanje softvera\\ml-pipeline-vcs\\fe_app\\src\\Flow\\FlowVersionCreate.jsx",["242","243","244","245","246","247","248","249","250","251","252","253","254","255","256"],"import React, { forwardRef, useRef, useEffect,useState,useImperativeHandle } from 'react';\r\nimport './Flow.css';\r\nimport { useCookies } from 'react-cookie';\r\nimport TreeView from '@material-ui/lab/TreeView';\r\nimport TreeItem from '@material-ui/lab/TreeItem';\r\nimport ExpandMoreIcon from '@material-ui/icons/ExpandMore';\r\nimport ChevronRightIcon from '@material-ui/icons/ChevronRight';\r\nimport { useParams } from 'react-router-dom';\r\n\r\nimport DatasetLoader from '../Nodes/DatasetLoader';\r\nimport ModelLoader from '../Nodes/ModelLoader';\r\nimport DataNormalizer from '../Nodes/DataNormalizer';\r\nimport DataPlotter from '../Nodes/DataPlotter';\r\nimport ModelEvaluator from '../Nodes/ModelEvaluator';\r\nimport DataStandardizer from '../Nodes/DataStandardizer';\r\nimport ModelPredictor from '../Nodes/ModelPredictor';\r\n\r\nexport default function FlowVersionCreate(){\r\n\r\n    const [cookies] = useCookies(['user']);\r\n    //const {teamid} = useParams();\r\n    const {rootid} = useParams();\r\n    const {flowname} = useParams();\r\n    const {prev} = useParams();\r\n    \r\n\r\n    const [initialVersion, setInitialVersion] = useState(\"\");\r\n\r\n    const [nodes, setNodes] = useState([]);\r\n    const [isMount, setIsMount] = useState(1);\r\n\r\n\r\n    const [flow,setFlow] = useState(\r\n    {\r\n        \"created_by\": cookies.id,\r\n        \"flow\" : rootid,\r\n        \"prev_flow_version\": prev,\r\n        \"serialized_flow\": {\r\n            flow_name: flowname,\r\n            flow_version: initialVersion,\r\n            nodes: nodes\r\n        }\r\n    });\r\n\r\n\r\n    useEffect(() => {\r\n        if(isMount)\r\n            setIsMount(0);\r\n        else\r\n            createFlowVersion();\r\n    },[flow] );\r\n\r\n\r\n    const createFlowVersion = async() => {\r\n\r\n        const requestOptions = {\r\n            method: 'POST',\r\n            headers:{\r\n                'Authorization': 'Token ' + cookies.token,\r\n                'Content-Type': 'application/json',\r\n                'accept': 'application/json'\r\n            },\r\n            body: JSON.stringify(flow)\r\n        };\r\n\r\n        const response = await fetch(\"http://localhost:8000/easy_flow/v1/flow_version_create/\",requestOptions);\r\n        const data = await response.json();\r\n        console.log(data);\r\n    }\r\n\r\n\r\n    const handleSave = () => {\r\n        setFlow({...flow, serialized_flow: {...flow.serialized_flow,flow_name: flowname, flow_version: initialVersion, nodes: nodes}});\r\n    }\r\n\r\n    const addNode = (type) => {\r\n\r\n        var node = {\r\n            \"available_params\": [],\r\n            \"input_keys\": [],\r\n            \"output_keys\": [],\r\n            \"params\": {},\r\n            \"type\": type\r\n        }\r\n\r\n        setNodes(nodes => [...nodes, node]);\r\n    }\r\n             \r\n\r\n    return(\r\n        <div className=\"flowCreate\">\r\n            <div className=\"nodeSelection\">\r\n                <p id=\"naslov\">Create flow version for: {flowname}</p>\r\n                <br/>   \r\n                Version number: <input className=\"inputNode\" type=\"text\" value={initialVersion} onChange={(e) => setInitialVersion(e.target.value)}/>\r\n                <p>Add commponent:</p>\r\n                <ul>\r\n                    <p className=\"link\" onClick={() => addNode(\"data_normalizer\")}>- DataNormalizer</p>\r\n                    <p className=\"link\" onClick={() => addNode(\"data_plotter\")}>- DataPlotter</p>\r\n                    <p className=\"link\" onClick={() => addNode(\"keras_dataset_loader\")}>- DatasetLoader</p>\r\n                    <p className=\"link\" onClick={() => addNode(\"data_standardizer\")}>- DataStandardizer</p>\r\n                    <p className=\"link\" onClick={() => addNode(\"model_evaluator\")}>- ModelEvaluator</p>\r\n                    <p className=\"link\" onClick={() => addNode(\"model_loader\")}>- ModelLoader</p>\r\n                    <p className=\"link\" onClick={() => addNode(\"model_predictor\")}>- ModlerPredictor</p>\r\n                </ul>\r\n                <button onClick={() => handleSave()}>Save</button>\r\n            </div>\r\n            <div className=\"flowReview\">\r\n            {nodes?.map((node, index) => (\r\n                    <div key={index}>\r\n                        {node.type == \"data_normalizer\" &&\r\n                        <DataNormalizer nodes={nodes} setNodes={setNodes} creationFlag={true} id={index}/>}\r\n\r\n                        {node.type == \"data_plotter\" &&\r\n                        <DataPlotter nodes={nodes} setNodes={setNodes} creationFlag={true} id={index}/>}\r\n                        \r\n                        {node.type == \"keras_dataset_loader\" && \r\n                        <DatasetLoader nodes={nodes} setNodes={setNodes} creationFlag={true} id={index}/>}    \r\n\r\n                        {node.type == \"data_standardizer\" &&\r\n                        <DataStandardizer nodes={nodes} setNodes={setNodes} creationFlag={true} id={index}/>}\r\n                        \r\n                        {node.type == \"model_evaluator\" &&\r\n                        <ModelEvaluator nodes={nodes} setNodes={setNodes} creationFlag={true} id={index}/>}\r\n\r\n                        {node.type == \"model_loader\" &&  \r\n                        <ModelLoader  nodes={nodes} setNodes={setNodes} creationFlag={true} id={index}/>}\r\n                        \r\n                        {node.type == \"model_predictor\" &&\r\n                        <ModelPredictor nodes={nodes} setNodes={setNodes} creationFlag={true} id={index}/>}\r\n                    </div>\r\n                ))}\r\n            </div>\r\n        </div>\r\n    )\r\n    \r\n}\r\n","D:\\Podaci\\7. sem\\Arhitektura i projektovanje softvera\\ml-pipeline-vcs\\fe_app\\src\\Flow\\FlowContainer.jsx",["257","258","259","260"],"import React, { useEffect,useState } from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport { useCookies } from 'react-cookie';  \r\nimport { useParams } from \"react-router-dom\";\r\n\r\nimport './Flow.css';\r\nimport FlowCreate from './FlowCreate';\r\nimport Flow from './Flow';\r\n\r\nexport default function FlowContainer({children}){\r\n\r\n    const [cookies] = useCookies(['user']);\r\n    const {teamid} = useParams();\r\n\r\n    const [team,setTeam] = useState([]);\r\n    const [flows,setFlows] = useState([]);\r\n\r\n    useEffect(() => {\r\n        getTeam();\r\n    },[] );\r\n\r\n    const getTeam = async () =>\r\n    {\r\n        const requestOptions = {\r\n            method: 'GET',\r\n            headers:{\r\n                'Authorization': 'Token ' + cookies.token,\r\n                'Content-Type': 'application/json',\r\n                'accept': 'application/json'\r\n            }\r\n            };\r\n        const response = await fetch(\"http://localhost:8000/easy_flow/v1/team/\" + teamid +\"/\", requestOptions);\r\n        const data = await response.json();\r\n        setTeam(data);\r\n        setFlows(data.flows);\r\n    }\r\n\r\n\r\n    return(\r\n        <div className=\"content\" id=\"flow\">\r\n            <aside id=\"side\">\r\n                <nav>\r\n                    Flows list\r\n                    <ul>\r\n                        {flows?.map(flow =>(\r\n                            <li key={flow.name}>\r\n                                <Link to={`/flow/${teamid}/${flow.id}/${flow.name}/${flow.root.id}`} forceRefresh={true}>\r\n                                    {flow.name}\r\n                                </Link>\r\n                            </li>\r\n                        ))}\r\n                    </ul>\r\n                </nav>\r\n                <Link to={`/flow/${teamid}/create`}>Create flow</Link>\r\n                <br/>\r\n            </aside>\r\n            <main>\r\n                {children}\r\n            </main>\r\n        </div>\r\n    )\r\n}","D:\\Podaci\\7. sem\\Arhitektura i projektovanje softvera\\ml-pipeline-vcs\\fe_app\\src\\Flow\\Flow.jsx",["261","262","263","264","265","266","267","268","269","270"],"import React, { useEffect,useState } from 'react';\r\nimport './Flow.css';\r\nimport { useCookies } from 'react-cookie';\r\nimport TreeView from '@material-ui/lab/TreeView';\r\nimport TreeItem from '@material-ui/lab/TreeItem';\r\nimport ExpandMoreIcon from '@material-ui/icons/ExpandMore';\r\nimport ChevronRightIcon from '@material-ui/icons/ChevronRight';\r\nimport { useParams } from 'react-router-dom';\r\nimport { Link } from 'react-router-dom';\r\n\r\nimport DatasetLoader from '../Nodes/DatasetLoader';\r\nimport ModelLoader from '../Nodes/ModelLoader';\r\nimport DataNormalizer from '../Nodes/DataNormalizer';\r\nimport DataPlotter from '../Nodes/DataPlotter';\r\nimport ModelEvaluator from '../Nodes/ModelEvaluator';\r\nimport DataStandardizer from '../Nodes/DataStandardizer';\r\nimport ModelPredictor from '../Nodes/ModelPredictor';\r\nimport ExeWindow from './ExeWindow';\r\n\r\n\r\nexport default function Flow(){\r\n\r\n    const {teamid} = useParams();\r\n    const {flowid} = useParams();\r\n    const {rootid} = useParams();\r\n    const {flowname} = useParams();\r\n\r\n    const [compServer, setCompServer] = useState(\"\");\r\n    \r\n    const [flowJson,setFlowJson] = useState([]);\r\n    const [flowTree, setFlowTree] = useState([]);\r\n    const [cookies] = useCookies(['user']);\r\n    const [current,setCurrent] = useState(\"\");\r\n    const [updateFlag,setUpdateFlag] = useState(false);\r\n    \r\n    const [nodes,setNodes] = useState([]);\r\n\r\n\r\n    useEffect(() => {\r\n        getFlowTree();\r\n    },[rootid] );\r\n\r\n    \r\n    useEffect(() => {\r\n        setFlowJson({...flowJson, nodes: nodes});\r\n        updateFlowVersion();\r\n    },[updateFlag]);\r\n\r\n\r\n    const getFlowTree = async () => {\r\n        const requestOptions = {\r\n            method: 'GET',\r\n            headers:{\r\n                'Authorization': 'Token ' + cookies.token,\r\n                'Content-Type': 'application/json',\r\n                'accept': 'application/json'\r\n            }\r\n            };\r\n        const response = await fetch(\"http://localhost:8000/easy_flow/v1/flow_version/\" + rootid + \"/\", requestOptions);\r\n        const data = await response.json();\r\n\r\n        setFlowTree(data);\r\n        setCurrent(rootid);\r\n    }\r\n\r\n    const getFlowJson = async(versionid) => {\r\n        const requestOptions = {\r\n            method: 'GET',\r\n            headers:{\r\n                'Authorization': 'Token ' + cookies.token,\r\n                'Content-Type': 'application/json',\r\n                'accept': 'application/json'\r\n            }\r\n            };\r\n        const response = await fetch(\"http://localhost:8000/easy_flow/v1/flow_version_json/\" + versionid + \"/\", requestOptions);\r\n        const data = await response.json();\r\n\r\n        setFlowJson(data);\r\n        setCurrent(versionid);\r\n        setNodes(data.nodes);\r\n    }\r\n\r\n    const updateFlowVersion = async() => {\r\n\r\n        if(updateFlag)\r\n        {\r\n            setUpdateFlag(0);\r\n\r\n            var flow = {\r\n                \"created_by\": cookies.id,\r\n                \"flow_version\" : current,\r\n                \"serialized_flow\": flowJson\r\n            }\r\n            \r\n            console.log(flow);\r\n\r\n            const requestOptions = {    \r\n                method: 'PUT',\r\n                headers:{\r\n                    'Authorization': 'Token ' + cookies.token,\r\n                    'Content-Type': 'application/json',\r\n                    'accept': 'application/json'\r\n                },\r\n                body: JSON.stringify(flow)\r\n            };\r\n    \r\n            const response = await fetch(\"http://localhost:8000/easy_flow/v1/flow_version_edit/\",requestOptions);\r\n            const data = await response.json();\r\n\r\n        }\r\n    }\r\n\r\n    const addComputationalServer = async() => {\r\n\r\n        var server = {\r\n            \"created_by\": cookies.id,\r\n            \"flow\": flowid,\r\n            \"remote_user\" : null,\r\n\t        \"remote_host\" : \"local\",\r\n            \"env_path\": compServer\r\n        }\r\n\r\n        const requestOptions = {\r\n            method: 'POST',\r\n            headers:{\r\n                'Authorization': 'Token ' + cookies.token,\r\n                'Content-Type': 'application/json',\r\n                'accept': 'application/json'\r\n            },\r\n            body: JSON.stringify(server)\r\n        };\r\n\r\n        const response = await fetch(\"http://localhost:8000/easy_flow/v1/comp_server_add/\",requestOptions);\r\n        const data = await response.json();\r\n\r\n        console.log(data);\r\n    }\r\n\r\n    const renderTree = (nodes) => (\r\n        <TreeItem key={nodes.id} nodeId={nodes.id} label={flowname + nodes.version} onClick={() => getFlowJson(nodes.id)}>\r\n          {Array.isArray(nodes.children) ? nodes.children.map((node) => renderTree(node)) : null}\r\n        </TreeItem>\r\n    );\r\n          \r\n    return(\r\n        <div className=\"content\" id=\"flow\">\r\n            <div className=\"leftContent\">\r\n                <div className=\"update\">\r\n                    <div>\r\n                        <TreeView\r\n                            defaultCollapseIcon={<ExpandMoreIcon />}\r\n                            defaultExpanded={['root']}\r\n                            defaultExpandIcon={<ChevronRightIcon />}\r\n                        >\r\n                            {renderTree(flowTree)}\r\n                        </TreeView>\r\n\r\n                        <Link to={`/flow/${teamid}/${flowid}/${flowname}/${rootid}/${current}/create`}>\r\n                            <p className=\"link\" >+ Flow version</p>\r\n                        </Link>\r\n                        \r\n                    </div>\r\n                    <div>\r\n                        {nodes?.map((node, index) => (\r\n                            <p>\r\n                                {node.type == \"data_normalizer\" &&\r\n                                <DataNormalizer nodes={nodes} setNodes={setNodes} setUpdateFlag={setUpdateFlag} creationFlag={false} id={index}/>}\r\n\r\n                                {node.type == \"data_plotter\" &&\r\n                                <DataPlotter nodes={nodes} setNodes={setNodes} setUpdateFlag={setUpdateFlag} creationFlag={false} id={index}/>}\r\n                                \r\n                                {node.type == \"keras_dataset_loader\" && \r\n                                <DatasetLoader nodes={nodes} setNodes={setNodes} setUpdateFlag={setUpdateFlag} creationFlag={false} id={index}/>}    \r\n\r\n                                {node.type == \"data_standardizer\" &&\r\n                                <DataStandardizer nodes={nodes} setNodes={setNodes} setUpdateFlag={setUpdateFlag} creationFlag={false} id={index}/>}\r\n                                \r\n                                {node.type == \"model_evaluator\" &&\r\n                                <ModelEvaluator nodes={nodes} setNodes={setNodes} setUpdateFlag={setUpdateFlag} creationFlag={false} id={index}/>}\r\n\r\n                                {node.type == \"model_loader\" &&  \r\n                                <ModelLoader  nodes={nodes} setNodes={setNodes} setUpdateFlag={setUpdateFlag} creationFlag={false} id={index}/>}\r\n                                \r\n                                {node.type == \"model_predictor\" &&\r\n                                <ModelPredictor nodes={flowJson.nodes} setNodes={setNodes} setUpdateFlag={setUpdateFlag} creationFlag={false} id={index}/>}\r\n\r\n                            </p>\r\n                        ))}\r\n                    </div>\r\n                </div>\r\n                <div>\r\n                    Add computational server to this flow\r\n                    <br/>\r\n                    Path: <input className=\"inputNode\" type=\"text\" value={compServer} onChange={(e) => setCompServer(e.target.value)}/>\r\n                    <br/>\r\n                    <button onClick={addComputationalServer}>Add</button>\r\n                </div>\r\n            </div>\r\n            <div className=\"exewind\">\r\n                <ExeWindow key={current} current={current}></ExeWindow>\r\n            </div>\r\n        </div>\r\n    )\r\n}","D:\\Podaci\\7. sem\\Arhitektura i projektovanje softvera\\ml-pipeline-vcs\\fe_app\\src\\Flow\\ExeWindow.jsx",["271","272","273","274","275","276","277","278","279","280","281","282","283","284"],{"ruleId":"285","replacedBy":"286"},{"ruleId":"287","replacedBy":"288"},{"ruleId":"289","severity":1,"message":"290","line":2,"column":10,"nodeType":"291","messageId":"292","endLine":2,"endColumn":19},{"ruleId":"293","severity":1,"message":"294","line":20,"column":32,"nodeType":"295","messageId":"296","endLine":20,"endColumn":34},{"ruleId":"297","severity":1,"message":"298","line":36,"column":8,"nodeType":"299","endLine":36,"endColumn":10,"suggestions":"300"},{"ruleId":"293","severity":1,"message":"294","line":40,"column":32,"nodeType":"295","messageId":"296","endLine":40,"endColumn":34},{"ruleId":"297","severity":1,"message":"301","line":45,"column":8,"nodeType":"299","endLine":45,"endColumn":21,"suggestions":"302"},{"ruleId":"293","severity":1,"message":"294","line":157,"column":22,"nodeType":"295","messageId":"296","endLine":157,"endColumn":24},{"ruleId":"293","severity":1,"message":"294","line":160,"column":22,"nodeType":"295","messageId":"296","endLine":160,"endColumn":24},{"ruleId":"293","severity":1,"message":"294","line":175,"column":47,"nodeType":"295","messageId":"296","endLine":175,"endColumn":49},{"ruleId":"293","severity":1,"message":"294","line":206,"column":48,"nodeType":"295","messageId":"296","endLine":206,"endColumn":50},{"ruleId":"293","severity":1,"message":"294","line":247,"column":47,"nodeType":"295","messageId":"296","endLine":247,"endColumn":49},{"ruleId":"293","severity":1,"message":"294","line":276,"column":48,"nodeType":"295","messageId":"296","endLine":276,"endColumn":50},{"ruleId":"293","severity":1,"message":"294","line":302,"column":41,"nodeType":"295","messageId":"296","endLine":302,"endColumn":43},{"ruleId":"293","severity":1,"message":"294","line":304,"column":72,"nodeType":"295","messageId":"296","endLine":304,"endColumn":74},{"ruleId":"293","severity":1,"message":"294","line":25,"column":32,"nodeType":"295","messageId":"296","endLine":25,"endColumn":34},{"ruleId":"297","severity":1,"message":"298","line":49,"column":8,"nodeType":"299","endLine":49,"endColumn":10,"suggestions":"303"},{"ruleId":"293","severity":1,"message":"294","line":53,"column":32,"nodeType":"295","messageId":"296","endLine":53,"endColumn":34},{"ruleId":"297","severity":1,"message":"304","line":69,"column":8,"nodeType":"299","endLine":69,"endColumn":20,"suggestions":"305"},{"ruleId":"293","severity":1,"message":"294","line":280,"column":22,"nodeType":"295","messageId":"296","endLine":280,"endColumn":24},{"ruleId":"293","severity":1,"message":"294","line":282,"column":22,"nodeType":"295","messageId":"296","endLine":282,"endColumn":24},{"ruleId":"293","severity":1,"message":"294","line":285,"column":29,"nodeType":"295","messageId":"296","endLine":285,"endColumn":31},{"ruleId":"293","severity":1,"message":"294","line":297,"column":47,"nodeType":"295","messageId":"296","endLine":297,"endColumn":49},{"ruleId":"293","severity":1,"message":"294","line":328,"column":48,"nodeType":"295","messageId":"296","endLine":328,"endColumn":50},{"ruleId":"293","severity":1,"message":"294","line":419,"column":48,"nodeType":"295","messageId":"296","endLine":419,"endColumn":50},{"ruleId":"293","severity":1,"message":"294","line":448,"column":48,"nodeType":"295","messageId":"296","endLine":448,"endColumn":50},{"ruleId":"293","severity":1,"message":"294","line":511,"column":41,"nodeType":"295","messageId":"296","endLine":511,"endColumn":43},{"ruleId":"293","severity":1,"message":"294","line":513,"column":72,"nodeType":"295","messageId":"296","endLine":513,"endColumn":74},{"ruleId":"289","severity":1,"message":"306","line":1,"column":8,"nodeType":"291","messageId":"292","endLine":1,"endColumn":19},{"ruleId":"289","severity":1,"message":"307","line":2,"column":17,"nodeType":"291","messageId":"292","endLine":2,"endColumn":27},{"ruleId":"289","severity":1,"message":"308","line":2,"column":50,"nodeType":"291","messageId":"292","endLine":2,"endColumn":69},{"ruleId":"289","severity":1,"message":"309","line":2,"column":71,"nodeType":"291","messageId":"292","endLine":2,"endColumn":82},{"ruleId":"293","severity":1,"message":"294","line":16,"column":32,"nodeType":"295","messageId":"296","endLine":16,"endColumn":34},{"ruleId":"297","severity":1,"message":"310","line":22,"column":8,"nodeType":"299","endLine":22,"endColumn":10,"suggestions":"311"},{"ruleId":"293","severity":1,"message":"294","line":26,"column":32,"nodeType":"295","messageId":"296","endLine":26,"endColumn":34},{"ruleId":"297","severity":1,"message":"312","line":30,"column":8,"nodeType":"299","endLine":30,"endColumn":21,"suggestions":"313"},{"ruleId":"293","severity":1,"message":"294","line":141,"column":22,"nodeType":"295","messageId":"296","endLine":141,"endColumn":24},{"ruleId":"293","severity":1,"message":"294","line":145,"column":22,"nodeType":"295","messageId":"296","endLine":145,"endColumn":24},{"ruleId":"293","severity":1,"message":"294","line":162,"column":47,"nodeType":"295","messageId":"296","endLine":162,"endColumn":49},{"ruleId":"293","severity":1,"message":"294","line":193,"column":48,"nodeType":"295","messageId":"296","endLine":193,"endColumn":50},{"ruleId":"293","severity":1,"message":"294","line":229,"column":47,"nodeType":"295","messageId":"296","endLine":229,"endColumn":49},{"ruleId":"293","severity":1,"message":"294","line":258,"column":48,"nodeType":"295","messageId":"296","endLine":258,"endColumn":50},{"ruleId":"293","severity":1,"message":"294","line":282,"column":41,"nodeType":"295","messageId":"296","endLine":282,"endColumn":43},{"ruleId":"293","severity":1,"message":"294","line":284,"column":72,"nodeType":"295","messageId":"296","endLine":284,"endColumn":74},{"ruleId":"293","severity":1,"message":"294","line":16,"column":32,"nodeType":"295","messageId":"296","endLine":16,"endColumn":34},{"ruleId":"297","severity":1,"message":"298","line":31,"column":8,"nodeType":"299","endLine":31,"endColumn":10,"suggestions":"314"},{"ruleId":"293","severity":1,"message":"294","line":34,"column":32,"nodeType":"295","messageId":"296","endLine":34,"endColumn":34},{"ruleId":"297","severity":1,"message":"315","line":39,"column":8,"nodeType":"299","endLine":39,"endColumn":10,"suggestions":"316"},{"ruleId":"293","severity":1,"message":"294","line":156,"column":22,"nodeType":"295","messageId":"296","endLine":156,"endColumn":24},{"ruleId":"293","severity":1,"message":"294","line":158,"column":22,"nodeType":"295","messageId":"296","endLine":158,"endColumn":24},{"ruleId":"293","severity":1,"message":"294","line":161,"column":29,"nodeType":"295","messageId":"296","endLine":161,"endColumn":31},{"ruleId":"293","severity":1,"message":"294","line":173,"column":47,"nodeType":"295","messageId":"296","endLine":173,"endColumn":49},{"ruleId":"293","severity":1,"message":"294","line":204,"column":48,"nodeType":"295","messageId":"296","endLine":204,"endColumn":50},{"ruleId":"293","severity":1,"message":"294","line":248,"column":47,"nodeType":"295","messageId":"296","endLine":248,"endColumn":49},{"ruleId":"293","severity":1,"message":"294","line":277,"column":48,"nodeType":"295","messageId":"296","endLine":277,"endColumn":50},{"ruleId":"293","severity":1,"message":"294","line":309,"column":41,"nodeType":"295","messageId":"296","endLine":309,"endColumn":43},{"ruleId":"293","severity":1,"message":"294","line":311,"column":72,"nodeType":"295","messageId":"296","endLine":311,"endColumn":74},{"ruleId":"293","severity":1,"message":"294","line":15,"column":32,"nodeType":"295","messageId":"296","endLine":15,"endColumn":34},{"ruleId":"297","severity":1,"message":"298","line":29,"column":8,"nodeType":"299","endLine":29,"endColumn":10,"suggestions":"317"},{"ruleId":"293","severity":1,"message":"294","line":33,"column":32,"nodeType":"295","messageId":"296","endLine":33,"endColumn":34},{"ruleId":"297","severity":1,"message":"312","line":38,"column":8,"nodeType":"299","endLine":38,"endColumn":21,"suggestions":"318"},{"ruleId":"293","severity":1,"message":"294","line":102,"column":22,"nodeType":"295","messageId":"296","endLine":102,"endColumn":24},{"ruleId":"293","severity":1,"message":"294","line":104,"column":22,"nodeType":"295","messageId":"296","endLine":104,"endColumn":24},{"ruleId":"293","severity":1,"message":"294","line":119,"column":47,"nodeType":"295","messageId":"296","endLine":119,"endColumn":49},{"ruleId":"293","severity":1,"message":"294","line":150,"column":48,"nodeType":"295","messageId":"296","endLine":150,"endColumn":50},{"ruleId":"293","severity":1,"message":"294","line":194,"column":47,"nodeType":"295","messageId":"296","endLine":194,"endColumn":49},{"ruleId":"293","severity":1,"message":"294","line":223,"column":48,"nodeType":"295","messageId":"296","endLine":223,"endColumn":50},{"ruleId":"293","severity":1,"message":"294","line":255,"column":41,"nodeType":"295","messageId":"296","endLine":255,"endColumn":43},{"ruleId":"293","severity":1,"message":"294","line":257,"column":72,"nodeType":"295","messageId":"296","endLine":257,"endColumn":74},{"ruleId":"293","severity":1,"message":"294","line":14,"column":32,"nodeType":"295","messageId":"296","endLine":14,"endColumn":34},{"ruleId":"297","severity":1,"message":"310","line":20,"column":8,"nodeType":"299","endLine":20,"endColumn":10,"suggestions":"319"},{"ruleId":"293","severity":1,"message":"294","line":24,"column":32,"nodeType":"295","messageId":"296","endLine":24,"endColumn":34},{"ruleId":"297","severity":1,"message":"312","line":28,"column":7,"nodeType":"299","endLine":28,"endColumn":20,"suggestions":"320"},{"ruleId":"293","severity":1,"message":"294","line":89,"column":21,"nodeType":"295","messageId":"296","endLine":89,"endColumn":23},{"ruleId":"293","severity":1,"message":"294","line":91,"column":26,"nodeType":"295","messageId":"296","endLine":91,"endColumn":28},{"ruleId":"293","severity":1,"message":"294","line":106,"column":47,"nodeType":"295","messageId":"296","endLine":106,"endColumn":49},{"ruleId":"293","severity":1,"message":"294","line":137,"column":48,"nodeType":"295","messageId":"296","endLine":137,"endColumn":50},{"ruleId":"293","severity":1,"message":"294","line":171,"column":47,"nodeType":"295","messageId":"296","endLine":171,"endColumn":49},{"ruleId":"293","severity":1,"message":"294","line":200,"column":48,"nodeType":"295","messageId":"296","endLine":200,"endColumn":50},{"ruleId":"293","severity":1,"message":"294","line":224,"column":41,"nodeType":"295","messageId":"296","endLine":224,"endColumn":43},{"ruleId":"293","severity":1,"message":"294","line":226,"column":72,"nodeType":"295","messageId":"296","endLine":226,"endColumn":74},{"ruleId":"293","severity":1,"message":"294","line":15,"column":32,"nodeType":"295","messageId":"296","endLine":15,"endColumn":34},{"ruleId":"297","severity":1,"message":"298","line":30,"column":8,"nodeType":"299","endLine":30,"endColumn":10,"suggestions":"321"},{"ruleId":"293","severity":1,"message":"294","line":34,"column":32,"nodeType":"295","messageId":"296","endLine":34,"endColumn":34},{"ruleId":"297","severity":1,"message":"322","line":39,"column":8,"nodeType":"299","endLine":39,"endColumn":21,"suggestions":"323"},{"ruleId":"293","severity":1,"message":"294","line":152,"column":22,"nodeType":"295","messageId":"296","endLine":152,"endColumn":24},{"ruleId":"293","severity":1,"message":"294","line":154,"column":22,"nodeType":"295","messageId":"296","endLine":154,"endColumn":24},{"ruleId":"293","severity":1,"message":"294","line":157,"column":29,"nodeType":"295","messageId":"296","endLine":157,"endColumn":31},{"ruleId":"293","severity":1,"message":"294","line":169,"column":47,"nodeType":"295","messageId":"296","endLine":169,"endColumn":49},{"ruleId":"293","severity":1,"message":"294","line":200,"column":48,"nodeType":"295","messageId":"296","endLine":200,"endColumn":50},{"ruleId":"293","severity":1,"message":"294","line":242,"column":48,"nodeType":"295","messageId":"296","endLine":242,"endColumn":50},{"ruleId":"293","severity":1,"message":"294","line":271,"column":48,"nodeType":"295","messageId":"296","endLine":271,"endColumn":50},{"ruleId":"293","severity":1,"message":"294","line":303,"column":41,"nodeType":"295","messageId":"296","endLine":303,"endColumn":43},{"ruleId":"293","severity":1,"message":"294","line":305,"column":72,"nodeType":"295","messageId":"296","endLine":305,"endColumn":74},{"ruleId":"324","severity":1,"message":"325","line":68,"column":25,"nodeType":"326","endLine":68,"endColumn":45},{"ruleId":"293","severity":1,"message":"294","line":46,"column":18,"nodeType":"295","messageId":"296","endLine":46,"endColumn":20},{"ruleId":"289","severity":1,"message":"327","line":10,"column":12,"nodeType":"291","messageId":"292","endLine":10,"endColumn":19},{"ruleId":"289","severity":1,"message":"328","line":10,"column":33,"nodeType":"291","messageId":"292","endLine":10,"endColumn":46},{"ruleId":"289","severity":1,"message":"329","line":1,"column":17,"nodeType":"291","messageId":"292","endLine":1,"endColumn":26},{"ruleId":"289","severity":1,"message":"330","line":1,"column":27,"nodeType":"291","messageId":"292","endLine":1,"endColumn":37},{"ruleId":"289","severity":1,"message":"331","line":2,"column":27,"nodeType":"291","messageId":"292","endLine":2,"endColumn":33},{"ruleId":"289","severity":1,"message":"332","line":2,"column":35,"nodeType":"291","messageId":"292","endLine":2,"endColumn":41},{"ruleId":"289","severity":1,"message":"333","line":2,"column":43,"nodeType":"291","messageId":"292","endLine":2,"endColumn":48},{"ruleId":"289","severity":1,"message":"334","line":3,"column":10,"nodeType":"291","messageId":"292","endLine":3,"endColumn":14},{"ruleId":"289","severity":1,"message":"335","line":11,"column":12,"nodeType":"291","messageId":"292","endLine":11,"endColumn":20},{"ruleId":"289","severity":1,"message":"336","line":11,"column":21,"nodeType":"291","messageId":"292","endLine":11,"endColumn":32},{"ruleId":"289","severity":1,"message":"337","line":12,"column":12,"nodeType":"291","messageId":"292","endLine":12,"endColumn":16},{"ruleId":"289","severity":1,"message":"338","line":12,"column":17,"nodeType":"291","messageId":"292","endLine":12,"endColumn":24},{"ruleId":"297","severity":1,"message":"339","line":15,"column":7,"nodeType":"299","endLine":15,"endColumn":9,"suggestions":"340"},{"ruleId":"297","severity":1,"message":"341","line":33,"column":7,"nodeType":"299","endLine":33,"endColumn":15,"suggestions":"342"},{"ruleId":"289","severity":1,"message":"343","line":56,"column":15,"nodeType":"291","messageId":"292","endLine":56,"endColumn":19},{"ruleId":"293","severity":1,"message":"294","line":98,"column":25,"nodeType":"295","messageId":"296","endLine":98,"endColumn":27},{"ruleId":"289","severity":1,"message":"329","line":1,"column":17,"nodeType":"291","messageId":"292","endLine":1,"endColumn":26},{"ruleId":"289","severity":1,"message":"330","line":1,"column":36,"nodeType":"291","messageId":"292","endLine":1,"endColumn":46},{"ruleId":"297","severity":1,"message":"344","line":47,"column":7,"nodeType":"299","endLine":47,"endColumn":13,"suggestions":"345"},{"ruleId":"293","severity":1,"message":"294","line":106,"column":36,"nodeType":"295","messageId":"296","endLine":106,"endColumn":38},{"ruleId":"293","severity":1,"message":"294","line":109,"column":36,"nodeType":"295","messageId":"296","endLine":109,"endColumn":38},{"ruleId":"293","severity":1,"message":"294","line":112,"column":36,"nodeType":"295","messageId":"296","endLine":112,"endColumn":38},{"ruleId":"293","severity":1,"message":"294","line":115,"column":36,"nodeType":"295","messageId":"296","endLine":115,"endColumn":38},{"ruleId":"293","severity":1,"message":"294","line":118,"column":36,"nodeType":"295","messageId":"296","endLine":118,"endColumn":38},{"ruleId":"293","severity":1,"message":"294","line":121,"column":36,"nodeType":"295","messageId":"296","endLine":121,"endColumn":38},{"ruleId":"293","severity":1,"message":"294","line":124,"column":36,"nodeType":"295","messageId":"296","endLine":124,"endColumn":38},{"ruleId":"289","severity":1,"message":"307","line":1,"column":17,"nodeType":"291","messageId":"292","endLine":1,"endColumn":27},{"ruleId":"289","severity":1,"message":"346","line":1,"column":29,"nodeType":"291","messageId":"292","endLine":1,"endColumn":35},{"ruleId":"289","severity":1,"message":"308","line":1,"column":56,"nodeType":"291","messageId":"292","endLine":1,"endColumn":75},{"ruleId":"289","severity":1,"message":"347","line":4,"column":8,"nodeType":"291","messageId":"292","endLine":4,"endColumn":16},{"ruleId":"289","severity":1,"message":"348","line":5,"column":8,"nodeType":"291","messageId":"292","endLine":5,"endColumn":16},{"ruleId":"289","severity":1,"message":"349","line":6,"column":8,"nodeType":"291","messageId":"292","endLine":6,"endColumn":22},{"ruleId":"289","severity":1,"message":"350","line":7,"column":8,"nodeType":"291","messageId":"292","endLine":7,"endColumn":24},{"ruleId":"297","severity":1,"message":"344","line":51,"column":7,"nodeType":"299","endLine":51,"endColumn":13,"suggestions":"351"},{"ruleId":"293","severity":1,"message":"294","line":111,"column":36,"nodeType":"295","messageId":"296","endLine":111,"endColumn":38},{"ruleId":"293","severity":1,"message":"294","line":114,"column":36,"nodeType":"295","messageId":"296","endLine":114,"endColumn":38},{"ruleId":"293","severity":1,"message":"294","line":117,"column":36,"nodeType":"295","messageId":"296","endLine":117,"endColumn":38},{"ruleId":"293","severity":1,"message":"294","line":120,"column":36,"nodeType":"295","messageId":"296","endLine":120,"endColumn":38},{"ruleId":"293","severity":1,"message":"294","line":123,"column":36,"nodeType":"295","messageId":"296","endLine":123,"endColumn":38},{"ruleId":"293","severity":1,"message":"294","line":126,"column":36,"nodeType":"295","messageId":"296","endLine":126,"endColumn":38},{"ruleId":"293","severity":1,"message":"294","line":129,"column":36,"nodeType":"295","messageId":"296","endLine":129,"endColumn":38},{"ruleId":"289","severity":1,"message":"352","line":7,"column":8,"nodeType":"291","messageId":"292","endLine":7,"endColumn":18},{"ruleId":"289","severity":1,"message":"353","line":8,"column":8,"nodeType":"291","messageId":"292","endLine":8,"endColumn":12},{"ruleId":"289","severity":1,"message":"354","line":15,"column":12,"nodeType":"291","messageId":"292","endLine":15,"endColumn":16},{"ruleId":"297","severity":1,"message":"341","line":20,"column":7,"nodeType":"299","endLine":20,"endColumn":9,"suggestions":"355"},{"ruleId":"297","severity":1,"message":"356","line":41,"column":7,"nodeType":"299","endLine":41,"endColumn":15,"suggestions":"357"},{"ruleId":"297","severity":1,"message":"358","line":47,"column":7,"nodeType":"299","endLine":47,"endColumn":19,"suggestions":"359"},{"ruleId":"289","severity":1,"message":"343","line":108,"column":19,"nodeType":"291","messageId":"292","endLine":108,"endColumn":23},{"ruleId":"293","severity":1,"message":"294","line":166,"column":44,"nodeType":"295","messageId":"296","endLine":166,"endColumn":46},{"ruleId":"293","severity":1,"message":"294","line":169,"column":44,"nodeType":"295","messageId":"296","endLine":169,"endColumn":46},{"ruleId":"293","severity":1,"message":"294","line":172,"column":44,"nodeType":"295","messageId":"296","endLine":172,"endColumn":46},{"ruleId":"293","severity":1,"message":"294","line":175,"column":44,"nodeType":"295","messageId":"296","endLine":175,"endColumn":46},{"ruleId":"293","severity":1,"message":"294","line":178,"column":44,"nodeType":"295","messageId":"296","endLine":178,"endColumn":46},{"ruleId":"293","severity":1,"message":"294","line":181,"column":44,"nodeType":"295","messageId":"296","endLine":181,"endColumn":46},{"ruleId":"293","severity":1,"message":"294","line":184,"column":44,"nodeType":"295","messageId":"296","endLine":184,"endColumn":46},{"ruleId":"289","severity":1,"message":"360","line":10,"column":12,"nodeType":"291","messageId":"292","endLine":10,"endColumn":18},{"ruleId":"297","severity":1,"message":"339","line":29,"column":7,"nodeType":"299","endLine":29,"endColumn":15,"suggestions":"361"},{"ruleId":"293","severity":1,"message":"362","line":47,"column":31,"nodeType":"295","messageId":"296","endLine":47,"endColumn":33},{"ruleId":"297","severity":1,"message":"363","line":50,"column":7,"nodeType":"299","endLine":50,"endColumn":27,"suggestions":"364"},{"ruleId":"293","severity":1,"message":"362","line":55,"column":17,"nodeType":"295","messageId":"296","endLine":55,"endColumn":19},{"ruleId":"297","severity":1,"message":"341","line":70,"column":7,"nodeType":"299","endLine":70,"endColumn":15,"suggestions":"365"},{"ruleId":"293","severity":1,"message":"362","line":88,"column":17,"nodeType":"295","messageId":"296","endLine":88,"endColumn":19},{"ruleId":"297","severity":1,"message":"366","line":90,"column":7,"nodeType":"299","endLine":90,"endColumn":13,"suggestions":"367"},{"ruleId":"293","severity":1,"message":"362","line":95,"column":24,"nodeType":"295","messageId":"296","endLine":95,"endColumn":26},{"ruleId":"293","severity":1,"message":"294","line":97,"column":21,"nodeType":"295","messageId":"296","endLine":97,"endColumn":23},{"ruleId":"297","severity":1,"message":"368","line":110,"column":7,"nodeType":"299","endLine":110,"endColumn":15,"suggestions":"369"},{"ruleId":"293","severity":1,"message":"362","line":128,"column":17,"nodeType":"295","messageId":"296","endLine":128,"endColumn":19},{"ruleId":"297","severity":1,"message":"370","line":131,"column":7,"nodeType":"299","endLine":131,"endColumn":13,"suggestions":"371"},{"ruleId":"289","severity":1,"message":"343","line":167,"column":15,"nodeType":"291","messageId":"292","endLine":167,"endColumn":19},"no-native-reassign",["372"],"no-negated-in-lhs",["373"],"no-unused-vars","'useParams' is defined but never used.","Identifier","unusedVar","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'props'. Either include it or remove the dependency array. However, 'props' will change when *any* prop changes, so the preferred fix is to destructure the 'props' object outside of the useEffect call and refer to those specific props inside useEffect.","ArrayExpression",["374"],"React Hook useEffect has missing dependencies: 'props.creationFlag' and 'props.id'. Either include them or remove the dependency array. If 'setDataset' needs the current value of 'props.id', you can also switch to useReducer instead of useState and read 'props.id' in the reducer.",["375"],["376"],"React Hook useEffect has missing dependencies: 'props.creationFlag', 'props.id', and 'props.nodes'. Either include them or remove the dependency array. If 'setPath' needs the current value of 'props.nodes', you can also switch to useReducer instead of useState and read 'props.nodes' in the reducer.",["377"],"'SelectInput' is defined but never used.","'forwardRef' is defined but never used.","'useImperativeHandle' is defined but never used.","'useCallback' is defined but never used.","React Hook useEffect has a missing dependency: 'props.creationFlag'. Either include it or remove the dependency array.",["378"],"React Hook useEffect has missing dependencies: 'props.creationFlag' and 'props.id'. Either include them or remove the dependency array. If 'setInput' needs the current value of 'props.id', you can also switch to useReducer instead of useState and read 'props.id' in the reducer.",["379"],["380"],"React Hook useEffect has missing dependencies: 'props.creationFlag', 'props.id', and 'props.nodes'. Either include them or remove the dependency array. If 'setIndex' needs the current value of 'props.nodes', you can also switch to useReducer instead of useState and read 'props.nodes' in the reducer.",["381"],["382"],["383"],["384"],["385"],["386"],"React Hook useEffect has missing dependencies: 'props.creationFlag' and 'props.id'. Either include them or remove the dependency array. If 'setIndex' needs the current value of 'props.id', you can also switch to useReducer instead of useState and read 'props.id' in the reducer.",["387"],"jsx-a11y/anchor-is-valid","The href attribute is required for an anchor to be keyboard accessible. Provide a valid, navigable address as the href value. If you cannot provide an href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","JSXOpeningElement","'cookies' is assigned a value but never used.","'removeCookies' is assigned a value but never used.","'useEffect' is defined but never used.","'useReducer' is defined but never used.","'Router' is defined but never used.","'Switch' is defined but never used.","'Route' is defined but never used.","'Link' is defined but never used.","'flowJson' is assigned a value but never used.","'setFlowJson' is assigned a value but never used.","'flow' is assigned a value but never used.","'setFlow' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'getUser'. Either include it or remove the dependency array.",["388"],"React Hook useEffect has a missing dependency: 'getTeam'. Either include it or remove the dependency array.",["389"],"'data' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'createFlowVersion' and 'isMount'. Either include them or remove the dependency array.",["390"],"'useRef' is defined but never used.","'TreeView' is defined but never used.","'TreeItem' is defined but never used.","'ExpandMoreIcon' is defined but never used.","'ChevronRightIcon' is defined but never used.",["391"],"'FlowCreate' is defined but never used.","'Flow' is defined but never used.","'team' is assigned a value but never used.",["392"],"React Hook useEffect has a missing dependency: 'getFlowTree'. Either include it or remove the dependency array.",["393"],"React Hook useEffect has missing dependencies: 'flowJson', 'nodes', and 'updateFlowVersion'. Either include them or remove the dependency array. You can also do a functional update 'setFlowJson(f => ...)' if you only need 'flowJson' in the 'setFlowJson' call.",["394"],"'rootid' is assigned a value but never used.",["395"],"Expected '!==' and instead saw '!='.","React Hook useEffect has a missing dependency: 'getRequests'. Either include it or remove the dependency array.",["396"],["397"],"React Hook useEffect has a missing dependency: 'getPermissions'. Either include it or remove the dependency array.",["398"],"React Hook useEffect has a missing dependency: 'getFlow'. Either include it or remove the dependency array.",["399"],"React Hook useEffect has a missing dependency: 'getServers'. Either include it or remove the dependency array.",["400"],"no-global-assign","no-unsafe-negation",{"desc":"401","fix":"402"},{"desc":"403","fix":"404"},{"desc":"401","fix":"405"},{"desc":"406","fix":"407"},{"desc":"408","fix":"409"},{"desc":"403","fix":"410"},{"desc":"401","fix":"411"},{"desc":"403","fix":"412"},{"desc":"401","fix":"413"},{"desc":"403","fix":"414"},{"desc":"408","fix":"415"},{"desc":"403","fix":"416"},{"desc":"401","fix":"417"},{"desc":"403","fix":"418"},{"desc":"419","fix":"420"},{"desc":"421","fix":"422"},{"desc":"423","fix":"424"},{"desc":"423","fix":"425"},{"desc":"426","fix":"427"},{"desc":"428","fix":"429"},{"desc":"430","fix":"431"},{"desc":"432","fix":"433"},{"desc":"434","fix":"435"},{"desc":"421","fix":"436"},{"desc":"437","fix":"438"},{"desc":"439","fix":"440"},{"desc":"441","fix":"442"},"Update the dependencies array to be: [props]",{"range":"443","text":"444"},"Update the dependencies array to be: [props.creationFlag, props.id, props.nodes]",{"range":"445","text":"446"},{"range":"447","text":"444"},"Update the dependencies array to be: [props.creationFlag, props.id, props.node, props.nodes]",{"range":"448","text":"449"},"Update the dependencies array to be: [props.creationFlag]",{"range":"450","text":"451"},{"range":"452","text":"446"},{"range":"453","text":"444"},{"range":"454","text":"446"},{"range":"455","text":"444"},{"range":"456","text":"446"},{"range":"457","text":"451"},{"range":"458","text":"446"},{"range":"459","text":"444"},{"range":"460","text":"446"},"Update the dependencies array to be: [getUser]",{"range":"461","text":"462"},"Update the dependencies array to be: [getTeam, teamid]",{"range":"463","text":"464"},"Update the dependencies array to be: [createFlowVersion, flow, isMount]",{"range":"465","text":"466"},{"range":"467","text":"466"},"Update the dependencies array to be: [getTeam]",{"range":"468","text":"469"},"Update the dependencies array to be: [getFlowTree, rootid]",{"range":"470","text":"471"},"Update the dependencies array to be: [flowJson, nodes, updateFlag, updateFlowVersion]",{"range":"472","text":"473"},"Update the dependencies array to be: [flowid, getUser]",{"range":"474","text":"475"},"Update the dependencies array to be: [getRequests, user.sent_requests]",{"range":"476","text":"477"},{"range":"478","text":"464"},"Update the dependencies array to be: [getPermissions, team]",{"range":"479","text":"480"},"Update the dependencies array to be: [flowid, getFlow]",{"range":"481","text":"482"},"Update the dependencies array to be: [flow, getServers]",{"range":"483","text":"484"},[957,959],"[props]",[1236,1249],"[props.creationFlag, props.id, props.nodes]",[1481,1483],[2341,2353],"[props.creationFlag, props.id, props.node, props.nodes]",[616,618],"[props.creationFlag]",[827,840],[763,765],[1034,1036],[762,764],[1036,1049],[499,501],[713,726],[736,738],[1009,1022],[438,440],"[getUser]",[1016,1024],"[getTeam, teamid]",[1407,1413],"[createFlowVersion, flow, isMount]",[1642,1648],[554,556],"[getTeam]",[1452,1460],"[getFlowTree, rootid]",[1583,1595],"[flowJson, nodes, updateFlag, updateFlowVersion]",[896,904],"[flowid, getUser]",[1537,1557],"[getRequests, user.sent_requests]",[1897,1905],[2506,2512],"[getPermissions, team]",[2819,2827],"[flowid, getFlow]",[3434,3440],"[flow, getServers]"]