[{"D:\\Podaci\\7. sem\\Arhitektura i projektovanje softvera\\ml-pipeline-vcs\\fe_app\\src\\index.js":"1","D:\\Podaci\\7. sem\\Arhitektura i projektovanje softvera\\ml-pipeline-vcs\\fe_app\\src\\reportWebVitals.js":"2","D:\\Podaci\\7. sem\\Arhitektura i projektovanje softvera\\ml-pipeline-vcs\\fe_app\\src\\App.js":"3","D:\\Podaci\\7. sem\\Arhitektura i projektovanje softvera\\ml-pipeline-vcs\\fe_app\\src\\Nodes\\DatasetLoader.jsx":"4","D:\\Podaci\\7. sem\\Arhitektura i projektovanje softvera\\ml-pipeline-vcs\\fe_app\\src\\Nodes\\ModelLoader.jsx":"5","D:\\Podaci\\7. sem\\Arhitektura i projektovanje softvera\\ml-pipeline-vcs\\fe_app\\src\\Nodes\\DataNormalizer.jsx":"6","D:\\Podaci\\7. sem\\Arhitektura i projektovanje softvera\\ml-pipeline-vcs\\fe_app\\src\\Nodes\\DataPlotter.jsx":"7","D:\\Podaci\\7. sem\\Arhitektura i projektovanje softvera\\ml-pipeline-vcs\\fe_app\\src\\Nodes\\ModelEvaluator.jsx":"8","D:\\Podaci\\7. sem\\Arhitektura i projektovanje softvera\\ml-pipeline-vcs\\fe_app\\src\\Nodes\\DataStandardizer.jsx":"9","D:\\Podaci\\7. sem\\Arhitektura i projektovanje softvera\\ml-pipeline-vcs\\fe_app\\src\\Nodes\\ModelPredictor.jsx":"10","D:\\Podaci\\7. sem\\Arhitektura i projektovanje softvera\\ml-pipeline-vcs\\fe_app\\src\\Main\\Main.jsx":"11","D:\\Podaci\\7. sem\\Arhitektura i projektovanje softvera\\ml-pipeline-vcs\\fe_app\\src\\Main\\Header.jsx":"12","D:\\Podaci\\7. sem\\Arhitektura i projektovanje softvera\\ml-pipeline-vcs\\fe_app\\src\\Home\\About.jsx":"13","D:\\Podaci\\7. sem\\Arhitektura i projektovanje softvera\\ml-pipeline-vcs\\fe_app\\src\\Home\\Home.jsx":"14","D:\\Podaci\\7. sem\\Arhitektura i projektovanje softvera\\ml-pipeline-vcs\\fe_app\\src\\Home\\LogIn.js":"15","D:\\Podaci\\7. sem\\Arhitektura i projektovanje softvera\\ml-pipeline-vcs\\fe_app\\src\\Home\\SignUp.js":"16","D:\\Podaci\\7. sem\\Arhitektura i projektovanje softvera\\ml-pipeline-vcs\\fe_app\\src\\UserStart\\UserProfil.jsx":"17","D:\\Podaci\\7. sem\\Arhitektura i projektovanje softvera\\ml-pipeline-vcs\\fe_app\\src\\UserStart\\Start.js":"18","D:\\Podaci\\7. sem\\Arhitektura i projektovanje softvera\\ml-pipeline-vcs\\fe_app\\src\\UserStart\\Team.jsx":"19","D:\\Podaci\\7. sem\\Arhitektura i projektovanje softvera\\ml-pipeline-vcs\\fe_app\\src\\UserStart\\TeamCreate.jsx":"20","D:\\Podaci\\7. sem\\Arhitektura i projektovanje softvera\\ml-pipeline-vcs\\fe_app\\src\\Flow\\FlowCreate.jsx":"21","D:\\Podaci\\7. sem\\Arhitektura i projektovanje softvera\\ml-pipeline-vcs\\fe_app\\src\\Flow\\FlowVersionCreate.jsx":"22","D:\\Podaci\\7. sem\\Arhitektura i projektovanje softvera\\ml-pipeline-vcs\\fe_app\\src\\Flow\\FlowContainer.jsx":"23","D:\\Podaci\\7. sem\\Arhitektura i projektovanje softvera\\ml-pipeline-vcs\\fe_app\\src\\Flow\\Flow.jsx":"24","D:\\Podaci\\7. sem\\Arhitektura i projektovanje softvera\\ml-pipeline-vcs\\fe_app\\src\\Flow\\ExeWindow.jsx":"25","D:\\Podaci\\7. sem\\Arhitektura i projektovanje softvera\\ml-pipeline-vcs\\fe_app\\src\\Chat\\Chat.jsx":"26"},{"size":500,"mtime":499162500000,"results":"27","hashOfConfig":"28"},{"size":362,"mtime":499162500000,"results":"29","hashOfConfig":"28"},{"size":2389,"mtime":1621882111141,"results":"30","hashOfConfig":"28"},{"size":12078,"mtime":1621796189747,"results":"31","hashOfConfig":"28"},{"size":20912,"mtime":1621796950379,"results":"32","hashOfConfig":"28"},{"size":11465,"mtime":1621806761132,"results":"33","hashOfConfig":"28"},{"size":12240,"mtime":1621796219801,"results":"34","hashOfConfig":"28"},{"size":12116,"mtime":1621796367563,"results":"35","hashOfConfig":"28"},{"size":9654,"mtime":1621796330865,"results":"36","hashOfConfig":"28"},{"size":12094,"mtime":1621796381994,"results":"37","hashOfConfig":"28"},{"size":257,"mtime":1619115102024,"results":"38","hashOfConfig":"28"},{"size":2198,"mtime":1619524976381,"results":"39","hashOfConfig":"28"},{"size":407,"mtime":1620143752810,"results":"40","hashOfConfig":"28"},{"size":1262,"mtime":1620143263057,"results":"41","hashOfConfig":"28"},{"size":2252,"mtime":1621682262277,"results":"42","hashOfConfig":"28"},{"size":3046,"mtime":1621682294546,"results":"43","hashOfConfig":"28"},{"size":2004,"mtime":1620144120062,"results":"44","hashOfConfig":"28"},{"size":2701,"mtime":1621685224096,"results":"45","hashOfConfig":"28"},{"size":4918,"mtime":1621685756808,"results":"46","hashOfConfig":"28"},{"size":1471,"mtime":1618942576768,"results":"47","hashOfConfig":"28"},{"size":5622,"mtime":1621794794598,"results":"48","hashOfConfig":"28"},{"size":6239,"mtime":1621794825788,"results":"49","hashOfConfig":"28"},{"size":1887,"mtime":1620228623139,"results":"50","hashOfConfig":"28"},{"size":8041,"mtime":1621797080880,"results":"51","hashOfConfig":"28"},{"size":8026,"mtime":1621808348826,"results":"52","hashOfConfig":"28"},{"size":459,"mtime":1621882257843,"results":"53","hashOfConfig":"28"},{"filePath":"54","messages":"55","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},"wp5s2w",{"filePath":"57","messages":"58","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"59","messages":"60","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"61","messages":"62","errorCount":0,"warningCount":12,"fixableErrorCount":0,"fixableWarningCount":0,"source":"63","usedDeprecatedRules":"56"},{"filePath":"64","messages":"65","errorCount":0,"warningCount":13,"fixableErrorCount":0,"fixableWarningCount":0,"source":"66","usedDeprecatedRules":"56"},{"filePath":"67","messages":"68","errorCount":0,"warningCount":15,"fixableErrorCount":0,"fixableWarningCount":0,"source":"69","usedDeprecatedRules":"56"},{"filePath":"70","messages":"71","errorCount":0,"warningCount":12,"fixableErrorCount":0,"fixableWarningCount":0,"source":"72","usedDeprecatedRules":"56"},{"filePath":"73","messages":"74","errorCount":0,"warningCount":12,"fixableErrorCount":0,"fixableWarningCount":0,"source":"75","usedDeprecatedRules":"56"},{"filePath":"76","messages":"77","errorCount":0,"warningCount":11,"fixableErrorCount":0,"fixableWarningCount":0,"source":"78","usedDeprecatedRules":"56"},{"filePath":"79","messages":"80","errorCount":0,"warningCount":12,"fixableErrorCount":0,"fixableWarningCount":0,"source":"81","usedDeprecatedRules":"56"},{"filePath":"82","messages":"83","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"84","messages":"85","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"86","usedDeprecatedRules":"56"},{"filePath":"87","messages":"88","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"89","messages":"90","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"91","usedDeprecatedRules":"56"},{"filePath":"92","messages":"93","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"94","usedDeprecatedRules":"56"},{"filePath":"95","messages":"96","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"97","usedDeprecatedRules":"56"},{"filePath":"98","messages":"99","errorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"100","usedDeprecatedRules":"56"},{"filePath":"101","messages":"102","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"103","usedDeprecatedRules":"56"},{"filePath":"104","messages":"105","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"106","usedDeprecatedRules":"56"},{"filePath":"107","messages":"108","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"109","usedDeprecatedRules":"56"},{"filePath":"110","messages":"111","errorCount":0,"warningCount":11,"fixableErrorCount":0,"fixableWarningCount":0,"source":"112","usedDeprecatedRules":"56"},{"filePath":"113","messages":"114","errorCount":0,"warningCount":18,"fixableErrorCount":0,"fixableWarningCount":0,"source":"115","usedDeprecatedRules":"56"},{"filePath":"116","messages":"117","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"118","usedDeprecatedRules":"56"},{"filePath":"119","messages":"120","errorCount":0,"warningCount":12,"fixableErrorCount":0,"fixableWarningCount":0,"source":"121","usedDeprecatedRules":"56"},{"filePath":"122","messages":"123","errorCount":0,"warningCount":13,"fixableErrorCount":0,"fixableWarningCount":0,"source":"124","usedDeprecatedRules":"56"},{"filePath":"125","messages":"126","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"D:\\Podaci\\7. sem\\Arhitektura i projektovanje softvera\\ml-pipeline-vcs\\fe_app\\src\\index.js",[],["127","128"],"D:\\Podaci\\7. sem\\Arhitektura i projektovanje softvera\\ml-pipeline-vcs\\fe_app\\src\\reportWebVitals.js",[],"D:\\Podaci\\7. sem\\Arhitektura i projektovanje softvera\\ml-pipeline-vcs\\fe_app\\src\\App.js",[],"D:\\Podaci\\7. sem\\Arhitektura i projektovanje softvera\\ml-pipeline-vcs\\fe_app\\src\\Nodes\\DatasetLoader.jsx",["129","130","131","132","133","134","135","136","137","138","139","140"],"import React, { useEffect, useState } from 'react';\r\nimport { useParams } from \"react-router-dom\";\r\nimport \"../Flow/Flow.css\";\r\n\r\nexport default function DatasetLoader(props) {\r\n\r\n\r\n    const [update, setUpdate] = useState(0);\r\n    const [details, setDetails] = useState(0);\r\n\r\n    const [items] = useState([\r\n        \"mnist\", \"cifra10\", \"cifra100\", \"imdb\", \"reuters\", \"fashion_mnist\", \"boston_housing\"\r\n    ])\r\n    const [dataset, setDataset] = useState();\r\n    const [input, setInput] = useState([]);\r\n    const [output, setOutput] = useState([]);\r\n\r\n\r\n    useEffect(() => {\r\n        if (props.creationFlag == true) {\r\n            setUpdate(true);\r\n\r\n            if(props.nodes[props.id].available_params == null) {\r\n                //mesto za dodavanje parametara\r\n                \r\n                let nodes = [...props.nodes];\r\n\r\n                nodes[props.id].available_params = [\"dataset\"];\r\n                nodes[props.id].params = {\r\n                    \"dataset\": \"mnist\"\r\n                }\r\n\r\n\r\n                props.setNodes(nodes);\r\n            }\r\n            \r\n        }\r\n\r\n    }, []);\r\n\r\n\r\n    useEffect(() => {\r\n        //if (props.creationFlag == false) {\r\n            setDataset(props.nodes[props.id]?.params[\"dataset\"]);\r\n            setInput(props.nodes[props.id].input_keys);\r\n            setOutput(props.nodes[props.id]?.output_keys);\r\n        //}\r\n    }, [props.nodes]);\r\n\r\n\r\n    const onChange = () => {\r\n        setUpdate(!update);\r\n        if (update) {\r\n            \r\n            let nodes = props.nodes;\r\n            nodes[props.id].input_keys = input;\r\n            nodes[props.id].output_keys = output;\r\n            nodes[props.id].params[\"dataset\"] = dataset;\r\n\r\n            props.setNodes(nodes);\r\n\r\n            props.setUpdateFlag(1);\r\n        }\r\n    }\r\n\r\n    const deleteNode = () => {\r\n        let nodes = [...props.nodes];\r\n        nodes.splice(props.id,1);\r\n        props.setNodes(nodes);\r\n        console.log(nodes);\r\n    }\r\n\r\n    const addInput = () => {\r\n\r\n        let temp = [...input];\r\n        temp.push(\"null\");\r\n        setInput(temp);\r\n\r\n        if (props.creationFlag) {\r\n\r\n            let nodes = [...props.nodes];\r\n            nodes[props.id].input_keys = temp;\r\n            props.setNodes(nodes);\r\n        }\r\n\r\n    }\r\n    const removeInput = (index) => {\r\n        var temp = [...input];\r\n        temp.splice(index, 1);\r\n        setInput(temp);\r\n\r\n        if (props.creationFlag) {\r\n\r\n            let nodes = [...props.nodes];\r\n            nodes[props.id].input_keys = temp;\r\n            props.setNodes(nodes);\r\n        }\r\n    }\r\n\r\n    const changeInput = (index, e) => {\r\n        var temp = [...input];\r\n        temp[index] = e.target.value;\r\n        setInput(temp);\r\n\r\n\r\n        if (props.creationFlag) {\r\n\r\n            let nodes = [...props.nodes];\r\n            nodes[props.id].input_keys = temp;\r\n            props.setNodes(nodes);\r\n        }\r\n    }\r\n\r\n    const addOutput = () => {\r\n\r\n        let temp = [...output];\r\n        temp.push(\"null\");\r\n        setOutput(temp);\r\n\r\n        if (props.creationFlag) {\r\n\r\n            let nodes = [...props.nodes];\r\n            nodes[props.id].output_keys = temp;\r\n            props.setNodes(nodes);\r\n        }\r\n    }\r\n\r\n    const removeOutput = (index) => {\r\n        var temp = [...output];\r\n        temp.splice(index, 1);\r\n        setOutput(temp);\r\n\r\n        if (props.creationFlag) {\r\n\r\n            let nodes = [...props.nodes];\r\n            nodes[props.id].output_keys = temp;\r\n            props.setNodes(nodes);\r\n        }\r\n    }\r\n\r\n    const changeOutput = (index, e) => {\r\n        var temp = [...output];\r\n        temp[index] = e.target.value;\r\n        setOutput(temp);\r\n\r\n        if (props.creationFlag) {\r\n\r\n            let nodes = [...props.nodes];\r\n            nodes[props.id].output_keys = temp;\r\n            props.setNodes(nodes);\r\n        }\r\n    }\r\n\r\n    const changeDataset = (e) => {\r\n        setDataset(e.currentTarget.value);\r\n        console.log(e.currentTarget.value);\r\n        if(props.creationFlag){\r\n            let nodes = [...props.nodes];\r\n            nodes[props.id].params[\"dataset\"] = e.target.value;\r\n            props.setNodes(nodes);\r\n        }\r\n    }\r\n\r\n\r\n    return (\r\n        <div className=\"node\">\r\n            {details == 0 && <br />}\r\n            <span onClick={() => setDetails(!details)}>\r\n                <b>DatasetLoader </b>\r\n                {props.creationFlag &&\r\n                    <button onClick={() => deleteNode()}>-\r\n                    </button>}\r\n            </span>\r\n            {details == 1 &&\r\n                <div>\r\n                    <hr></hr>\r\n                    {update ?\r\n                        <>\r\n                            <table className=\"NodeTable\">\r\n                                <thead>\r\n                                    <tr>\r\n                                        <th>\r\n                                            Input keys:\r\n                                        <button onClick={() => addInput()}>+</button>\r\n                                        </th>\r\n\r\n                                    </tr>\r\n                                </thead>\r\n                                {input.length == 0 ?\r\n                                    <tbody>\r\n                                        <tr>\r\n                                            <td>\r\n                                                null\r\n                                        </td>\r\n                                        </tr>\r\n                                    </tbody>\r\n                                    :\r\n                                    <>\r\n                                        {input.map((item, index) => (\r\n                                            <tbody key={index}>\r\n                                                <tr>\r\n                                                    <td>\r\n                                                        <input className=\"inputNode\" type=\"text\" value={item} onChange={(e) => changeInput(index, e)} />\r\n                                                        <button onClick={() => removeInput(index)}>-</button>\r\n                                                    </td>\r\n                                                </tr>\r\n                                            </tbody>\r\n                                        ))}\r\n                                    </>}\r\n                            </table>\r\n                            <table className=\"NodeTable\">\r\n                                <thead>\r\n                                    <tr>\r\n                                        <th>\r\n                                            Output keys:\r\n                                        <button onClick={() => addOutput()}>+</button>\r\n                                        </th>\r\n                                    </tr>\r\n                                </thead>\r\n                                {output.length == 0 ?\r\n                                    <tbody>\r\n                                        <tr>\r\n                                            <td>\r\n                                                null\r\n                                        </td>\r\n                                        </tr>\r\n                                    </tbody>\r\n                                    :\r\n                                    <>\r\n                                        {output.map((item, index) => (\r\n                                            <tbody key={index}>\r\n                                                <tr>\r\n                                                    <td>\r\n                                                        <input className=\"inputNode\" type=\"text\" value={item} onChange={(e) => changeOutput(index, e)} />\r\n                                                        <button onClick={() => removeOutput(index)}>-</button>\r\n                                                    </td>\r\n                                                </tr>\r\n                                            </tbody>\r\n                                        ))}\r\n                                    </>}\r\n                            </table>\r\n                            <br />\r\n                        DataSet:\r\n                        <select id=\"dataset\" value={dataset} onChange={e => changeDataset(e)}>\r\n                                {items.map(item => (\r\n                                    <option key={item} value={item}>{item}</option>\r\n                                ))}\r\n                            </select>\r\n                        </>\r\n                        :\r\n                        <>\r\n                            <table className=\"NodeTable\">\r\n                                <thead>\r\n                                    <tr>\r\n                                        <th>\r\n                                            Input keys:\r\n                                    </th>\r\n\r\n                                    </tr>\r\n                                </thead>\r\n                                {input.length == 0 ?\r\n                                    <tbody>\r\n                                        <tr>\r\n                                            <td>\r\n                                                null\r\n                                   </td>\r\n                                        </tr>\r\n                                    </tbody>\r\n                                    :\r\n                                    <>\r\n                                        {input.map((item, index) => (\r\n                                            <tbody key={index}>\r\n                                                <tr>\r\n                                                    <td>\r\n                                                        {item}\r\n                                                    </td>\r\n                                                </tr>\r\n                                            </tbody>\r\n                                        ))}\r\n                                    </>}\r\n                            </table>\r\n                            <table className=\"NodeTable\">\r\n                                <thead>\r\n                                    <tr>\r\n                                        <th>\r\n                                            Output keys:\r\n                                    </th>\r\n                                    </tr>\r\n                                </thead>\r\n                                {output.length == 0 ?\r\n                                    <tbody>\r\n                                        <tr>\r\n                                            <td>\r\n                                                null\r\n                                        </td>\r\n                                        </tr>\r\n                                    </tbody>\r\n                                    :\r\n                                    <>\r\n                                        {output.map((item, index) => (\r\n                                            <tbody key={index}>\r\n                                                <tr>\r\n                                                    <td>\r\n                                                        {item}\r\n                                                    </td>\r\n                                                </tr>\r\n                                            </tbody>\r\n                                        ))}\r\n                                    </>}\r\n                            </table>\r\n                            <br />\r\n                        DataSet: <span> {dataset}</span>\r\n                        </>\r\n                    }\r\n                    <br /><br />\r\n                    {props.creationFlag == false ?\r\n                        <div>\r\n                            <button onClick={() => onChange()}>{update == 1 ? 'Submit' : 'Update'}</button>\r\n                        </div>\r\n                        :\r\n                        <div>\r\n                        </div>\r\n                    }\r\n                </div>\r\n            }\r\n        </div>\r\n    )\r\n}","D:\\Podaci\\7. sem\\Arhitektura i projektovanje softvera\\ml-pipeline-vcs\\fe_app\\src\\Nodes\\ModelLoader.jsx",["141","142","143","144","145","146","147","148","149","150","151","152","153"],"import React, { useEffect, useState } from 'react';\r\nimport \"../Flow/Flow.css\";\r\n\r\nexport default function ModelLoader(props) {\r\n\r\n    const [details, setDetails] = useState(0);\r\n    const [update, setUpdate] = useState(0);\r\n\r\n    const [path, setPath] = useState();\r\n    const [loss, setLoss] = useState();\r\n    const [metrics, setMetrics] = useState();\r\n    const [optimizer, setOprimizer] = useState();\r\n    const [compile, setCompile] = useState(false);\r\n    const [train, setTrain] = useState(false);\r\n    const [epochs, setEpochs] = useState();\r\n    const [batchSize, setBatchSize] = useState();\r\n    const [publish, setPublish] = useState(false);\r\n    const [validate, setValidate] = useState(false);\r\n\r\n    const [input, setInput] = useState([]);\r\n    const [output, setOutput] = useState([]);\r\n\r\n\r\n\r\n    useEffect(() => {\r\n        if (props.creationFlag == true) {\r\n            setUpdate(true);\r\n\r\n            if(props.nodes[props.id].available_params == null) {\r\n\r\n                //mesto za dodavanje parametara\r\n\r\n                let nodes = [...props.nodes];\r\n\r\n                nodes[props.id].available_params = [\"model_path\",\"loss\",\"metrics\",\"optimizer\",\"compile\",\"train\",\"validate\",\"epochs\",\"batch_size\",\"publish\"];\r\n                nodes[props.id].params = {\r\n                    \"model_path\": null,\r\n                    \"loss\": null,\r\n                    \"metrics\": null,\r\n                    \"optimizer\": null,\r\n                    \"compile\": false,\r\n                    \"train\": false,\r\n                    \"validate\": false,\r\n                    \"epochs\": null,\r\n                    \"batch_size\": null,\r\n                    \"publish\": props.teamid,\r\n                }\r\n\r\n                props.setNodes(nodes);\r\n            }\r\n        }\r\n\r\n    }, []);\r\n\r\n\r\n    useEffect(() => {\r\n        //if (props.creationFlag == false) {\r\n            setPath(props.nodes[props.id].params[\"model_path\"]);\r\n            setLoss(props.nodes[props.id].params[\"loss\"]);\r\n            setMetrics(props.nodes[props.id].params[\"metrics\"]);\r\n            setOprimizer(props.nodes[props.id].params[\"optimizer\"]);\r\n            setCompile(props.nodes[props.id].params[\"compile\"] ? 1 : 0);\r\n            setTrain(props.nodes[props.id].params[\"train\"] ? 1 : 0);\r\n            setValidate(props.nodes[props.id].params[\"validate\"] ? 1 : 0);\r\n            setEpochs(props.nodes[props.id].params[\"epochs\"]);\r\n            setBatchSize(props.nodes[props.id].params[\"batch_size\"]);\r\n\r\n            setInput(props.nodes[props.id].input_keys);\r\n            setOutput(props.nodes[props.id].output_keys);\r\n        //}\r\n\r\n        //console.log(data);\r\n    }, [props.node]);\r\n\r\n\r\n\r\n\r\n    const onChange = () => {\r\n\r\n        setUpdate(!update);\r\n\r\n        if (update) {\r\n\r\n            let nodes = [...props.nodes];\r\n\r\n            nodes[props.id].input_keys = input;\r\n            nodes[props.id].input_keys = output;\r\n\r\n            nodes[props.id].params[\"model_path\"] = path;\r\n            nodes[props.id].params[\"loss\"] = loss;\r\n            nodes[props.id].params[\"metrics\"] = metrics;\r\n            nodes[props.id].params[\"optimizer\"] = optimizer;\r\n            nodes[props.id].params[\"compile\"] = compile;\r\n            nodes[props.id].params[\"train\"] = train;\r\n            nodes[props.id].params[\"epochs\"] = epochs;\r\n            nodes[props.id].params[\"batch_size\"] = batchSize;\r\n            nodes[props.id].params[\"publish\"] = publish;\r\n\r\n            props.setNodes(nodes);\r\n            props.setUpdateFlag(1);\r\n        }\r\n    }\r\n\r\n    const deleteNode = () => {\r\n        let nodes = [...props.nodes];\r\n        nodes.splice(props.id,1);\r\n        props.setNodes(nodes);\r\n        console.log(nodes);\r\n    }\r\n\r\n    const addInput = () => {\r\n\r\n        let temp = [...input];\r\n        temp.push(\"null\");\r\n        setInput(temp);\r\n\r\n        if (props.creationFlag) {\r\n\r\n            let nodes = [...props.nodes];\r\n            nodes[props.id].input_keys = temp;\r\n            props.setNodes(nodes);\r\n        }\r\n\r\n    }\r\n    const removeInput = (index) => {\r\n        var temp = [...input];\r\n        temp.splice(index, 1);\r\n        setInput(temp);\r\n\r\n        if (props.creationFlag) {\r\n\r\n            let nodes = [...props.nodes];\r\n            nodes[props.id].input_keys = temp;\r\n            props.setNodes(nodes);\r\n        }\r\n    }\r\n\r\n    const changeInput = (index, e) => {\r\n        var temp = [...input];\r\n        temp[index] = e.target.value;\r\n        setInput(temp);\r\n\r\n\r\n        if (props.creationFlag) {\r\n\r\n            let nodes = [...props.nodes];\r\n            nodes[props.id].input_keys = temp;\r\n            props.setNodes(nodes);\r\n        }\r\n    }\r\n\r\n    const addOutput = () => {\r\n\r\n        let temp = [...output];\r\n        temp.push(\"null\");\r\n        setOutput(temp);\r\n\r\n        if (props.creationFlag) {\r\n\r\n            let nodes = [...props.nodes];\r\n            nodes[props.id].output_keys = temp;\r\n            props.setNodes(nodes);\r\n        }\r\n    }\r\n\r\n    const removeOutput = (index) => {\r\n        var temp = [...output];\r\n        temp.splice(index, 1);\r\n        setOutput(temp);\r\n\r\n        if (props.creationFlag) {\r\n\r\n            let nodes = [...props.nodes];\r\n            nodes[props.id].output_keys = temp;\r\n            props.setNodes(nodes);\r\n        }\r\n    }\r\n\r\n    const changeOutput = (index, e) => {\r\n        var temp = [...output];\r\n        temp[index] = e.target.value;\r\n        setOutput(temp);\r\n\r\n        if (props.creationFlag) {\r\n\r\n            let nodes = [...props.nodes];\r\n            nodes[props.id].output_keys = temp;\r\n            props.setNodes(nodes);\r\n        }\r\n    }\r\n\r\n    const changePath = (e) => {\r\n        setPath(e.target.value);\r\n\r\n        if(props.creationFlag){\r\n            let nodes = [...props.nodes];\r\n            nodes[props.id].params[\"model_path\"] = e.target.value;\r\n            props.setNodes(nodes);\r\n        }\r\n    }\r\n\r\n    \r\n    const changeLoss = (e) => {\r\n        setLoss(e.target.value);\r\n\r\n        if(props.creationFlag){\r\n            let nodes = [...props.nodes];\r\n            nodes[props.id].params[\"loss\"] = e.target.value;\r\n            props.setNodes(nodes);\r\n        }\r\n    }\r\n\r\n    const changeMetrics = (e) => {\r\n        setMetrics(e.target.value);\r\n\r\n        if(props.creationFlag){\r\n            let nodes = [...props.nodes];\r\n            nodes[props.id].params[\"metrics\"] = e.target.value;\r\n            props.setNodes(nodes);\r\n        }\r\n    }\r\n\r\n    const changeOptimizer = (e) => {\r\n        setOprimizer(e.target.value);\r\n\r\n        if(props.creationFlag){\r\n            let nodes = [...props.nodes];\r\n            nodes[props.id].params[\"optimizer\"] = e.target.value;\r\n            props.setNodes(nodes);\r\n        }\r\n    }\r\n\r\n    const changeCompile = () => {\r\n\r\n        let newCompile = !compile;\r\n        setCompile(newCompile)\r\n\r\n        if(props.creationFlag){\r\n            let nodes = [...props.nodes];\r\n            nodes[props.id].params[\"compile\"] = newCompile;\r\n            props.setNodes(nodes);\r\n        }\r\n    }\r\n\r\n    const changeTrain = () => {\r\n\r\n        let newTrain = !train;\r\n        setTrain(newTrain)\r\n\r\n        if(props.creationFlag){\r\n            let nodes = [...props.nodes];\r\n            nodes[props.id].params[\"train\"] = newTrain;\r\n            props.setNodes(nodes);\r\n        }\r\n    }\r\n\r\n    const changeEpochs = (e) => {\r\n        setEpochs(e.target.value)\r\n\r\n        if(props.creationFlag){\r\n            let nodes = [...props.nodes];\r\n            nodes[props.id].params[\"epochs\"] = parseInt(e.target.value);\r\n            props.setNodes(nodes);\r\n        }\r\n    }\r\n\r\n    const changeBatchSize = (e) => {\r\n        setBatchSize(e.target.value)\r\n\r\n        if(props.creationFlag){\r\n            let nodes = [...props.nodes];\r\n            nodes[props.id].params[\"batch_size\"] = parseInt(e.target.value);\r\n            props.setNodes(nodes);\r\n        }\r\n    }\r\n\r\n    const changeValidate = (e) => {\r\n\r\n        let newValidate = !validate;\r\n        setValidate(newValidate);\r\n\r\n        if(props.creationFlag){\r\n            let nodes = [...props.nodes];\r\n            nodes[props.id].params[\"validate\"] = newValidate;\r\n            props.setNodes(nodes);\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div className=\"node\">\r\n            {details == 0 && <br />}\r\n            <span onClick={() => setDetails(!details)}>\r\n                <b>ModelLoader </b>\r\n                {props.creationFlag &&\r\n                    <button onClick={() => deleteNode()}>-\r\n                    </button>}\r\n            </span>\r\n            {details == 1 &&\r\n                <div>\r\n                    <hr></hr>\r\n                    {update == 1 ?\r\n                        <>\r\n                            <table className=\"NodeTable\">\r\n                                <thead>\r\n                                    <tr>\r\n                                        <th>\r\n                                            Input keys:\r\n                                        <button onClick={() => addInput()}>+</button>\r\n                                        </th>\r\n\r\n                                    </tr>\r\n                                </thead>\r\n                                {input.length == 0 ?\r\n                                    <tbody>\r\n                                        <tr>\r\n                                            <td>\r\n                                                null\r\n                                        </td>\r\n                                        </tr>\r\n                                    </tbody>\r\n                                    :\r\n                                    <>\r\n                                        {input.map((item, index) => (\r\n                                            <tbody key={index}>\r\n                                                <tr>\r\n                                                    <td>\r\n                                                        <input className=\"inputNode\" type=\"text\" value={item} onChange={(e) => changeInput(index, e)} />\r\n                                                        <button onClick={() => removeInput(index)}>-</button>\r\n                                                    </td>\r\n                                                </tr>\r\n                                            </tbody>\r\n                                        ))}\r\n                                    </>}\r\n                            </table>\r\n                            <table className=\"NodeTable\">\r\n                                <thead>\r\n                                    <tr>\r\n                                        <th>\r\n                                            Output keys:\r\n                                        <button onClick={() => addOutput()}>+</button>\r\n                                        </th>\r\n                                    </tr>\r\n                                </thead>\r\n                                {output.length == 0 ?\r\n                                    <tbody>\r\n                                        <tr>\r\n                                            <td>\r\n                                                null\r\n                                        </td>\r\n                                        </tr>\r\n                                    </tbody>\r\n                                    :\r\n                                    <>\r\n                                        {output.map((item, index) => (\r\n                                            <tbody key={index}>\r\n                                                <tr>\r\n                                                    <td>\r\n                                                        <input className=\"inputNode\" type=\"text\" value={item} onChange={(e) => changeOutput(index, e)} />\r\n                                                        <button onClick={() => removeOutput(index)}>-</button>\r\n                                                    </td>\r\n                                                </tr>\r\n                                            </tbody>\r\n                                        ))}\r\n                                    </>}\r\n                            </table>\r\n                            <br />\r\n                            <table className=\"NodeTable\">\r\n                                <tr>\r\n                                    <th> Model path: </th>\r\n                                    <td>\r\n                                        <input className=\"inputNode\" type=\"text\" value={path} onChange={(e) => changePath(e)} />\r\n                                    </td>\r\n                                </tr>\r\n                                <tr>\r\n                                    <th> Loss: </th>\r\n                                    <td>\r\n                                        <input className=\"inputNode\" type=\"text\" value={loss} onChange={(e) => changeLoss(e)} />\r\n                                    </td>\r\n                                </tr>\r\n                                <tr>\r\n                                    <th> Metrics: </th>\r\n                                    <td>\r\n                                        <input className=\"inputNode\" type=\"text\" value={metrics} onChange={(e) => changeMetrics(e)} />\r\n                                    </td>\r\n                                </tr>\r\n                                <tr>\r\n                                    <th> Optimizer: </th>\r\n                                    <td>\r\n                                        <input className=\"inputNode\" type=\"text\" value={optimizer} onChange={(e) => changeOptimizer(e)} />\r\n                                    </td>\r\n                                </tr>\r\n                                <tr>\r\n                                    <th> Compile: </th>\r\n                                    <td>\r\n                                        <input type=\"checkbox\" value={compile} checked={compile} onChange={() => changeCompile()} />\r\n                                    </td>\r\n                                </tr>\r\n                                <tr>\r\n                                    <th> Train: </th>\r\n                                    <td>\r\n                                        <input type=\"checkbox\" value={train} checked={train} onChange={() => changeTrain()} />\r\n                                    </td>\r\n                                </tr>\r\n                                <tr>\r\n                                    <th> Validate: </th>\r\n                                    <td>\r\n                                        <input type=\"checkbox\" value={validate} checked={validate} onChange={() => changeValidate()} />\r\n                                    </td>\r\n                                </tr>\r\n                                <tr>\r\n                                    <th> Epochs: </th>\r\n                                    <td>\r\n                                        <input className=\"inputNode\" type=\"number\" value={epochs} onChange={(e) => changeEpochs(e)} />\r\n                                    </td>\r\n                                </tr>\r\n                                <tr>\r\n                                    <th> Batch size: </th>\r\n                                    <td>\r\n                                        <input className=\"inputNode\" type=\"number\" value={batchSize} onChange={(e) => changeBatchSize(e)} />\r\n                                    </td>\r\n                                </tr>\r\n                            </table>\r\n                        </>\r\n                        :\r\n                        <>\r\n                            <table className=\"NodeTable\">\r\n                                <thead>\r\n                                    <tr>\r\n                                        <th>\r\n                                            Input keys:\r\n                                    </th>\r\n\r\n                                    </tr>\r\n                                </thead>\r\n                                {input?.length == 0 ?\r\n                                    <tbody>\r\n                                        <tr>\r\n                                            <td>\r\n                                                null\r\n                                   </td>\r\n                                        </tr>\r\n                                    </tbody>\r\n                                    :\r\n                                    <>\r\n                                        {input.map((item, index) => (\r\n                                            <tbody key={index}>\r\n                                                <tr>\r\n                                                    <td>\r\n                                                        {item}\r\n                                                    </td>\r\n                                                </tr>\r\n                                            </tbody>\r\n                                        ))}\r\n                                    </>}\r\n                            </table>\r\n                            <table className=\"NodeTable\">\r\n                                <thead>\r\n                                    <tr>\r\n                                        <th>\r\n                                            Output keys:\r\n                                    </th>\r\n                                    </tr>\r\n                                </thead>\r\n                                {output.length == 0 ?\r\n                                    <tbody>\r\n                                        <tr>\r\n                                            <td>\r\n                                                null\r\n                                        </td>\r\n                                        </tr>\r\n                                    </tbody>\r\n                                    :\r\n                                    <>\r\n                                        {output.map((item, index) => (\r\n                                            <tbody key={index}>\r\n                                                <tr>\r\n                                                    <td>\r\n                                                        {item}\r\n                                                    </td>\r\n                                                </tr>\r\n                                            </tbody>\r\n                                        ))}\r\n                                    </>}\r\n                            </table>\r\n                            <br />\r\n                            <table className=\"NodeTable\">\r\n                                <tr>\r\n                                    <th> Model path: </th>\r\n                                    <td> <p id=\"bilosta\">{path ? path : 'null'}</p> </td>\r\n                                </tr>\r\n                                <tr>\r\n                                    <th> Loss: </th>\r\n                                    <td> {loss ? loss : 'null'} </td>\r\n                                </tr>\r\n                                <tr>\r\n                                    <th> Metrics: </th>\r\n                                    <td> {metrics ? metrics : 'null'} </td>\r\n                                </tr>\r\n                                <tr>\r\n                                    <th> Optimizer: </th>\r\n                                    <td> {optimizer ? optimizer : 'null'} </td>\r\n                                </tr>\r\n                                <tr>\r\n                                    <th> Compile: </th>\r\n                                    <td> {compile ? 'true' : 'false'} </td>\r\n                                </tr>\r\n                                <tr>\r\n                                    <th> Train: </th>\r\n                                    <td> {train ? 'true' : 'false'} </td>\r\n                                </tr>\r\n                                <tr>\r\n                                    <th> Validate: </th>\r\n                                    <td> {validate ? 'true' : 'false'} </td>\r\n                                </tr>\r\n                                <tr>\r\n                                    <th> Epochs: </th>\r\n                                    <td> {epochs ? epochs : 'null'} </td>\r\n                                </tr>\r\n                                <tr>\r\n                                    <th> Batch size: </th>\r\n                                    <td> {batchSize ? batchSize : 'null'} </td>\r\n                                </tr>\r\n                            </table>\r\n                        </>\r\n                    }\r\n                    <br />\r\n                    {props.creationFlag == false ?\r\n                        <div>\r\n                            <button onClick={() => onChange()}>{update == 1 ? 'Submit' : 'Update'}</button>\r\n                        </div>\r\n                        :\r\n                        <div>\r\n                        </div>\r\n                    }\r\n\r\n                </div>\r\n            }\r\n        </div>\r\n    )\r\n}","D:\\Podaci\\7. sem\\Arhitektura i projektovanje softvera\\ml-pipeline-vcs\\fe_app\\src\\Nodes\\DataNormalizer.jsx",["154","155","156","157","158","159","160","161","162","163","164","165","166","167","168"],"import SelectInput from '@material-ui/core/Select/SelectInput';\r\nimport React, { forwardRef, useEffect, useState, useImperativeHandle, useCallback } from 'react';\r\nimport \"../Flow/Flow.css\";\r\n\r\nexport default function DataNormalizer(props) {\r\n\r\n\r\n    const [update, setUpdate] = useState(0);\r\n    const [details, setDetails] = useState(0);\r\n\r\n    const [input, setInput] = useState([]);\r\n    const [output, setOutput] = useState([]);\r\n\r\n\r\n    // useEffect(() => {\r\n    //     if (props.creationFlag == true) {\r\n    //         setUpdate(true);\r\n    //         setInput(props.nodes[props.id].input_keys);\r\n    //         setOutput(props.nodes[props.id].output_keys);\r\n    //         //mesto za dodavanje parametara, ovde ih nema      OVO IMA SMISLA TREBBA SAMO DA SE TESTIRA\r\n    //     }\r\n\r\n    // }, [props.nodes]);\r\n\r\n    useEffect(() => {\r\n        if (props.creationFlag == true) {\r\n            setUpdate(true);\r\n\r\n            if(props.nodes[props.id].available_params == null) {\r\n                //mesto za dodavanje parametara\r\n\r\n                let nodes = [...props.nodes];\r\n\r\n                nodes[props.id].available_params = [];\r\n                \r\n                props.setNodes(nodes);\r\n            }\r\n        }\r\n\r\n    }, []);\r\n\r\n\r\n    useEffect(() => {\r\n\r\n        //if (props.creationFlag == false) {\r\n            setInput(props.nodes[props.id].input_keys);\r\n            setOutput(props.nodes[props.id].output_keys);\r\n        //}\r\n    }, [props.nodes]);\r\n\r\n\r\n    const onChange = () => {\r\n\r\n        setUpdate(!update);\r\n\r\n        if (update) {\r\n            \r\n            let nodes = [...props.nodes];\r\n            nodes[props.id].input_keys = input;\r\n            nodes[props.id].output_keys = output;\r\n\r\n            props.setNodes(nodes);\r\n\r\n            props.setUpdateFlag(1);\r\n        }\r\n    }\r\n\r\n    const deleteNode = () => {\r\n        let nodes = [...props.nodes];\r\n        nodes.splice(props.id,1);\r\n        props.setNodes(nodes);\r\n        console.log(nodes);\r\n    }\r\n\r\n\r\n    const addInput = () => {\r\n\r\n        let temp = [...input];\r\n        temp.push(\"null\");\r\n        setInput(temp);\r\n\r\n        if (props.creationFlag) {\r\n\r\n            let nodes = [...props.nodes];\r\n            nodes[props.id].input_keys = temp;\r\n            props.setNodes(nodes);\r\n        }\r\n\r\n    }\r\n\r\n    const removeInput = (index) => {\r\n        var temp = [...input];\r\n        temp.splice(index, 1);\r\n        setInput(temp);\r\n\r\n        if (props.creationFlag) {\r\n\r\n            let nodes = [...props.nodes];\r\n            nodes[props.id].input_keys = temp;\r\n            props.setNodes(nodes);\r\n        }\r\n    }\r\n\r\n    const changeInput = (index, e) => {\r\n        var temp = [...input];\r\n        temp[index] = e.target.value;\r\n        setInput(temp);\r\n\r\n\r\n        if (props.creationFlag) {\r\n\r\n            let nodes = [...props.nodes];\r\n            nodes[props.id].input_keys = temp;\r\n            props.setNodes(nodes);\r\n        }\r\n    }\r\n\r\n    const addOutput = () => {\r\n\r\n        let temp = [...output];\r\n        temp.push(\"null\");\r\n        setOutput(temp);\r\n\r\n        if (props.creationFlag) {\r\n\r\n            let nodes = [...props.nodes];\r\n            nodes[props.id].output_keys = temp;\r\n            props.setNodes(nodes);\r\n        }\r\n    }\r\n\r\n    const removeOutput = (index) => {\r\n        var temp = [...output];\r\n        temp.splice(index, 1);\r\n        setOutput(temp);\r\n\r\n        if (props.creationFlag) {\r\n\r\n            let nodes = [...props.nodes];\r\n            nodes[props.id].output_keys = temp;\r\n            props.setNodes(nodes);\r\n        }\r\n    }\r\n\r\n    const changeOutput = (index, e) => {\r\n        var temp = [...output];\r\n        temp[index] = e.target.value;\r\n        setOutput(temp);\r\n\r\n        if (props.creationFlag) {\r\n\r\n            let nodes = [...props.nodes];\r\n            nodes[props.id].output_keys = temp;\r\n            props.setNodes(nodes);\r\n        }\r\n    }\r\n\r\n\r\n    return (\r\n        <div className=\"node\">\r\n            {details == 0 && <br />}\r\n            <span onClick={() => setDetails(!details)}>\r\n                <b>DataNormalizer </b>\r\n                {props.creationFlag &&\r\n                    <button onClick={() => deleteNode()}>-\r\n                    </button>}\r\n            </span>\r\n            {details == 1 &&\r\n                <div>\r\n                    <hr></hr>\r\n                    {update ?\r\n\r\n                        //Ako treba da se rade promene (update flag je postavljen na 1)\r\n                        <>\r\n                            <table className=\"NodeTable\">\r\n                                <thead>\r\n                                    <tr>\r\n                                        <th>\r\n                                            Input keys:\r\n                                        <button onClick={() => addInput()}>+</button>\r\n                                        </th>\r\n\r\n                                    </tr>\r\n                                </thead>\r\n                                {input.length == 0 ?\r\n                                    <tbody>\r\n                                        <tr>\r\n                                            <td>\r\n                                                null\r\n                                        </td>\r\n                                        </tr>\r\n                                    </tbody>\r\n                                    :\r\n                                    <>\r\n                                        {input.map((item, index) => (\r\n                                            <tbody key={index}>\r\n                                                <tr>\r\n                                                    <td>\r\n                                                        <input className=\"inputNode\" type=\"text\" value={item} onChange={(e) => changeInput(index, e)} />\r\n                                                        <button onClick={() => removeInput(index)}>-</button>\r\n                                                    </td>\r\n                                                </tr>\r\n                                            </tbody>\r\n                                        ))}\r\n                                    </>}\r\n                            </table>\r\n                            <table className=\"NodeTable\">\r\n                                <thead>\r\n                                    <tr>\r\n                                        <th>\r\n                                            Output keys:\r\n                                        <button onClick={() => addOutput()}>+</button>\r\n                                        </th>\r\n                                    </tr>\r\n                                </thead>\r\n                                {output.length == 0 ?\r\n                                    <tbody>\r\n                                        <tr>\r\n                                            <td>\r\n                                                null\r\n                                        </td>\r\n                                        </tr>\r\n                                    </tbody>\r\n                                    :\r\n                                    <>\r\n                                        {output.map((item, index) => (\r\n                                            <tbody key={index}>\r\n                                                <tr>\r\n                                                    <td>\r\n                                                        <input className=\"inputNode\" type=\"text\" value={item} onChange={(e) => changeOutput(index, e)} />\r\n                                                        <button onClick={() => removeOutput(index)}>-</button>\r\n                                                    </td>\r\n                                                </tr>\r\n                                            </tbody>\r\n                                        ))}\r\n                                    </>}\r\n                            </table>\r\n                        </>\r\n                        :\r\n\r\n                        //Ako je update flag 0, radi se samo prikaz\r\n                        <>\r\n                            <table className=\"NodeTable\">\r\n                                <thead>\r\n                                    <tr>\r\n                                        <th>\r\n                                            Input keys:\r\n                                    </th>\r\n\r\n                                    </tr>\r\n                                </thead>\r\n                                {input.length == 0 ?\r\n                                    <tbody>\r\n                                        <tr>\r\n                                            <td>\r\n                                                null\r\n                                   </td>\r\n                                        </tr>\r\n                                    </tbody>\r\n                                    :\r\n                                    <>\r\n                                        {input.map((item, index) => (\r\n                                            <tbody key={index}>\r\n                                                <tr>\r\n                                                    <td>\r\n                                                        {item}\r\n                                                    </td>\r\n                                                </tr>\r\n                                            </tbody>\r\n                                        ))}\r\n                                    </>}\r\n                            </table>\r\n                            <table className=\"NodeTable\">\r\n                                <thead>\r\n                                    <tr>\r\n                                        <th>\r\n                                            Output keys:\r\n                                    </th>\r\n                                    </tr>\r\n                                </thead>\r\n                                {output.length == 0 ?\r\n                                    <tbodu>\r\n                                        <tr>\r\n                                            <td>\r\n                                                null\r\n                                        </td>\r\n                                        </tr>\r\n                                    </tbodu>\r\n                                    :\r\n                                    <>\r\n                                        {output.map((item, index) => (\r\n                                            <tbody key={index}>\r\n                                                <tr>\r\n                                                    <td>\r\n                                                        {item}\r\n                                                    </td>\r\n                                                </tr>\r\n                                            </tbody>\r\n                                        ))}\r\n                                    </>}\r\n                            </table>\r\n                        </>\r\n                    }\r\n                    <br />\r\n                    {props.creationFlag == false ?\r\n                        <div>\r\n                            <button onClick={() => onChange()}>{update == 1 ? 'Submit' : 'Update'}</button>\r\n                        </div>\r\n                        :\r\n                        <div>\r\n                        </div>\r\n                    }\r\n\r\n                </div>\r\n            }\r\n        </div>\r\n    )\r\n}","D:\\Podaci\\7. sem\\Arhitektura i projektovanje softvera\\ml-pipeline-vcs\\fe_app\\src\\Nodes\\DataPlotter.jsx",["169","170","171","172","173","174","175","176","177","178","179","180"],"import React, { useEffect, useState } from 'react';\r\nimport \"../Flow/Flow.css\";\r\n\r\nexport default function DataPlotter(props) {\r\n\r\n    const [details, setDetails] = useState(0);\r\n    const [update, setUpdate] = useState(0);\r\n\r\n    const [index, setIndex] = useState(\"\");\r\n\r\n    const [input, setInput] = useState([]);\r\n    const [output, setOutput] = useState([]);\r\n\r\n\r\n    useEffect(() => {\r\n        if (props.creationFlag == true) {\r\n            setUpdate(true);\r\n\r\n            if(props.nodes[props.id].available_params == null) {\r\n                //mesto za dodavanje parametara\r\n\r\n                let nodes = [...props.nodes];\r\n\r\n                nodes[props.id].available_params = [\"index\"];\r\n                nodes[props.id].params = {\r\n                    \"index\": null\r\n                }\r\n\r\n                props.setNodes(nodes);\r\n            }\r\n        }\r\n    }, []);\r\n\r\n    useEffect(() => {\r\n        //if (props.creationFlag == false) {\r\n            setIndex(props.nodes[props.id].params[\"index\"]);\r\n            setInput(props.nodes[props.id].input_keys);\r\n            setOutput(props.nodes[props.id].output_keys);\r\n        //}\r\n    }, []);\r\n\r\n\r\n\r\n    const onChange = () => {\r\n\r\n        setUpdate(!update);\r\n\r\n        if (update) {\r\n\r\n            let nodes = [...props.nodes];\r\n            nodes[props.id].input_keys = input;\r\n            nodes[props.id].output_keys = output;\r\n            nodes[props.id].params[\"index\"] = index;\r\n\r\n            props.setNodes(nodes);\r\n\r\n            props.setUpdateFlag(1);\r\n        }\r\n    }\r\n\r\n    const deleteNode = () => {\r\n        let nodes = [...props.nodes];\r\n        nodes.splice(props.id,1);\r\n        props.setNodes(nodes);\r\n        console.log(nodes);\r\n    }\r\n\r\n\r\n    const addInput = () => {\r\n\r\n        let temp = [...input];\r\n        temp.push(\"null\");\r\n        setInput(temp);\r\n\r\n        if (props.creationFlag) {\r\n\r\n            let nodes = [...props.nodes];\r\n            nodes[props.id].input_keys = temp;\r\n            props.setNodes(nodes);\r\n        }\r\n\r\n    }\r\n    const removeInput = (index) => {\r\n        var temp = [...input];\r\n        temp.splice(index, 1);\r\n        setInput(temp);\r\n\r\n        if (props.creationFlag) {\r\n\r\n            let nodes = [...props.nodes];\r\n            nodes[props.id].input_keys = temp;\r\n            props.setNodes(nodes);\r\n        }\r\n    }\r\n\r\n    const changeInput = (index, e) => {\r\n        var temp = [...input];\r\n        temp[index] = e.target.value;\r\n        setInput(temp);\r\n\r\n\r\n        if (props.creationFlag) {\r\n\r\n            let nodes = [...props.nodes];\r\n            nodes[props.id].input_keys = temp;\r\n            props.setNodes(nodes);\r\n        }\r\n    }\r\n\r\n    const addOutput = () => {\r\n\r\n        let temp = [...output];\r\n        temp.push(\"null\");\r\n        setOutput(temp);\r\n\r\n        if (props.creationFlag) {\r\n\r\n            let nodes = [...props.nodes];\r\n            nodes[props.id].output_keys = temp;\r\n            props.setNodes(nodes);\r\n        }\r\n    }\r\n\r\n    const removeOutput = (index) => {\r\n        var temp = [...output];\r\n        temp.splice(index, 1);\r\n        setOutput(temp);\r\n\r\n        if (props.creationFlag) {\r\n\r\n            let nodes = [...props.nodes];\r\n            nodes[props.id].output_keys = temp;\r\n            props.setNodes(nodes);\r\n        }\r\n    }\r\n\r\n    const changeOutput = (index, e) => {\r\n        var temp = [...output];\r\n        temp[index] = e.target.value;\r\n        setOutput(temp);\r\n\r\n        if (props.creationFlag) {\r\n\r\n            let nodes = [...props.nodes];\r\n            nodes[props.id].output_keys = temp;\r\n            props.setNodes(nodes);\r\n        }\r\n    }\r\n\r\n    const changeIndex = (e) => {\r\n        setIndex(e.target.value);\r\n\r\n        if(props.creationFlag){\r\n            let nodes = [...props.nodes];\r\n            nodes[props.id].params[\"index\"] = parseInt(e.target.value);\r\n            props.setNodes(nodes);\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div className=\"node\">\r\n            {details == 0 && <br />}\r\n            <span onClick={() => setDetails(!details)}>\r\n                <b>DataPlotter </b>\r\n                {props.creationFlag &&\r\n                    <button onClick={() => deleteNode()}>-\r\n                    </button>}\r\n            </span>\r\n            {details == 1 &&\r\n                <div>\r\n                    <hr></hr>\r\n                    {update == 1 ?\r\n                        <>\r\n                            <table className=\"NodeTable\">\r\n                                <thead>\r\n                                    <tr>\r\n                                        <th>\r\n                                            Input keys:\r\n                                        <button onClick={() => addInput()}>+</button>\r\n                                        </th>\r\n\r\n                                    </tr>\r\n                                </thead>\r\n                                {input.length == 0 ?\r\n                                    <tbody>\r\n                                        <tr>\r\n                                            <td>\r\n                                                null\r\n                                        </td>\r\n                                        </tr>\r\n                                    </tbody>\r\n                                    :\r\n                                    <>\r\n                                        {input.map((item, index) => (\r\n                                            <tbody key={index}>\r\n                                                <tr>\r\n                                                    <td>\r\n                                                        <input className=\"inputNode\" type=\"text\" value={item} onChange={(e) => changeInput(index, e)} />\r\n                                                        <button onClick={() => removeInput(index)}>-</button>\r\n                                                    </td>\r\n                                                </tr>\r\n                                            </tbody>\r\n                                        ))}\r\n                                    </>}\r\n                            </table>\r\n                            <table className=\"NodeTable\">\r\n                                <thead>\r\n                                    <tr>\r\n                                        <th>\r\n                                            Output keys:\r\n                                        <button onClick={() => addOutput()}>+</button>\r\n                                        </th>\r\n                                    </tr>\r\n                                </thead>\r\n                                {output.length == 0 ?\r\n                                    <tbody>\r\n                                        <tr>\r\n                                            <td>\r\n                                                null\r\n                                        </td>\r\n                                        </tr>\r\n                                    </tbody>\r\n                                    :\r\n                                    <>\r\n                                        {output.map((item, index) => (\r\n                                            <tbody key={index}>\r\n                                                <tr>\r\n                                                    <td>\r\n                                                        <input className=\"inputNode\" type=\"text\" value={item} onChange={(e) => changeOutput(index, e)} />\r\n                                                        <button onClick={() => removeOutput(index)}>-</button>\r\n                                                    </td>\r\n                                                </tr>\r\n                                            </tbody>\r\n                                        ))}\r\n                                    </>}\r\n                            </table>\r\n                            <table>\r\n                                <tbody>\r\n                                    <tr>\r\n                                        <th> Index: </th>\r\n                                        <td>\r\n                                            <input className=\"inputNode\" type=\"number\" value={index} onChange={(e) => changeIndex(e)} />\r\n                                        </td>\r\n                                    </tr>\r\n                                </tbody>\r\n                            </table>\r\n                        </>\r\n                        :\r\n                        <>\r\n                            <table className=\"NodeTable\">\r\n                                <thead>\r\n                                    <tr>\r\n                                        <th>\r\n                                            Input keys:\r\n                                    </th>\r\n\r\n                                    </tr>\r\n                                </thead>\r\n                                {input.length == 0 ?\r\n                                    <tbody>\r\n                                        <tr>\r\n                                            <td>\r\n                                                null\r\n                                   </td>\r\n                                        </tr>\r\n                                    </tbody>\r\n                                    :\r\n                                    <>\r\n                                        {input.map((item, index) => (\r\n                                            <tbody key={index}>\r\n                                                <tr>\r\n                                                    <td>\r\n                                                        {item}\r\n                                                    </td>\r\n                                                </tr>\r\n                                            </tbody>\r\n                                        ))}\r\n                                    </>}\r\n                            </table>\r\n                            <table className=\"NodeTable\">\r\n                                <thead>\r\n                                    <tr>\r\n                                        <th>\r\n                                            Output keys:\r\n                                    </th>\r\n                                    </tr>\r\n                                </thead>\r\n                                {output.length == 0 ?\r\n                                    <tbody>\r\n                                        <tr>\r\n                                            <td>\r\n                                                null\r\n                                        </td>\r\n                                        </tr>\r\n                                    </tbody>\r\n                                    :\r\n                                    <>\r\n                                        {output.map((item, index) => (\r\n                                            <tbody key={index}>\r\n                                                <tr>\r\n                                                    <td>\r\n                                                        {item}\r\n                                                    </td>\r\n                                                </tr>\r\n                                            </tbody>\r\n                                        ))}\r\n                                    </>}\r\n                            </table>\r\n                            <table className=\"NodeTable\">\r\n                                <tbody>\r\n                                    <tr>\r\n                                        <th> Index: </th>\r\n                                        <td> {index ? index : 'null'} </td>\r\n                                    </tr>\r\n                                </tbody>\r\n                            </table>\r\n                        </>\r\n                    }\r\n                    <br />\r\n                    {props.creationFlag == false ?\r\n                        <div>\r\n                            <button onClick={() => onChange()}>{update == 1 ? 'Submit' : 'Update'}</button>\r\n                        </div>\r\n                        :\r\n                        <div>\r\n                        </div>\r\n                    }\r\n\r\n                </div>\r\n            }\r\n        </div>\r\n    )\r\n}","D:\\Podaci\\7. sem\\Arhitektura i projektovanje softvera\\ml-pipeline-vcs\\fe_app\\src\\Nodes\\ModelEvaluator.jsx",["181","182","183","184","185","186","187","188","189","190","191","192"],"import React, { useEffect, useState } from 'react';\r\nimport \"../Flow/Flow.css\";\r\n\r\nexport default function ModelEvaluator(props) {\r\n\r\n    const [update, setUpdate] = useState(0);\r\n    const [details, setDetails] = useState(0);\r\n\r\n    const [index, setIndex] = useState();\r\n\r\n    const [input, setInput] = useState([]);\r\n    const [output, setOutput] = useState([]);\r\n\r\n    useEffect(() => {\r\n        if (props.creationFlag == true) {\r\n            setUpdate(true);\r\n\r\n            if(props.nodes[props.id].available_params == null) {\r\n                //mesto za dodavanje parametara\r\n\r\n                let nodes = [...props.nodes];\r\n\r\n                nodes[props.id].available_params = [\"index\"];\r\n                nodes[props.id].params = {\r\n                    \"index\": null\r\n                }\r\n                props.setNodes(nodes);\r\n            }\r\n        }\r\n    }, []);\r\n\r\n\r\n    useEffect(() => {\r\n        //if (props.creationFlag == false) {\r\n            setInput(props.nodes[props.id].input_keys);\r\n            setOutput(props.nodes[props.id].output_keys);\r\n            setIndex(props.nodes[props.id].params[\"index\"]);\r\n        //}\r\n    }, [props.nodes]);\r\n\r\n\r\n    const onChange = () => {\r\n        setUpdate(!update);\r\n        if (update) {\r\n\r\n            let nodes = [...props.nodes];\r\n            nodes[props.id].input_keys = input;\r\n            nodes[props.id].output_keys = output;\r\n            nodes[props.id].params[\"index\"] = index;\r\n            \r\n            props.setNodes(nodes);\r\n            props.setUpdateFlag(1);\r\n        }\r\n    }\r\n\r\n    const deleteNode = () => {\r\n        let nodes = [...props.nodes];\r\n        nodes.splice(props.id,1);\r\n        props.setNodes(nodes);\r\n        console.log(nodes);\r\n    }\r\n\r\n    const addInput = () => {\r\n\r\n        let temp = [...input];\r\n        temp.push(\"null\");\r\n        setInput(temp);\r\n\r\n        if (props.creationFlag) {\r\n\r\n            let nodes = [...props.nodes];\r\n            nodes[props.id].input_keys = temp;\r\n            props.setNodes(nodes);\r\n        }\r\n\r\n    }\r\n    const removeInput = (index) => {\r\n        var temp = [...input];\r\n        temp.splice(index, 1);\r\n        setInput(temp);\r\n\r\n        if (props.creationFlag) {\r\n\r\n            let nodes = [...props.nodes];\r\n            nodes[props.id].input_keys = temp;\r\n            props.setNodes(nodes);\r\n        }\r\n    }\r\n\r\n    const changeInput = (index, e) => {\r\n        var temp = [...input];\r\n        temp[index] = e.target.value;\r\n        setInput(temp);\r\n\r\n\r\n        if (props.creationFlag) {\r\n\r\n            let nodes = [...props.nodes];\r\n            nodes[props.id].input_keys = temp;\r\n            props.setNodes(nodes);\r\n        }\r\n    }\r\n\r\n    const addOutput = () => {\r\n\r\n        let temp = [...output];\r\n        temp.push(\"null\");\r\n        setOutput(temp);\r\n\r\n        if (props.creationFlag) {\r\n\r\n            let nodes = [...props.nodes];\r\n            nodes[props.id].output_keys = temp;\r\n            props.setNodes(nodes);\r\n        }\r\n    }\r\n\r\n    const removeOutput = (index) => {\r\n        var temp = [...output];\r\n        temp.splice(index, 1);\r\n        setOutput(temp);\r\n\r\n        if (props.creationFlag) {\r\n\r\n            let nodes = [...props.nodes];\r\n            nodes[props.id].output_keys = temp;\r\n            props.setNodes(nodes);\r\n        }\r\n    }\r\n\r\n    const changeOutput = (index, e) => {\r\n        var temp = [...output];\r\n        temp[index] = e.target.value;\r\n        setOutput(temp);\r\n\r\n        if (props.creationFlag) {\r\n\r\n            let nodes = [...props.nodes];\r\n            nodes[props.id].output_keys = temp;\r\n            props.setNodes(nodes);\r\n        }\r\n    }\r\n\r\n    const changeIndex = (e) => {\r\n        setIndex(e.target.value)\r\n\r\n        if (props.creationFlag) {\r\n            let nodes = [...props.nodes];\r\n            nodes[props.id].params[\"index\"] = e.target.value;\r\n            props.setNodes(nodes);\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div className=\"node\">\r\n            {details == 0 && <br />}\r\n            <span onClick={() => setDetails(!details)}>\r\n                <b>ModelEvaluator </b>\r\n                {props.creationFlag &&\r\n                    <button onClick={() => deleteNode()}>-\r\n                    </button>}\r\n            </span>\r\n            {details == 1 &&\r\n                <div>\r\n                    <hr></hr>\r\n                    {update == 1 ?\r\n                        <>\r\n                            <table className=\"NodeTable\">\r\n                                <thead>\r\n                                    <tr>\r\n                                        <th>\r\n                                            Input keys:\r\n                                        <button onClick={() => addInput()}>+</button>\r\n                                        </th>\r\n\r\n                                    </tr>\r\n                                </thead>\r\n                                {input.length == 0 ?\r\n                                    <tbody>\r\n                                        <tr>\r\n                                            <td>\r\n                                                null\r\n                                        </td>\r\n                                        </tr>\r\n                                    </tbody>\r\n                                    :\r\n                                    <>\r\n                                        {input.map((item, index) => (\r\n                                            <tbody key={index}>\r\n                                                <tr>\r\n                                                    <td>\r\n                                                        <input className=\"inputNode\" type=\"text\" value={item} onChange={(e) => changeInput(index, e)} />\r\n                                                        <button onClick={() => removeInput(index)}>-</button>\r\n                                                    </td>\r\n                                                </tr>\r\n                                            </tbody>\r\n                                        ))}\r\n                                    </>}\r\n                            </table>\r\n                            <table className=\"NodeTable\">\r\n                                <thead>\r\n                                    <tr>\r\n                                        <th>\r\n                                            Output keys:\r\n                                        <button onClick={() => addOutput()}>+</button>\r\n                                        </th>\r\n                                    </tr>\r\n                                </thead>\r\n                                {output.length == 0 ?\r\n                                    <tbody>\r\n                                        <tr>\r\n                                            <td>\r\n                                                null\r\n                                        </td>\r\n                                        </tr>\r\n                                    </tbody>\r\n                                    :\r\n                                    <>\r\n                                        {output.map((item, index) => (\r\n                                            <tbody key={index}>\r\n                                                <tr>\r\n                                                    <td>\r\n                                                        <input className=\"inputNode\" type=\"text\" value={item} onChange={(e) => changeOutput(index, e)} />\r\n                                                        <button onClick={() => removeOutput(index)}>-</button>\r\n                                                    </td>\r\n                                                </tr>\r\n                                            </tbody>\r\n                                        ))}\r\n                                    </>}\r\n                            </table>\r\n                            <table>\r\n                                <tr>\r\n                                    <th> Index: </th>\r\n                                    <td>\r\n                                        <input type=\"number\" value={index} onChange={(e) => changeIndex(e)} />\r\n                                    </td>\r\n                                </tr>\r\n                            </table>\r\n                        </>\r\n                        :\r\n                        <>\r\n                            <table className=\"NodeTable\">\r\n                                <thead>\r\n                                    <tr>\r\n                                        <th>\r\n                                            Input keys:\r\n                                    </th>\r\n\r\n                                    </tr>\r\n                                </thead>\r\n                                {input?.length == 0 ?\r\n                                    <tbody>\r\n                                        <tr>\r\n                                            <td>\r\n                                                null\r\n                                   </td>\r\n                                        </tr>\r\n                                    </tbody>\r\n                                    :\r\n                                    <>\r\n                                        {input.map((item, index) => (\r\n                                            <tbody key={index}>\r\n                                                <tr>\r\n                                                    <td>\r\n                                                        {item}\r\n                                                    </td>\r\n                                                </tr>\r\n                                            </tbody>\r\n                                        ))}\r\n                                    </>}\r\n                            </table>\r\n                            <table className=\"NodeTable\">\r\n                                <thead>\r\n                                    <tr>\r\n                                        <th>\r\n                                            Output keys:\r\n                                    </th>\r\n                                    </tr>\r\n                                </thead>\r\n                                {output.length == 0 ?\r\n                                    <tbody>\r\n                                        <tr>\r\n                                            <td>\r\n                                                null\r\n                                        </td>\r\n                                        </tr>\r\n                                    </tbody>\r\n                                    :\r\n                                    <>\r\n                                        {output.map((item, index) => (\r\n                                            <tbody key={index}>\r\n                                                <tr>\r\n                                                    <td>\r\n                                                        {item}\r\n                                                    </td>\r\n                                                </tr>\r\n                                            </tbody>\r\n                                        ))}\r\n                                    </>}\r\n                            </table>\r\n                            <table className=\"NodeTable\">\r\n                                <tbody>\r\n                                    <tr>\r\n                                        <th> Index: </th>\r\n                                        <td> {index ? index : 'null'} </td>\r\n                                    </tr>\r\n                                </tbody>\r\n                            </table>\r\n                        </>\r\n                    }\r\n                    <br />\r\n                    {props.creationFlag == false ?\r\n                        <div>\r\n                            <button onClick={() => onChange()}>{update == 1 ? 'Submit' : 'Update'}</button>\r\n                        </div>\r\n                        :\r\n                        <div>\r\n                        </div>\r\n                    }\r\n                </div>\r\n            }\r\n        </div>\r\n    )\r\n}","D:\\Podaci\\7. sem\\Arhitektura i projektovanje softvera\\ml-pipeline-vcs\\fe_app\\src\\Nodes\\DataStandardizer.jsx",["193","194","195","196","197","198","199","200","201","202","203"],"import React, { useEffect,useState } from 'react';\r\nimport \"../Flow/Flow.css\";\r\n\r\nexport default function DataStandardizer(props){\r\n\r\n    const [update,setUpdate] = useState(0);\r\n    const [details,setDetails] = useState(0);\r\n\r\n    const [input,setInput] = useState([]);\r\n    const [output,setOutput] = useState([]);\r\n\r\n\r\n    useEffect(() => {\r\n        if (props.creationFlag == true) {\r\n            setUpdate(true);\r\n\r\n            if(props.nodes[props.id].available_params == null) {\r\n                //mesto za dodavanje parametara\r\n\r\n                let nodes = [...props.nodes];\r\n\r\n                nodes[props.id].available_params = [];\r\n                \r\n                props.setNodes(nodes);\r\n            }\r\n        }\r\n\r\n    }, []);\r\n    \r\n\r\n    useEffect(() =>{\r\n        //if (props.creationFlag == false) {\r\n            setInput(props.nodes[props.id].input_keys);\r\n            setOutput(props.nodes[props.id]?.output_keys);\r\n        //}\r\n    },[props.nodes]);\r\n\r\n\r\n    const onChange = () =>\r\n    {\r\n        setUpdate(!update);\r\n        if(update){\r\n\r\n            let nodes = props.nodes;\r\n            \r\n            nodes[props.id].input_keys = input;\r\n            nodes[props.id].output_keys = output;\r\n\r\n            props.setNodes(nodes);\r\n            props.setUpdateFlag(1);\r\n        }\r\n    }\r\n\r\n    const deleteNode = () => {\r\n        let nodes = [...props.nodes];\r\n        nodes.splice(props.id,1);\r\n        props.setNodes(nodes);\r\n        console.log(nodes);\r\n    }\r\n\r\n    const addInput = () =>\r\n    {\r\n        setInput(input => [...input,\"null\"]);\r\n    }\r\n\r\n    const removeInput = (index) =>\r\n    {\r\n        var temp = [...input];\r\n        temp.splice(index,1);\r\n        setInput(temp);\r\n    }\r\n\r\n    const changeInput = (index,e) =>\r\n    {\r\n        var temp = [...input];\r\n        temp[index] = e.target.value;\r\n        setInput(temp);\r\n    }\r\n\r\n    const addOutput = () =>\r\n    {\r\n        setOutput(output => [...output,\"null\"]);\r\n    }\r\n\r\n    const removeOutput = (index) =>\r\n    {\r\n        var temp = [...output];\r\n        temp.splice(index,1);\r\n        setOutput(temp);\r\n    }\r\n\r\n    const changeOutput = (index,e) =>\r\n    {\r\n        var temp = [...output];\r\n        temp[index] = e.target.value;\r\n        setOutput(temp);\r\n    }\r\n\r\n\r\n\r\n    return(\r\n        <div className=\"node\">\r\n           {details == 0 && <br/>}\r\n            <span onClick={() => setDetails(!details)}>\r\n                <b>DataStandardizer </b>\r\n                {props.creationFlag &&\r\n                    <button onClick={() => deleteNode()}>-\r\n                    </button>}\r\n            </span>\r\n                {details == 1 &&\r\n                <div>\r\n                    <hr></hr>\r\n                    {update?\r\n                    <>\r\n                        <table className=\"NodeTable\">\r\n                                <thead>\r\n                                    <tr>\r\n                                        <th>\r\n                                            Input keys:\r\n                                        <button onClick={() => addInput()}>+</button>\r\n                                        </th>\r\n\r\n                                    </tr>\r\n                                </thead>\r\n                                {input.length == 0 ?\r\n                                    <tbody>\r\n                                        <tr>\r\n                                            <td>\r\n                                                null\r\n                                        </td>\r\n                                        </tr>\r\n                                    </tbody>\r\n                                    :\r\n                                    <>\r\n                                        {input.map((item, index) => (\r\n                                            <tbody key={index}>\r\n                                                <tr>\r\n                                                    <td>\r\n                                                        <input className=\"inputNode\" type=\"number\" value={item} onChange={(e) => changeInput(index, e)} />\r\n                                                        <button onClick={() => removeInput(index)}>-</button>\r\n                                                    </td>\r\n                                                </tr>\r\n                                            </tbody>\r\n                                        ))}\r\n                                    </>}\r\n                            </table>\r\n                            <table className=\"NodeTable\">\r\n                                <thead>\r\n                                    <tr>\r\n                                        <th>\r\n                                            Output keys:\r\n                                        <button onClick={() => addOutput()}>+</button>\r\n                                        </th>\r\n                                    </tr>\r\n                                </thead>\r\n                                {output.length == 0 ?\r\n                                    <tbody>\r\n                                        <tr>\r\n                                            <td>\r\n                                                null\r\n                                        </td>\r\n                                        </tr>\r\n                                    </tbody>\r\n                                    :\r\n                                    <>\r\n                                        {output.map((item, index) => (\r\n                                            <tbody key={index}>\r\n                                                <tr>\r\n                                                    <td>\r\n                                                        <input className=\"inputNode\" type=\"text\" value={item} onChange={(e) => changeOutput(index, e)} />\r\n                                                        <button onClick={() => removeOutput(index)}>-</button>\r\n                                                    </td>\r\n                                                </tr>\r\n                                            </tbody>\r\n                                        ))}\r\n                                    </>}\r\n                            </table>\r\n                    </>\r\n                    :\r\n                    <>\r\n                        <table className=\"NodeTable\">\r\n                                <thead>\r\n                                    <tr>\r\n                                        <th>\r\n                                            Input keys:\r\n                                    </th>\r\n\r\n                                    </tr>\r\n                                </thead>\r\n                                {input.length == 0 ?\r\n                                    <tbody>\r\n                                        <tr>\r\n                                            <td>\r\n                                                null\r\n                                   </td>\r\n                                        </tr>\r\n                                    </tbody>\r\n                                    :\r\n                                    <>\r\n                                        {input.map((item, index) => (\r\n                                            <tbody key={index}>\r\n                                                <tr>\r\n                                                    <td>\r\n                                                        {item}\r\n                                                    </td>\r\n                                                </tr>\r\n                                            </tbody>\r\n                                        ))}\r\n                                    </>}\r\n                            </table>\r\n                            <table className=\"NodeTable\">\r\n                                <thead>\r\n                                    <tr>\r\n                                        <th>\r\n                                            Output keys:\r\n                                    </th>\r\n                                    </tr>\r\n                                </thead>\r\n                                {output.length == 0 ?\r\n                                    <tbodu>\r\n                                        <tr>\r\n                                            <td>\r\n                                                null\r\n                                        </td>\r\n                                        </tr>\r\n                                    </tbodu>\r\n                                    :\r\n                                    <>\r\n                                        {output.map((item, index) => (\r\n                                            <tbody key={index}>\r\n                                                <tr>\r\n                                                    <td>\r\n                                                        {item}\r\n                                                    </td>\r\n                                                </tr>\r\n                                            </tbody>\r\n                                        ))}\r\n                                    </>}\r\n                            </table>\r\n                    </>\r\n                    }\r\n                    <br/>\r\n                    {props.creationFlag == false ?\r\n                        <div>\r\n                            <button onClick={() => onChange()}>{update == 1 ? 'Submit' : 'Update'}</button>\r\n                        </div>\r\n                        :\r\n                        <div>\r\n                        </div>\r\n                    }\r\n                </div>  \r\n            }\r\n        </div>\r\n    )\r\n}","D:\\Podaci\\7. sem\\Arhitektura i projektovanje softvera\\ml-pipeline-vcs\\fe_app\\src\\Nodes\\ModelPredictor.jsx",["204","205","206","207","208","209","210","211","212","213","214","215"],"import React, { useEffect, useState } from 'react';\r\n\r\nexport default function ModelPredictor(props) {\r\n\r\n    const [details, setDetails] = useState(0);\r\n    const [update, setUpdate] = useState(0);\r\n\r\n    const [index, setIndex] = useState();\r\n\r\n    const [input, setInput] = useState([]);\r\n    const [output, setOutput] = useState([]);\r\n\r\n\r\n    useEffect(() => {\r\n        if (props.creationFlag == true) {\r\n            setUpdate(true);\r\n\r\n            if(props.nodes[props.id].available_params == null) {\r\n                //mesto za dodavanje parametara\r\n\r\n                let nodes = [...props.nodes];\r\n\r\n                nodes[props.id].available_params = [\"index\"];\r\n                nodes[props.id].params = {\r\n                    \"index\": null\r\n                }\r\n                props.setNodes(nodes);\r\n            }\r\n        }\r\n\r\n    }, []);\r\n\r\n\r\n    useEffect(() => {\r\n        //if (props.creationFlag == false) {\r\n            setIndex(props.nodes[props.id].params[\"index\"]);\r\n            setInput(props.nodes[props.id].input_keys);\r\n            setOutput(props.nodes[props.id].output_keys);\r\n        //}\r\n    }, [props.nodes]);\r\n\r\n\r\n\r\n    const onChange = () => {\r\n        setUpdate(!update);\r\n        if (update) {\r\n\r\n            let nodes = [...props.nodes];\r\n            nodes[props.id].input_keys = input;\r\n            nodes[props.id].output_keys = output;\r\n            nodes[props.id].params[\"index\"] = index;\r\n            \r\n            props.setNodes(nodes);\r\n            props.setUpdateFlag(1);\r\n        }\r\n    }\r\n\r\n    const deleteNode = () => {\r\n        let nodes = [...props.nodes];\r\n        nodes.splice(props.id,1);\r\n        props.setNodes(nodes);\r\n        console.log(nodes);\r\n    }\r\n\r\n    const addInput = () => {\r\n\r\n        let temp = [...input];\r\n        temp.push(\"null\");\r\n        setInput(temp);\r\n\r\n        if (props.creationFlag) {\r\n\r\n            let nodes = [...props.nodes];\r\n            nodes[props.id].input_keys = temp;\r\n            props.setNodes(nodes);\r\n        }\r\n\r\n    }\r\n    const removeInput = (index) => {\r\n        var temp = [...input];\r\n        temp.splice(index, 1);\r\n        setInput(temp);\r\n\r\n        if (props.creationFlag) {\r\n\r\n            let nodes = [...props.nodes];\r\n            nodes[props.id].input_keys = temp;\r\n            props.setNodes(nodes);\r\n        }\r\n    }\r\n\r\n    const changeInput = (index, e) => {\r\n        var temp = [...input];\r\n        temp[index] = e.target.value;\r\n        setInput(temp);\r\n\r\n\r\n        if (props.creationFlag) {\r\n\r\n            let nodes = [...props.nodes];\r\n            nodes[props.id].input_keys = temp;\r\n            props.setNodes(nodes);\r\n        }\r\n    }\r\n\r\n    const addOutput = () => {\r\n\r\n        let temp = [...output];\r\n        temp.push(\"null\");\r\n        setOutput(temp);\r\n\r\n        if (props.creationFlag) {\r\n\r\n            let nodes = [...props.nodes];\r\n            nodes[props.id].output_keys = temp;\r\n            props.setNodes(nodes);\r\n        }\r\n    }\r\n\r\n    const removeOutput = (index) => {\r\n        var temp = [...output];\r\n        temp.splice(index, 1);\r\n        setOutput(temp);\r\n\r\n        if (props.creationFlag) {\r\n\r\n            let nodes = [...props.nodes];\r\n            nodes[props.id].output_keys = temp;\r\n            props.setNodes(nodes);\r\n        }\r\n    }\r\n\r\n    const changeOutput = (index, e) => {\r\n        var temp = [...output];\r\n        temp[index] = e.target.value;\r\n        setOutput(temp);\r\n\r\n        if (props.creationFlag) {\r\n\r\n            let nodes = [...props.nodes];\r\n            nodes[props.id].output_keys = temp;\r\n            props.setNodes(nodes);\r\n        }\r\n    }\r\n\r\n    const changeIndex = (e) => {\r\n        setIndex(e.target.value)\r\n\r\n        if (props.creationFlag) {\r\n            let nodes = [...props.nodes];\r\n            nodes[props.id].params[\"index\"] = e.target.value;\r\n            props.setNodes(nodes);\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div className=\"node\">\r\n            {details == 0 && <br />}\r\n            <span onClick={() => setDetails(!details)}>\r\n                <b>ModelPredictor </b>\r\n                {props.creationFlag &&\r\n                    <button onClick={() => deleteNode()}>-\r\n                    </button>}\r\n            </span>\r\n            {details == 1 &&\r\n                <div>\r\n                    <hr></hr>\r\n                    {update == 1 ?\r\n                        <>\r\n                            <table className=\"NodeTable\">\r\n                                <thead>\r\n                                    <tr>\r\n                                        <th>\r\n                                            Input keys:\r\n                                        <button onClick={() => addInput()}>+</button>\r\n                                        </th>\r\n\r\n                                    </tr>\r\n                                </thead>\r\n                                {input.length == 0 ?\r\n                                    <tbody>\r\n                                        <tr>\r\n                                            <td>\r\n                                                null\r\n                                        </td>\r\n                                        </tr>\r\n                                    </tbody>\r\n                                    :\r\n                                    <>\r\n                                        {input.map((item, index) => (\r\n                                            <tbody key={index}>\r\n                                                <tr>\r\n                                                    <td>\r\n                                                        <input className=\"inputNode\" type=\"text\" value={item} onChange={(e) => changeInput(index, e)} />\r\n                                                        <button onClick={() => removeInput(index)}>-</button>\r\n                                                    </td>\r\n                                                </tr>\r\n                                            </tbody>\r\n                                        ))}\r\n                                    </>}\r\n                            </table>\r\n                            <table className=\"NodeTable\">\r\n                                <thead>\r\n                                    <tr>\r\n                                        <th>\r\n                                            Output keys:\r\n                                        <button onClick={() => addOutput()}>+</button>\r\n                                        </th>\r\n                                    </tr>\r\n                                </thead>\r\n                                {output.length == 0 ?\r\n                                    <tbody>\r\n                                        <tr>\r\n                                            <td>\r\n                                                null\r\n                                        </td>\r\n                                        </tr>\r\n                                    </tbody>\r\n                                    :\r\n                                    <>\r\n                                        {output.map((item, index) => (\r\n                                            <tbody key={index}>\r\n                                                <tr>\r\n                                                    <td>\r\n                                                        <input className=\"inputNode\" type=\"text\" value={item} onChange={(e) => changeOutput(index, e)} />\r\n                                                        <button onClick={() => removeOutput(index)}>-</button>\r\n                                                    </td>\r\n                                                </tr>\r\n                                            </tbody>\r\n                                        ))}\r\n                                    </>}\r\n                            </table>\r\n                            <table>\r\n                                <tr>\r\n                                    <th> Index: </th>\r\n                                    <td>\r\n                                        <input type=\"number\" value={index} onChange={(e) => changeIndex(e)} />\r\n                                    </td>\r\n                                </tr>\r\n                            </table>\r\n                        </>\r\n                        :\r\n                        <>\r\n                            <table className=\"NodeTable\">\r\n                                <thead>\r\n                                    <tr>\r\n                                        <th>\r\n                                            Input keys:\r\n                                    </th>\r\n\r\n                                    </tr>\r\n                                </thead>\r\n                                {input?.length == 0 ?\r\n                                    <tbody>\r\n                                        <tr>\r\n                                            <td>\r\n                                                null\r\n                                   </td>\r\n                                        </tr>\r\n                                    </tbody>\r\n                                    :\r\n                                    <>\r\n                                        {input.map((item, index) => (\r\n                                            <tbody key={index}>\r\n                                                <tr>\r\n                                                    <td>\r\n                                                        {item}\r\n                                                    </td>\r\n                                                </tr>\r\n                                            </tbody>\r\n                                        ))}\r\n                                    </>}\r\n                            </table>\r\n                            <table className=\"NodeTable\">\r\n                                <thead>\r\n                                    <tr>\r\n                                        <th>\r\n                                            Output keys:\r\n                                    </th>\r\n                                    </tr>\r\n                                </thead>\r\n                                {output.length == 0 ?\r\n                                    <tbody>\r\n                                        <tr>\r\n                                            <td>\r\n                                                null\r\n                                        </td>\r\n                                        </tr>\r\n                                    </tbody>\r\n                                    :\r\n                                    <>\r\n                                        {output.map((item, index) => (\r\n                                            <tbody key={index}>\r\n                                                <tr>\r\n                                                    <td>\r\n                                                        {item}\r\n                                                    </td>\r\n                                                </tr>\r\n                                            </tbody>\r\n                                        ))}\r\n                                    </>}\r\n                            </table>\r\n                            <table className=\"NodeTable\">\r\n                                <tbody>\r\n                                    <tr>\r\n                                        <th> Index: </th>\r\n                                        <td> {index ? index : 'null'} </td>\r\n                                    </tr>\r\n                                </tbody>\r\n                            </table>\r\n                        </>\r\n                    }\r\n                    <br />\r\n                    {props.creationFlag == false ?\r\n                        <div>\r\n                            <button onClick={() => onChange()}>{update == 1 ? 'Submit' : 'Update'}</button>\r\n                        </div>\r\n                        :\r\n                        <div>\r\n                        </div>\r\n                    }\r\n                </div>\r\n            }\r\n        </div>\r\n    )\r\n}","D:\\Podaci\\7. sem\\Arhitektura i projektovanje softvera\\ml-pipeline-vcs\\fe_app\\src\\Main\\Main.jsx",[],"D:\\Podaci\\7. sem\\Arhitektura i projektovanje softvera\\ml-pipeline-vcs\\fe_app\\src\\Main\\Header.jsx",["216"],"import React from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport { useCookies } from 'react-cookie';\r\nimport {useHistory} from \"react-router-dom\";\r\nimport \"./Header.css\";\r\n\r\nexport default function Header()\r\n{\r\n    const [cookies, removeCookies] = useCookies(['user']);\r\n    const history = useHistory();\r\n\r\n    const logout = async () => {\r\n        console.log(`Token ${cookies.token}`);\r\n        /*\r\n        const requestOptions = {\r\n            method: 'PUT',\r\n            header: new Headers({\r\n                   'Authorization': `Token ${cookies.token}`\r\n                })\r\n            };\r\n            \r\n\r\n        const requestOptions = {\r\n        method: 'PUT',\r\n        header:{\r\n                'Authorization': `Token ${cookies.token}`\r\n           },\r\n        body: JSON.stringify({'id':cookie.id})  \r\n        };*/\r\n        const requestOptions = {\r\n            method: 'PUT',\r\n            headers:{\r\n                    'Authorization': `Token ${cookies.token}`,\r\n                    'Content-Type': 'application/json',\r\n                    'accept': 'application/json'\r\n                },\r\n            body: JSON.stringify({\"created_by\":cookies.id})  \r\n        };\r\n        console.log(requestOptions);\r\n        const response = await fetch(\"http://localhost:8000/easy_flow/v1/logout/\",requestOptions);\r\n        console.log(response);\r\n\r\n        console.log(\"Logout\");\r\n        removeCookies(\"token\");\r\n        removeCookies(\"id\");\r\n        history.push(\"/\");\r\n    }\r\n\r\n    return(\r\n        <header>\r\n            <nav>\r\n                <ul>\r\n                    <li>\r\n                        <Link to=\"/main\">\r\n                            Profile\r\n                        </Link>\r\n                    </li>\r\n                    <li>\r\n                        <Link to=\"/main/teamCreate\">\r\n                            Create new team\r\n                        </Link>\r\n                    </li>\r\n                    <li>\r\n                            Teams\r\n                    </li>\r\n\r\n                    <li id=\"logout\">\r\n                        <a onClick={logout}>Logout</a>\r\n                    </li>\r\n                </ul>\r\n            </nav>\r\n        </header>\r\n    )\r\n}","D:\\Podaci\\7. sem\\Arhitektura i projektovanje softvera\\ml-pipeline-vcs\\fe_app\\src\\Home\\About.jsx",[],"D:\\Podaci\\7. sem\\Arhitektura i projektovanje softvera\\ml-pipeline-vcs\\fe_app\\src\\Home\\Home.jsx",["217","218","219"],"\r\nimport { useState } from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport './Home.css';\r\nimport LogIn from './LogIn';\r\nimport SingUp from './SignUp';\r\n\r\nexport default function Home() \r\n{\r\n\r\n  const [isLog, setIsLog] = useState(true); \r\n\r\n  const handlerRegister = () =>\r\n  {\r\n    setIsLog(false);\r\n  }\r\n\r\n  const handlerLogIn = () =>\r\n  {\r\n    setIsLog(true)\r\n  }\r\n  \r\n    return (\r\n      <div className=\"content\">\r\n        <div className=\"title\">\r\n          <h1>Welcome to EasyFlow</h1>\r\n          <p className=\"about\">\r\n            We are framework designed for...\r\n            {/* <Link className=\"linkToAbout\" to = \"/about\"> About</Link> */}\r\n            <Link className=\"linkToAbout\" \r\n            to ={{\r\n              pathname:\"/about\",\r\n              state: {modal: \"true\"},\r\n            }}>\r\n              About\r\n            </Link>\r\n            <br/>\r\n            i tako dalje\r\n          </p>\r\n        </div>\r\n        <div className=\"signDiv\">\r\n          <a onClick={handlerRegister}> Register </a>\r\n          /\r\n          <a onClick={handlerLogIn}> LogIn </a>\r\n          <br/>\r\n          {isLog == true ?\r\n            <LogIn></LogIn>\r\n            :<SingUp></SingUp>\r\n          }\r\n          <br/>\r\n        </div>\r\n      </div>\r\n    );\r\n  }","D:\\Podaci\\7. sem\\Arhitektura i projektovanje softvera\\ml-pipeline-vcs\\fe_app\\src\\Home\\LogIn.js",["220","221"],"import React, { useState } from 'react'\r\nimport { useCookies } from 'react-cookie';\r\nimport {useHistory} from \"react-router-dom\";\r\nimport { useToasts } from 'react-toast-notifications'\r\n\r\n\r\nexport default function LogIn() {\r\n\r\n    const [username, setUsername] = useState(\"\");\r\n    const [password, setPassword] = useState(\"\");\r\n    const [isError, setIsError] = useState(false);\r\n    const [cookies, setCookies, removeCookies] = useCookies(['user']);\r\n\r\n    const history = useHistory();\r\n    const { addToast } = useToasts()\r\n\r\n    const updateUsername = e => {\r\n        setUsername(e.target.value);\r\n    }\r\n    const updatePassword = e => {\r\n        setPassword(e.target.value);\r\n    }\r\n\r\n\r\n    async function LogIn(){\r\n\r\n        //console.log(JSON.stringify({\"username\":username,\"password\":password}));\r\n        const requestOptions = {\r\n            method: 'POST',\r\n            headers: {'Content-Type': 'application/json' },\r\n            body: JSON.stringify({\"username\":username,\"password\":password})\r\n        };\r\n\r\n        setIsError(false);\r\n\r\n        const response = await fetch('http://localhost:8000/easy_flow/v1/login/',requestOptions);\r\n        const data = await response.json();\r\n\r\n        if(response.ok)\r\n        {\r\n            setCookies(\"token\",data.token);\r\n            setCookies(\"id\",data.user.id);\r\n            console.log(\"OK\");\r\n            console.log(data);\r\n\r\n            addToast(\"Successful login\", {\r\n                appearance: 'success',\r\n                autoDismiss: true,\r\n            })\r\n\r\n            history.push(\"/main\");\r\n        }\r\n        else{\r\n            //removeCookie(\"token\");\r\n            setIsError(true);\r\n            console.log(\"ERROR\");\r\n        }\r\n        \r\n    }\r\n\r\n    return(\r\n        <div className=\"divSignup\">\r\n            { isError && <div> Incorect username or password </div> }\r\n            <br/>\r\n            Username: <input className=\"inputSignup\" type=\"text\" value={username} onChange={updateUsername}/>\r\n            <br/><br/>\r\n            Password: <input className=\"inputSignup\" type=\"text\" value={password} onChange={updatePassword}/>\r\n            <br/><br/>\r\n            <button id=\"buttonSingup\" onClick={LogIn}>LogIn</button>\r\n            <br/><br/>\r\n        </div>\r\n    )\r\n}","D:\\Podaci\\7. sem\\Arhitektura i projektovanje softvera\\ml-pipeline-vcs\\fe_app\\src\\Home\\SignUp.js",["222","223","224","225"],"import React, { useEffect,useState } from 'react'\r\nimport { useCookies } from 'react-cookie';\r\nimport {useHistory} from \"react-router-dom\";\r\nimport { useToasts } from 'react-toast-notifications'\r\n\r\nexport default function SingUp() {\r\n\r\n    const [firstname, setFirstname] = useState(\"\");\r\n    const [lastname, setLastname] = useState(\"\");\r\n    const [username, setUsername] = useState(\"\");\r\n    const [email, setEmail] = useState(\"\");\r\n    const [password, setPassword] = useState(\"\");\r\n    const [isError, setIsError] = useState(false);\r\n    const [cookies, setCookies, removeCookies] = useCookies(['user']);\r\n\r\n    const history = useHistory();\r\n    const { addToast } = useToasts()\r\n\r\n    const updateFirstname = e => {\r\n        setFirstname(e.target.value);\r\n    }\r\n    const updateLastname = e => {\r\n        setLastname(e.target.value);\r\n    }\r\n    const updateUsername = e => {\r\n        setUsername(e.target.value);\r\n    }\r\n    const updateEmail = e => {\r\n        setEmail(e.target.value);\r\n    }\r\n    const updatePassword = e => {\r\n        setPassword(e.target.value);\r\n    }\r\n\r\n    const createUser = async(e) =>{\r\n        e.preventDefault();\r\n        const requestOptions = {\r\n            method: 'POST',\r\n            headers: {'Content-Type': 'application/json' },\r\n            body: JSON.stringify({\"username\":username,\"email\":email,\"password\":password,\"first_name\":firstname,\"last_name\":lastname})};\r\n            \r\n        const response = await fetch('http://localhost:8000/easy_flow/v1/user_create/',requestOptions);\r\n        const data = await response.json();\r\n\r\n        if(response.ok)\r\n        {\r\n            setCookies(\"token\",data.token);\r\n            setCookies(\"id\",data.user.id);\r\n            console.log(\"OK\");\r\n            console.log(data);\r\n\r\n            addToast(\"Successful registration\", {\r\n                appearance: 'success',\r\n                autoDismiss: true,\r\n            })\r\n\r\n            history.push(\"/main\");\r\n        }\r\n        else{\r\n            //removeCookie(\"token\");\r\n            setIsError(true);\r\n            console.log(\"ERROR\");\r\n        }\r\n        \r\n    }\r\n\r\n    return (\r\n        <div className=\"divSignup\">\r\n            <form onSubmit={createUser}>\r\n                Username: <input className=\"inputSignup\" type=\"text\" value={username} onChange={updateUsername} />\r\n                <br /><br />\r\n                E-mail: <input className=\"inputSignup\" type=\"text\" value={email} onChange={updateEmail} />\r\n                <br /><br />\r\n                Fistname: <input className=\"inputSignup\" type=\"text\" value={firstname} onChange={updateFirstname} />\r\n                <br /><br />\r\n                Lastname: <input className=\"inputSignup\" type=\"text\" value={lastname} onChange={updateLastname} />\r\n                <br /><br />\r\n                Password: <input className=\"inputSignup\" type=\"text\" value={password} onChange={updatePassword} />\r\n                <br /><br />\r\n                <button type=\"submit\" id=\"buttonSingup\">SignUp</button>\r\n            </form>\r\n        </div>\r\n    )\r\n}","D:\\Podaci\\7. sem\\Arhitektura i projektovanje softvera\\ml-pipeline-vcs\\fe_app\\src\\UserStart\\UserProfil.jsx",["226","227","228","229","230","231","232","233","234"],"import React, { useEffect,useReducer,useState } from 'react'\r\nimport { BrowserRouter as Router, Switch, Route } from 'react-router-dom';\r\nimport { Link } from 'react-router-dom';\r\nimport { useCookies } from 'react-cookie';\r\nimport './Start.css'\r\n\r\nexport default function UserProfil({user}){\r\n    \r\n    const [cookies] = useCookies(['user']);\r\n\r\n    const [flowJson,setFlowJson] = useState();\r\n    const [flow,setFlow] = useState(\r\n        {\r\n            created_by: cookies.id,\r\n            serialized_flow: {}\r\n        })\r\n\r\n    useEffect(() => {\r\n        //getUser();\r\n    },[] );\r\n\r\n\r\n    return (\r\n        <div className=\"contentBody\" id=\"Info\">\r\n            <table className=\"InfoTable\">\r\n                <thead>\r\n                    <tr>\r\n                        <th><h2>Profile info</h2></th>\r\n                    </tr>\r\n                </thead>\r\n                <tbody>\r\n                    <tr>\r\n                        <th>\r\n                            Username:\r\n                        </th>\r\n                        <td>\r\n                            {user?.username}\r\n                        </td>\r\n                    </tr>\r\n                    <tr>\r\n                        <th>\r\n                            Email:\r\n                        </th>\r\n                        <td>\r\n                            {user?.email}\r\n                        </td>\r\n                    </tr>\r\n                    <tr>\r\n                        <th>\r\n                            Firstname:\r\n                        </th>\r\n                        <td>\r\n                            {user?.first_name}\r\n                        </td>\r\n                    </tr>\r\n                    <tr>\r\n                        <th>\r\n                            Lastname:\r\n                        </th>\r\n                        <td>\r\n                            {user?.last_name}\r\n                        </td>\r\n                    </tr>\r\n                </tbody>\r\n            </table>\r\n\r\n        \r\n\r\n        </div>\r\n    )\r\n}","D:\\Podaci\\7. sem\\Arhitektura i projektovanje softvera\\ml-pipeline-vcs\\fe_app\\src\\UserStart\\Start.js",["235","236","237"],"import React, { useEffect, useState } from 'react'\r\nimport { Link } from 'react-router-dom';\r\nimport './Start.css'\r\nimport { useCookies } from 'react-cookie';\r\n\r\nexport default function Start({ children }) {\r\n\r\n    const [cookies] = useCookies(['user']);\r\n    const [user, setUser] = useState([]);\r\n    const [teams, setTeams] = useState([]);\r\n    const [myTeams, setMyTeams] = useState([]);\r\n\r\n    useEffect(() => {\r\n        getUser();\r\n    }, []);\r\n\r\n    const getUser = async () => {\r\n        const requestOptions = {\r\n            method: 'GET',\r\n            headers: {\r\n                'Authorization': 'Token ' + cookies.token,\r\n                'Content-Type': 'application/json',\r\n                'accept': 'application/json'\r\n            }\r\n        };\r\n        const response = await fetch(\"http://localhost:8000/easy_flow/v1/user/\" + cookies.id + \"/\", requestOptions);\r\n        const data = await response.json();\r\n\r\n        setUser(data);\r\n        setTeams(data.teams);\r\n        setMyTeams(data.created_teams);\r\n    }\r\n\r\n    return (\r\n        <div className=\"content\" id=\"start\">\r\n            <aside id=\"teams\">\r\n                <nav>\r\n                    <ul>\r\n                        <p>\r\n                            <Link to=\"/main/teamCreate\">\r\n                                Create new team\r\n                            </Link>\r\n                        </p>\r\n                        Your teams\r\n                        {myTeams?.length == 0 ?\r\n                            <p class=\"info\">You dont have teams</p>\r\n                            :\r\n                            <>{myTeams?.map(team => (\r\n                                <li key={team.name}>\r\n                                    <Link to={`/main/team/${team.id}/${1}`}>\r\n                                        {team.name}\r\n                                    </Link>\r\n                                </li>\r\n                            ))}</>}\r\n                        <br/>\r\n                        You are member\r\n                        {teams?.length == 0 ?\r\n                            <p class=\"info\">You wasnt member of any team</p>\r\n                            :\r\n                            <>{teams?.map(team => (\r\n                                <li key={team.name}>\r\n                                    <Link to={`/main/team/${team.id}/${0}`}>\r\n                                        {team.leader.username}/{team.name}\r\n                                    </Link>\r\n                                </li>\r\n                            ))}</>}\r\n                    </ul>\r\n                </nav>\r\n            </aside>\r\n            <main>\r\n                {children(user)}\r\n            </main>\r\n        </div>\r\n    )\r\n}","D:\\Podaci\\7. sem\\Arhitektura i projektovanje softvera\\ml-pipeline-vcs\\fe_app\\src\\UserStart\\Team.jsx",["238","239","240"],"import React, { useEffect,useState } from 'react'\r\nimport { useParams } from \"react-router-dom\";\r\nimport { useCookies } from 'react-cookie';\r\nimport { Link } from 'react-router-dom';\r\n\r\nexport default function Team(){\r\n\r\n    const {teamid} = useParams();\r\n    const {leader} = useParams();\r\n    const [team,setTeam] = useState([]);\r\n    const [flows,setFlows] = useState([]);\r\n    const [cookies] = useCookies(['user']);\r\n\r\n\r\n    const getTeam = async () =>\r\n    {\r\n        const requestOptions = {\r\n            method: 'GET',\r\n            headers:{\r\n                'Authorization': 'Token ' + cookies.token,\r\n                'Content-Type': 'application/json',\r\n                'accept': 'application/json'\r\n            }\r\n            };\r\n        const response = await fetch(\"http://localhost:8000/easy_flow/v1/team/\" + teamid +\"/\", requestOptions);\r\n        const data = await response.json();\r\n        setTeam(data);\r\n        setFlows(data.flows);\r\n    }\r\n    \r\n    useEffect(() => {\r\n        getTeam();\r\n    },[teamid] );\r\n\r\n\r\n    const [username, setUsername] = useState(\"\");\r\n\r\n    const updateUsername = e => {\r\n        setUsername(e.target.value);\r\n    }\r\n\r\n\r\n    const addMember = async(e) => {\r\n        e.preventDefault();\r\n        const requestOptions = {\r\n            method: 'PUT',\r\n            headers:{\r\n                'Authorization': 'Token ' + cookies.token,\r\n                'Content-Type': 'application/json',\r\n                'accept': 'application/json'\r\n            },\r\n            body: JSON.stringify({\"created_by\":cookies.id,\"user\":username,\"team\":teamid})\r\n        };\r\n\r\n        const response = await fetch(\"http://localhost:8000/easy_flow/v1/add_member/\",requestOptions);\r\n        const data = await response.json();\r\n\r\n        if(response.ok)\r\n        {\r\n            console.log(\"OK\");\r\n        }\r\n        else\r\n        {\r\n            console.log(\"ERROR\");\r\n        }\r\n    }\r\n\r\n\r\n    const removeFlow = async(flowid) => {\r\n        const requestOptions = {\r\n            method: 'DELETE',\r\n            headers:{\r\n                'Authorization': 'Token ' + cookies.token,\r\n                'Content-Type': 'application/json',\r\n                'accept': 'application/json'\r\n            },\r\n            body: JSON.stringify({\"flow\":flowid})\r\n        };\r\n\r\n        const response = await fetch(\"http://localhost:8000/easy_flow/v1/flow_remove/\",requestOptions);\r\n        \r\n        console.log(response);    \r\n        getTeam();\r\n    }\r\n\r\n\r\n    return(\r\n        <div className=\"contentBody\" id=\"Info\">\r\n            <div>\r\n                <h2>Team info</h2>\r\n                <p>Name: {team?.name}</p>\r\n                <h2>Members</h2>\r\n                <ul>\r\n                {team?.members?.map(member => (\r\n                    <li key={member.username}>{member.username}</li>\r\n                  ))}\r\n                </ul>\r\n                <br/>\r\n                {leader == true &&\r\n                <div>\r\n                <p>Add member:</p>\r\n                <form onSubmit={addMember}>\r\n                    User email: \r\n                    <input className=\"inputSignup\" type=\"text\" value={username} onChange={updateUsername} />\r\n                    <br /><br />\r\n                    <button type=\"submit\" id=\"buttonSingup\">Add member</button>\r\n                </form>\r\n                </div>}\r\n            </div>\r\n            \r\n            <div className=\"flows\">\r\n                <h2>Flows created by this team:</h2>\r\n                <table className=\"flowsTable\">\r\n                    <thead>\r\n                        <tr>\r\n                            <th>Flow name</th>\r\n                            <th>Created:</th>\r\n                        </tr>\r\n                    </thead>\r\n                    <tbody>\r\n                        {flows?.map(flow=>(\r\n                            <tr key={flow.name}>\r\n                                <td>\r\n                                    <Link to={`/flow/${teamid}/${flow.id}/${flow.name}/${flow.root.id}`}>\r\n                                        {flow.name}\r\n                                    </Link>\r\n                                </td>\r\n                                <td>\r\n                                    {flow.timestamp.slice(0,10)+\"   \"+flow.timestamp.slice(11,19)}\r\n                                </td>\r\n                                <td>\r\n                                    <button id=\"delete\" onClick={() => removeFlow(flow.id)}>\r\n                                        Remove\r\n                                    </button>\r\n                                </td>\r\n                            </tr>\r\n                        ))}\r\n                    </tbody>\r\n                </table>\r\n\r\n                <br/>\r\n                <br/>\r\n\r\n                <Link type=\"button\" to={`/flow/${teamid}/create`}>\r\n                    Create new flow\r\n                </Link>\r\n                \r\n            </div>\r\n        </div>\r\n    )\r\n}","D:\\Podaci\\7. sem\\Arhitektura i projektovanje softvera\\ml-pipeline-vcs\\fe_app\\src\\UserStart\\TeamCreate.jsx",["241"],"import React, { useEffect,useState } from 'react';\r\nimport { useCookies } from 'react-cookie';\r\n\r\nexport default function TeamCreate({user}){\r\n\r\n    const [teamname, setTeamname] = useState(\"\");\r\n    const [cookies] = useCookies(['user']);\r\n\r\n    const updateTeamname = e => {\r\n        setTeamname(e.target.value);\r\n    }\r\n\r\n    const createTeam = async(e) => {\r\n        e.preventDefault();\r\n        const requestOptions = {\r\n            method: 'POST',\r\n            headers:{\r\n                'Authorization': 'Token ' + cookies.token,\r\n                'Content-Type': 'application/json',\r\n                'accept': 'application/json'\r\n            },\r\n            body: JSON.stringify({\"created_by\":cookies.id,\"name\":teamname})\r\n        };\r\n\r\n        const response = await fetch(\"http://localhost:8000/easy_flow/v1/team_create/\",requestOptions);\r\n        const data = await response.json();\r\n        console.log(data);\r\n\r\n        if(response.ok)\r\n        {\r\n            console.log(\"OK\");\r\n            console.log(data);\r\n        }\r\n        else\r\n        {\r\n            console.log(\"ERROR\");\r\n        }\r\n    }\r\n\r\n    return(\r\n        <div className=\"contentBody\">\r\n            \r\n        <form onSubmit={createTeam}>\r\n            Team name: <input className=\"inputSignup\" type=\"text\" value={teamname} onChange={updateTeamname} />\r\n            <br /><br />\r\n            <button type=\"submit\" id=\"buttonSingup\">Create team</button>\r\n        </form>\r\n    </div>\r\n    )\r\n}\r\n","D:\\Podaci\\7. sem\\Arhitektura i projektovanje softvera\\ml-pipeline-vcs\\fe_app\\src\\Flow\\FlowCreate.jsx",["242","243","244","245","246","247","248","249","250","251","252"],"import React, { useEffect,useState,useReducer } from 'react';\r\nimport './Flow.css';\r\nimport { useCookies } from 'react-cookie';\r\n\r\nimport { useParams } from 'react-router-dom';\r\nimport DatasetLoader from '../Nodes/DatasetLoader';\r\nimport ModelLoader from '../Nodes/ModelLoader';\r\nimport DataNormalizer from '../Nodes/DataNormalizer';\r\nimport DataPlotter from '../Nodes/DataPlotter';\r\nimport ModelEvaluator from '../Nodes/ModelEvaluator';\r\nimport DataStandardizer from '../Nodes/DataStandardizer';\r\nimport ModelPredictor from '../Nodes/ModelPredictor';\r\n\r\n\r\nexport default function FlowCreate(){\r\n\r\n    const [cookies] = useCookies(['user']);\r\n    const {teamid} = useParams();\r\n\r\n    const [flowname, setFlowName] = useState(\"\");\r\n    const [initialVersion, setInitialVersion] = useState(\"\");\r\n\r\n    const [nodes, setNodes] = useState([]);\r\n    const [isMount, setIsMount] = useState(1);\r\n    const [save, setSave] = useState(false);\r\n\r\n    //const [nodeComponents, setNodeComponents] = useState();\r\n    //const [nodesCount, setNodesCount] = useState(0);\r\n\r\n    const [flow, setFlow] = useState({\r\n        \"created_by\": cookies.id,\r\n        \"team\" : teamid,\r\n        serialized_flow: {\r\n            flow_name: flowname,\r\n            flow_version: initialVersion,\r\n            nodes: nodes,\r\n        }\r\n    });\r\n\r\n        \r\n    useEffect(() => {\r\n        if(isMount)\r\n            setIsMount(0);\r\n        else {\r\n            if(save==true){\r\n                //createFlowVersion();\r\n                console.log(flow);\r\n                setSave(false);\r\n            }\r\n        }\r\n    },[flow] );\r\n\r\n\r\n    // useEffect(() => {\r\n    //     console.log(nodes)\r\n    // },[nodes] );\r\n\r\n\r\n    const createFlowVersion = async() => {\r\n\r\n        const requestOptions = {\r\n            method: 'POST',\r\n            headers:{\r\n                'Authorization': 'Token ' + cookies.token,\r\n                'Content-Type': 'application/json',\r\n                'accept': 'application/json'\r\n            },\r\n            body: JSON.stringify(flow)\r\n        };\r\n\r\n        const response = await fetch(\"http://localhost:8000/easy_flow/v1/flow_create/\",requestOptions);\r\n        const data = await response.json();\r\n        console.log(data);\r\n    }\r\n\r\n    const handleSave = () => {\r\n        setFlow({...flow, serialized_flow: {...flow.serialized_flow,flow_name: flowname, flow_version: initialVersion, nodes: nodes}});\r\n        setSave(true);\r\n    }\r\n\r\n    const addNode = (type) => {\r\n\r\n        var node = {\r\n            \"available_params\": null,\r\n            \"input_keys\": [],\r\n            \"output_keys\": [],\r\n            \"params\": {},\r\n            \"type\": type\r\n        }\r\n        setNodes(nodes => [...nodes, node]);\r\n    }\r\n             \r\n    return(\r\n        <div className=\"flowCreate\">\r\n            <div className=\"nodeSelection\">\r\n                Flow name: <input className=\"inputNode\" type=\"text\" value={flowname} onChange={(e) => setFlowName(e.target.value)}/>\r\n                <br/>\r\n                Initial version: <input className=\"inputNode\" type=\"text\" value={initialVersion} onChange={(e) => setInitialVersion(e.target.value)}/>\r\n                <p id=\"naslov\">Create initial version for: {flowname}</p>\r\n                <p>Add commponent:</p>\r\n                <ul>\r\n                    <p className=\"link\" onClick={() => addNode(\"data_normalizer\")}>- DataNormalizer</p>\r\n                    <p className=\"link\" onClick={() => addNode(\"data_plotter\")}>- DataPlotter</p>\r\n                    <p className=\"link\" onClick={() => addNode(\"keras_dataset_loader\")}>- DatasetLoader</p>\r\n                    <p className=\"link\" onClick={() => addNode(\"data_standardizer\")}>- DataStandardizer</p>\r\n                    <p className=\"link\" onClick={() => addNode(\"model_evaluator\")}>- ModelEvaluator</p>\r\n                    <p className=\"link\" onClick={() => addNode(\"model_loader\")}>- ModelLoader</p>\r\n                    <p className=\"link\" onClick={() => addNode(\"model_predictor\")}>- ModlerPredictor</p>\r\n                </ul>\r\n                <button onClick={() => handleSave()}>Save</button>\r\n            </div>\r\n            <div className=\"flowReview\">\r\n\r\n                {nodes?.map((node, index) => (\r\n                    <div key={index}>\r\n                        {node.type == \"data_normalizer\" &&\r\n                        <DataNormalizer nodes={nodes} setNodes={setNodes} creationFlag={true} id={index}/>}\r\n\r\n                        {node.type == \"data_plotter\" &&\r\n                        <DataPlotter nodes={nodes} setNodes={setNodes} creationFlag={true} id={index}/>}\r\n                        \r\n                        {node.type == \"keras_dataset_loader\" && \r\n                        <DatasetLoader nodes={nodes} setNodes={setNodes} creationFlag={true} id={index}/>}    \r\n\r\n                        {node.type == \"data_standardizer\" &&\r\n                        <DataStandardizer nodes={nodes} setNodes={setNodes} creationFlag={true} id={index}/>}\r\n                        \r\n                        {node.type == \"model_evaluator\" &&\r\n                        <ModelEvaluator nodes={nodes} setNodes={setNodes} creationFlag={true} id={index}/>}\r\n\r\n                        {node.type == \"model_loader\" &&  \r\n                        <ModelLoader teamid={teamid} nodes={nodes} setNodes={setNodes} creationFlag={true} id={index}/>}\r\n                        \r\n                        {node.type == \"model_predictor\" &&\r\n                        <ModelPredictor nodes={nodes} setNodes={setNodes} creationFlag={true} id={index}/>}\r\n                    </div>\r\n                ))}\r\n            </div>\r\n        </div>\r\n    )\r\n    \r\n}\r\n","D:\\Podaci\\7. sem\\Arhitektura i projektovanje softvera\\ml-pipeline-vcs\\fe_app\\src\\Flow\\FlowVersionCreate.jsx",["253","254","255","256","257","258","259","260","261","262","263","264","265","266","267","268","269","270"],"import React, { forwardRef, useRef, useEffect,useState,useImperativeHandle } from 'react';\r\nimport './Flow.css';\r\nimport { useCookies } from 'react-cookie';\r\nimport TreeView from '@material-ui/lab/TreeView';\r\nimport TreeItem from '@material-ui/lab/TreeItem';\r\nimport ExpandMoreIcon from '@material-ui/icons/ExpandMore';\r\nimport ChevronRightIcon from '@material-ui/icons/ChevronRight';\r\nimport { useParams } from 'react-router-dom';\r\n\r\nimport DatasetLoader from '../Nodes/DatasetLoader';\r\nimport ModelLoader from '../Nodes/ModelLoader';\r\nimport DataNormalizer from '../Nodes/DataNormalizer';\r\nimport DataPlotter from '../Nodes/DataPlotter';\r\nimport ModelEvaluator from '../Nodes/ModelEvaluator';\r\nimport DataStandardizer from '../Nodes/DataStandardizer';\r\nimport ModelPredictor from '../Nodes/ModelPredictor';\r\n\r\nexport default function FlowVersionCreate(){\r\n\r\n    const [cookies] = useCookies(['user']);\r\n    const {teamid} = useParams();\r\n    const {rootid} = useParams();\r\n    const {flowname} = useParams();\r\n    const {prev} = useParams();\r\n    \r\n\r\n    const [initialVersion, setInitialVersion] = useState(\"\");\r\n\r\n    const [nodes, setNodes] = useState([]);\r\n    const [isMount, setIsMount] = useState(1);\r\n    const [save, setSave] = useState(false);\r\n\r\n    const [flow,setFlow] = useState(\r\n    {\r\n        \"created_by\": cookies.id,\r\n        \"flow\" : rootid,\r\n        \"prev_flow_version\": prev,\r\n        \"serialized_flow\": {\r\n            flow_name: flowname,\r\n            flow_version: initialVersion,\r\n            nodes: nodes\r\n        }\r\n    });\r\n\r\n\r\n    useEffect(() => {\r\n        if(isMount)\r\n        setIsMount(0);\r\n    else {\r\n        if(save==true){\r\n            //createFlowVersion();\r\n            console.log(flow);\r\n            setSave(false);\r\n        }\r\n    }\r\n    },[flow] );\r\n\r\n    useEffect(() => {\r\n        getFlowJson();\r\n    },[prev]);\r\n\r\n\r\n    const getFlowJson = async() => {\r\n        const requestOptions = {\r\n            method: 'GET',\r\n            headers:{\r\n                'Authorization': 'Token ' + cookies.token,\r\n                'Content-Type': 'application/json',\r\n                'accept': 'application/json'\r\n            }\r\n            };\r\n        const response = await fetch(\"http://localhost:8000/easy_flow/v1/flow_version_json/\" + prev + \"/\", requestOptions);\r\n        const data = await response.json();\r\n\r\n        setNodes(data.nodes);\r\n        console.log(data);\r\n    }\r\n\r\n\r\n\r\n    const createFlowVersion = async() => {\r\n\r\n        const requestOptions = {\r\n            method: 'POST',\r\n            headers:{\r\n                'Authorization': 'Token ' + cookies.token,\r\n                'Content-Type': 'application/json',\r\n                'accept': 'application/json'\r\n            },\r\n            body: JSON.stringify(flow)\r\n        };\r\n\r\n        const response = await fetch(\"http://localhost:8000/easy_flow/v1/flow_version_create/\",requestOptions);\r\n        const data = await response.json();\r\n        console.log(data);\r\n    }\r\n\r\n\r\n    const handleSave = () => {\r\n        setFlow({...flow, serialized_flow: {...flow.serialized_flow,flow_name: flowname, flow_version: initialVersion, nodes: nodes}});\r\n        setSave(true);\r\n    }\r\n\r\n    const addNode = (type) => {\r\n\r\n        var node = {\r\n            \"available_params\": null,\r\n            \"input_keys\": [],\r\n            \"output_keys\": [],\r\n            \"params\": {},\r\n            \"type\": type\r\n        }\r\n\r\n        setNodes(nodes => [...nodes, node]);\r\n    }\r\n             \r\n\r\n    return(\r\n        <div className=\"flowCreate\">\r\n            <div className=\"nodeSelection\">\r\n                <p id=\"naslov\">Create flow version for: {flowname}</p>\r\n                <br/>   \r\n                Version number: <input className=\"inputNode\" type=\"text\" value={initialVersion} onChange={(e) => setInitialVersion(e.target.value)}/>\r\n                <p>Add commponent:</p>\r\n                <ul>\r\n                    <p className=\"link\" onClick={() => addNode(\"data_normalizer\")}>- DataNormalizer</p>\r\n                    <p className=\"link\" onClick={() => addNode(\"data_plotter\")}>- DataPlotter</p>\r\n                    <p className=\"link\" onClick={() => addNode(\"keras_dataset_loader\")}>- DatasetLoader</p>\r\n                    <p className=\"link\" onClick={() => addNode(\"data_standardizer\")}>- DataStandardizer</p>\r\n                    <p className=\"link\" onClick={() => addNode(\"model_evaluator\")}>- ModelEvaluator</p>\r\n                    <p className=\"link\" onClick={() => addNode(\"model_loader\")}>- ModelLoader</p>\r\n                    <p className=\"link\" onClick={() => addNode(\"model_predictor\")}>- ModlerPredictor</p>\r\n                </ul>\r\n                <button onClick={() => handleSave()}>Save</button>\r\n            </div>\r\n            <div className=\"flowReview\">\r\n            {nodes?.map((node, index) => (\r\n                    <div key={index}>\r\n                        {node.type == \"data_normalizer\" &&\r\n                        <DataNormalizer nodes={nodes} setNodes={setNodes} creationFlag={true} id={index}/>}\r\n\r\n                        {node.type == \"data_plotter\" &&\r\n                        <DataPlotter nodes={nodes} setNodes={setNodes} creationFlag={true} id={index}/>}\r\n                        \r\n                        {node.type == \"keras_dataset_loader\" && \r\n                        <DatasetLoader nodes={nodes} setNodes={setNodes} creationFlag={true} id={index}/>}    \r\n\r\n                        {node.type == \"data_standardizer\" &&\r\n                        <DataStandardizer nodes={nodes} setNodes={setNodes} creationFlag={true} id={index}/>}\r\n                        \r\n                        {node.type == \"model_evaluator\" &&\r\n                        <ModelEvaluator nodes={nodes} setNodes={setNodes} creationFlag={true} id={index}/>}\r\n\r\n                        {node.type == \"model_loader\" &&  \r\n                        <ModelLoader  teamid={teamid} nodes={nodes} setNodes={setNodes} creationFlag={true} id={index}/>}\r\n                        \r\n                        {node.type == \"model_predictor\" &&\r\n                        <ModelPredictor nodes={nodes} setNodes={setNodes} creationFlag={true} id={index}/>}\r\n                    </div>\r\n                ))}\r\n            </div>\r\n        </div>\r\n    )\r\n    \r\n}\r\n","D:\\Podaci\\7. sem\\Arhitektura i projektovanje softvera\\ml-pipeline-vcs\\fe_app\\src\\Flow\\FlowContainer.jsx",["271","272","273","274"],"import React, { useEffect,useState } from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport { useCookies } from 'react-cookie';  \r\nimport { useParams } from \"react-router-dom\";\r\n\r\nimport './Flow.css';\r\nimport FlowCreate from './FlowCreate';\r\nimport Flow from './Flow';\r\n\r\nexport default function FlowContainer({children}){\r\n\r\n    const [cookies] = useCookies(['user']);\r\n    const {teamid} = useParams();\r\n\r\n    const [team,setTeam] = useState([]);\r\n    const [flows,setFlows] = useState([]);\r\n\r\n    useEffect(() => {\r\n        getTeam();\r\n    },[] );\r\n\r\n    const getTeam = async () =>\r\n    {\r\n        const requestOptions = {\r\n            method: 'GET',\r\n            headers:{\r\n                'Authorization': 'Token ' + cookies.token,\r\n                'Content-Type': 'application/json',\r\n                'accept': 'application/json'\r\n            }\r\n            };\r\n        const response = await fetch(\"http://localhost:8000/easy_flow/v1/team/\" + teamid +\"/\", requestOptions);\r\n        const data = await response.json();\r\n        setTeam(data);\r\n        setFlows(data.flows);\r\n    }\r\n\r\n\r\n    return(\r\n        <div className=\"content\" id=\"flow\">\r\n            <aside id=\"side\">\r\n                <nav>\r\n                    Flows list\r\n                    <ul>\r\n                        {flows?.map(flow =>(\r\n                            <li key={flow.name}>\r\n                                <Link to={`/flow/${teamid}/${flow.id}/${flow.name}/${flow.root.id}`} >\r\n                                    {flow.name}\r\n                                </Link>\r\n                            </li>\r\n                        ))}\r\n                    </ul>\r\n                </nav>\r\n                <Link to={`/flow/${teamid}/create`}>Create flow</Link>\r\n                <br/>\r\n            </aside>\r\n            <main>\r\n                {children}\r\n            </main>\r\n        </div>\r\n    )\r\n}","D:\\Podaci\\7. sem\\Arhitektura i projektovanje softvera\\ml-pipeline-vcs\\fe_app\\src\\Flow\\Flow.jsx",["275","276","277","278","279","280","281","282","283","284","285","286"],"import React, { useEffect,useState } from 'react';\r\nimport './Flow.css';\r\nimport { useCookies } from 'react-cookie';\r\nimport TreeView from '@material-ui/lab/TreeView';\r\nimport TreeItem from '@material-ui/lab/TreeItem';\r\nimport ExpandMoreIcon from '@material-ui/icons/ExpandMore';\r\nimport ChevronRightIcon from '@material-ui/icons/ChevronRight';\r\nimport { useParams } from 'react-router-dom';\r\nimport { Link } from 'react-router-dom';\r\n\r\nimport DatasetLoader from '../Nodes/DatasetLoader';\r\nimport ModelLoader from '../Nodes/ModelLoader';\r\nimport DataNormalizer from '../Nodes/DataNormalizer';\r\nimport DataPlotter from '../Nodes/DataPlotter';\r\nimport ModelEvaluator from '../Nodes/ModelEvaluator';\r\nimport DataStandardizer from '../Nodes/DataStandardizer';\r\nimport ModelPredictor from '../Nodes/ModelPredictor';\r\nimport ExeWindow from './ExeWindow';\r\n\r\n\r\nexport default function Flow(){\r\n\r\n    const {teamid} = useParams();\r\n    const {flowid} = useParams();\r\n    const {rootid} = useParams();\r\n    const {flowname} = useParams();\r\n\r\n    const [compServer, setCompServer] = useState(\"\");\r\n    \r\n    const [flowJson,setFlowJson] = useState([]);\r\n    const [flowTree, setFlowTree] = useState([]);\r\n    const [cookies] = useCookies(['user']);\r\n    const [current,setCurrent] = useState(\"\");\r\n    const [updateFlag,setUpdateFlag] = useState(false);\r\n    \r\n    const [nodes,setNodes] = useState([]);\r\n\r\n    const [test,setTest] = useState(\"DA\");\r\n\r\n\r\n    useEffect(() => {\r\n        getFlowTree();\r\n    },[rootid] );\r\n\r\n    \r\n    useEffect(() => {\r\n        setFlowJson({...flowJson, nodes: nodes});\r\n        updateFlowVersion();\r\n    },[updateFlag]);\r\n\r\n\r\n    const getFlowTree = async () => {\r\n        const requestOptions = {\r\n            method: 'GET',\r\n            headers:{\r\n                'Authorization': 'Token ' + cookies.token,\r\n                'Content-Type': 'application/json',\r\n                'accept': 'application/json'\r\n            }\r\n            };\r\n        const response = await fetch(\"http://localhost:8000/easy_flow/v1/flow_version/\" + rootid + \"/\", requestOptions);\r\n        const data = await response.json();\r\n\r\n        //console.log(data);\r\n        getFlowJson(rootid);\r\n        setFlowTree(data);\r\n        setCurrent(rootid);\r\n    }\r\n\r\n    const getFlowJson = async(versionid) => {\r\n        const requestOptions = {\r\n            method: 'GET',\r\n            headers:{\r\n                'Authorization': 'Token ' + cookies.token,\r\n                'Content-Type': 'application/json',\r\n                'accept': 'application/json'\r\n            }\r\n            };\r\n        const response = await fetch(\"http://localhost:8000/easy_flow/v1/flow_version_json/\" + versionid + \"/\", requestOptions);\r\n        const data = await response.json();\r\n\r\n        setFlowJson(data);\r\n        setCurrent(versionid);\r\n        setNodes(data.nodes);\r\n        //console.log(data);\r\n    }\r\n\r\n    const updateFlowVersion = async() => {\r\n\r\n        if(updateFlag)\r\n        {\r\n            setUpdateFlag(0);\r\n\r\n            var flow = {\r\n                \"created_by\": cookies.id,\r\n                \"flow_version\" : current,\r\n                \"serialized_flow\": flowJson\r\n            }\r\n            \r\n            console.log(flow);\r\n\r\n            const requestOptions = {    \r\n                method: 'PUT',\r\n                headers:{\r\n                    'Authorization': 'Token ' + cookies.token,\r\n                    'Content-Type': 'application/json',\r\n                    'accept': 'application/json'\r\n                },\r\n                body: JSON.stringify(flow)\r\n            };\r\n    \r\n            const response = await fetch(\"http://localhost:8000/easy_flow/v1/flow_version_edit/\",requestOptions);\r\n            const data = await response.json();\r\n\r\n        }\r\n    }\r\n\r\n    const addComputationalServer = async() => {\r\n\r\n        var server = {\r\n            \"created_by\": cookies.id,\r\n            \"flow\": flowid,\r\n            \"remote_user\" : null,\r\n\t        \"remote_host\" : \"local\",\r\n            \"env_path\": compServer\r\n        }\r\n\r\n        const requestOptions = {\r\n            method: 'POST',\r\n            headers:{\r\n                'Authorization': 'Token ' + cookies.token,\r\n                'Content-Type': 'application/json',\r\n                'accept': 'application/json'\r\n            },\r\n            body: JSON.stringify(server)\r\n        };\r\n\r\n        const response = await fetch(\"http://localhost:8000/easy_flow/v1/comp_server_add/\",requestOptions);\r\n        const data = await response.json();\r\n\r\n        console.log(data);\r\n    }\r\n\r\n    const renderTree = (nodes) => (\r\n        <TreeItem key={nodes.id} nodeId={nodes.id} label={flowname + nodes.version} onClick={() => getFlowJson(nodes.id)}>\r\n          {Array.isArray(nodes.children) ? nodes.children.map((node) => renderTree(node)) : null}\r\n        </TreeItem>\r\n    );\r\n          \r\n    return(\r\n        <div className=\"content\" id=\"flow\">\r\n            <div className=\"leftContent\">\r\n                <div className=\"update\">\r\n                    <div>\r\n                        <TreeView\r\n                            defaultCollapseIcon={<ExpandMoreIcon />}\r\n                            defaultExpanded={['root']}\r\n                            defaultExpandIcon={<ChevronRightIcon />}\r\n                        >\r\n                            {renderTree(flowTree)}\r\n                        </TreeView>\r\n\r\n                        <Link to={`/flow/${teamid}/${flowid}/${flowname}/${rootid}/${current}/create`}>\r\n                            <p className=\"link\" >+ Flow version</p>\r\n                        </Link>                    \r\n                    </div>\r\n                    <div>\r\n                        {nodes?.map((node, index) => (\r\n                            <p>\r\n                                {node.type == \"data_normalizer\" &&\r\n                                <DataNormalizer nodes={nodes} setNodes={setNodes} setUpdateFlag={setUpdateFlag} creationFlag={false} id={index}/>}\r\n\r\n                                {node.type == \"data_plotter\" &&\r\n                                <DataPlotter nodes={nodes} setNodes={setNodes} setUpdateFlag={setUpdateFlag} creationFlag={false} id={index}/>}\r\n                                \r\n                                {node.type == \"keras_dataset_loader\" && \r\n                                <DatasetLoader nodes={nodes} setNodes={setNodes} setUpdateFlag={setUpdateFlag} creationFlag={false} id={index}/>}    \r\n\r\n                                {node.type == \"data_standardizer\" &&\r\n                                <DataStandardizer nodes={nodes} setNodes={setNodes} setUpdateFlag={setUpdateFlag} creationFlag={false} id={index}/>}\r\n                                \r\n                                {node.type == \"model_evaluator\" &&\r\n                                <ModelEvaluator nodes={nodes} setNodes={setNodes} setUpdateFlag={setUpdateFlag} creationFlag={false} id={index}/>}\r\n\r\n                                {node.type == \"model_loader\" &&  \r\n                                <ModelLoader teamid={teamid} nodes={nodes} setNodes={setNodes} setUpdateFlag={setUpdateFlag} creationFlag={false} id={index}/>}\r\n                                \r\n                                {node.type == \"model_predictor\" &&\r\n                                <ModelPredictor nodes={flowJson.nodes} setNodes={setNodes} setUpdateFlag={setUpdateFlag} creationFlag={false} id={index}/>}\r\n\r\n                            </p>\r\n                        ))}\r\n                    </div>\r\n                </div>\r\n                <div>\r\n                    Add computational server to this flow\r\n                    <br/>\r\n                    Path: <input className=\"inputNode\" type=\"text\" value={compServer} onChange={(e) => setCompServer(e.target.value)}/>\r\n                    <br/>\r\n                    <button onClick={addComputationalServer}>Add</button>\r\n                </div>\r\n            </div>\r\n            <div className=\"exewind\">\r\n                <ExeWindow key={current} current={current}></ExeWindow>\r\n            </div>\r\n        </div>\r\n    )\r\n}","D:\\Podaci\\7. sem\\Arhitektura i projektovanje softvera\\ml-pipeline-vcs\\fe_app\\src\\Flow\\ExeWindow.jsx",["287","288","289","290","291","292","293","294","295","296","297","298","299"],"import React, { useEffect,useState } from 'react';\r\nimport './Flow.css';\r\nimport { useCookies } from 'react-cookie';\r\nimport { useParams } from 'react-router-dom';\r\n\r\nexport default function ExeWindow({current}){\r\n\r\n    const {teamid} = useParams();\r\n    const {flowid} = useParams();\r\n\r\n    const [cookies] = useCookies(['user']);\r\n\r\n    const [user,setUser] = useState({});\r\n    const [flow,setFlow] = useState(undefined);\r\n    const [team,setTeam] = useState(undefined);\r\n    const [servers,setServers] = useState([]);\r\n    const [sentRequests, setSentRequests] = useState([]);\r\n    const [receivedRequests, setReceivedRequests] = useState([]);\r\n\r\n    const [permissions, setPermissions] = useState(0);\r\n\r\n    const [selectedServer, setSelectedServer] = useState(null);\r\n    const [fromDate, setFromDate] = useState(undefined);\r\n    const [toDate, setToDate] = useState(undefined)\r\n\r\n\r\n    useEffect(() => {\r\n        getUser();\r\n    },[]);\r\n   \r\n    const getUser = async () =>\r\n    {\r\n        const requestOptions = {\r\n            method: 'GET',\r\n            headers:{\r\n                'Authorization': 'Token ' + cookies.token,\r\n                'Content-Type': 'application/json',\r\n                'accept': 'application/json'\r\n            }\r\n            };\r\n        const response = await fetch(\"http://localhost:8000/easy_flow/v1/user/\" + cookies.id +\"/\", requestOptions);\r\n        const data = await response.json();\r\n\r\n        setSentRequests([]);\r\n        setReceivedRequests([]);\r\n\r\n        console.log(data);\r\n\r\n        for(let i=0;i<data.sent_requests.length;i++){\r\n            let req = data.sent_requests[i];\r\n            if(req.version.id == current)\r\n                setSentRequests(sentRequests => [...sentRequests,req]);\r\n        }\r\n        for(let i=0;i<data.received_requests.length;i++){\r\n            let req = data.received_requests[i];\r\n            if(req.version.id == current){\r\n                setReceivedRequests(receivedRequests => [...receivedRequests,req]);\r\n            }\r\n                \r\n        }\r\n        setUser(data);\r\n    }\r\n\r\n    // useEffect(() => {\r\n    //     if(user.sent_requests != undefined){\r\n    //         console.log(user.sent_requests[0].version.id);\r\n    //         console.log(current);\r\n    //         getSentRequests(user.sent_requests);\r\n    //     }\r\n    // },[user.sent_requests] );\r\n\r\n\r\n    useEffect(() => { \r\n        getTeam();\r\n    },[teamid] );\r\n\r\n    const getTeam = async () => {\r\n        const requestOptions = {\r\n            method: 'GET',\r\n            headers:{\r\n                'Authorization': 'Token ' + cookies.token,\r\n                'Content-Type': 'application/json',\r\n                'accept': 'application/json'\r\n            }\r\n            };\r\n        const response = await fetch(\"http://localhost:8000/easy_flow/v1/team/\" + teamid +\"/\", requestOptions);\r\n        const data = await response.json();\r\n\r\n        setTeam(data);\r\n    }\r\n\r\n    useEffect(() => {\r\n        if(team != undefined)\r\n            getPermissions();\r\n    },[team] );    \r\n\r\n    const getPermissions = () => {\r\n\r\n        if(team.leader != undefined) {\r\n            let temp = team.leader.id;\r\n            if(temp == cookies.id) {\r\n                setPermissions(1);\r\n            }\r\n        }\r\n    }\r\n    \r\n    useEffect(() => {\r\n        getFlow();\r\n    },[flowid])\r\n\r\n    const getFlow = async () => {\r\n        const requestOptions = {\r\n            method: 'GET',\r\n            headers:{\r\n                'Authorization': 'Token ' + cookies.token,\r\n                'Content-Type': 'application/json',\r\n                'accept': 'application/json'\r\n            }\r\n            };\r\n        const response = await fetch(\"http://localhost:8000/easy_flow/v1/flow/\" + flowid +\"/\", requestOptions);\r\n        const data = await response.json();\r\n\r\n        setFlow(data);\r\n    }\r\n\r\n    useEffect(() => {\r\n        if(flow != undefined){\r\n            getServers();\r\n        }\r\n    },[flow] );\r\n\r\n    const getServers = () => {  \r\n        let temp = flow.computational_servers;\r\n        setServers(temp);\r\n    }\r\n\r\n    const execute = async () => {\r\n\r\n        var body = {\r\n            \"created_by\": cookies.id,\r\n            \"flow_version\": current,\r\n            \"comp_server\": selectedServer,\r\n            \"request\": null\r\n        }\r\n\r\n        const requestOptions = {\r\n            method: 'PUT',\r\n            headers:{\r\n                'Authorization': 'Token ' + cookies.token,\r\n                'Content-Type': 'application/json',\r\n                'accept': 'application/json'\r\n            },\r\n            body: JSON.stringify(body)\r\n        };\r\n\r\n        const response = await fetch(\"http://localhost:8000/easy_flow/v1/flow_version_execute/\",requestOptions);\r\n        const data = await response.json();\r\n        console.log(data);\r\n    }\r\n\r\n    const sendReq = async () => {\r\n        var request = {\r\n            \"created_by\": cookies.id,\r\n            \"flow_version\": current,\r\n            \"comp_server\" : selectedServer,\r\n\t        \"from_date\" : fromDate,\r\n            \"to_date\": toDate\r\n        }\r\n\r\n        // const requestOptions = {\r\n        //     method: 'POST',\r\n        //     headers:{\r\n        //         'Authorization': 'Token ' + cookies.token,\r\n        //         'Content-Type': 'application/json',\r\n        //         'accept': 'application/json'\r\n        //     },\r\n        //     body: JSON.stringify(request)\r\n        // };\r\n\r\n        // const response = await fetch(\"http://localhost:8000/easy_flow/v1/request_create/\",requestOptions);\r\n        // const data = await response.json();\r\n    }\r\n\r\n    const aprove = async (id) => {\r\n        var request = {\r\n            \"created_by\": cookies.id,\r\n            \"request\": id,\r\n            \"approve\": true\r\n        }\r\n\r\n        const requestOptions = {\r\n                method: 'PUT',\r\n                headers:{\r\n                    'Authorization': 'Token ' + cookies.token,\r\n                    'Content-Type': 'application/json',\r\n                    'accept': 'application/json'\r\n                },\r\n                body: JSON.stringify(request)\r\n            };\r\n\r\n            const response = await fetch(\"http://localhost:8000/easy_flow/v1/request_approve/\",requestOptions);\r\n            const data = await response.json();\r\n\r\n            console.log(data);\r\n    \r\n    }\r\n\r\n    return(\r\n        <div>\r\n            <h1>Execution</h1>\r\n            <button disabled={!permissions || selectedServer === null} onClick={() => execute()}>Execute</button>\r\n            <button disabled={permissions} onClick={() => sendReq()}>Request</button>\r\n            <div>\r\n                From: <input type=\"date\" disabled={permissions} value={fromDate} onChange={(e) => setFromDate(e.target.value)}></input>\r\n                To: <input type=\"date\" disabled={permissions} value={toDate} onChange={(e) => setToDate(e.target.value)}></input>\r\n            </div>\r\n            <div>\r\n                {servers?.map(server => (\r\n                    <div className = \"radio\">\r\n                        <input\r\n                            type=\"radio\" \r\n                            value={server.id} \r\n                            checked={selectedServer === server.id}\r\n                            onChange={() => setSelectedServer(server.id)}\r\n                        />\r\n                        {server.env_path}\r\n                    </div>\r\n                ))}\r\n            </div>\r\n            <div>\r\n                {sentRequests?.map((req,index) => (\r\n                    <div>\r\n                        Request {index+1} from {req.from_date.substring(0, 10)} to {req.to_date.substring(0, 10)}\r\n                    </div>\r\n                ))}\r\n                {receivedRequests?.map((req,index) => (\r\n                    <div>\r\n                        Request {index+1} from {req.from_date.substring(0, 10)} to {req.to_date.substring(0, 10)}\r\n                        <button onClick={() => aprove(req.id)}>Aprove</button>\r\n                    </div>\r\n                ))}\r\n            </div>\r\n        </div>\r\n            \r\n\r\n    )\r\n}\r\n\r\n\r\n","D:\\Podaci\\7. sem\\Arhitektura i projektovanje softvera\\ml-pipeline-vcs\\fe_app\\src\\Chat\\Chat.jsx",["300","301","302","303"],{"ruleId":"304","replacedBy":"305"},{"ruleId":"306","replacedBy":"307"},{"ruleId":"308","severity":1,"message":"309","line":2,"column":10,"nodeType":"310","messageId":"311","endLine":2,"endColumn":19},{"ruleId":"312","severity":1,"message":"313","line":20,"column":32,"nodeType":"314","messageId":"315","endLine":20,"endColumn":34},{"ruleId":"316","severity":1,"message":"317","line":39,"column":8,"nodeType":"318","endLine":39,"endColumn":10,"suggestions":"319"},{"ruleId":"316","severity":1,"message":"320","line":48,"column":8,"nodeType":"318","endLine":48,"endColumn":21,"suggestions":"321"},{"ruleId":"312","severity":1,"message":"313","line":167,"column":22,"nodeType":"314","messageId":"315","endLine":167,"endColumn":24},{"ruleId":"312","severity":1,"message":"313","line":174,"column":22,"nodeType":"314","messageId":"315","endLine":174,"endColumn":24},{"ruleId":"312","severity":1,"message":"313","line":189,"column":47,"nodeType":"314","messageId":"315","endLine":189,"endColumn":49},{"ruleId":"312","severity":1,"message":"313","line":220,"column":48,"nodeType":"314","messageId":"315","endLine":220,"endColumn":50},{"ruleId":"312","severity":1,"message":"313","line":261,"column":47,"nodeType":"314","messageId":"315","endLine":261,"endColumn":49},{"ruleId":"312","severity":1,"message":"313","line":290,"column":48,"nodeType":"314","messageId":"315","endLine":290,"endColumn":50},{"ruleId":"312","severity":1,"message":"313","line":316,"column":41,"nodeType":"314","messageId":"315","endLine":316,"endColumn":43},{"ruleId":"312","severity":1,"message":"313","line":318,"column":72,"nodeType":"314","messageId":"315","endLine":318,"endColumn":74},{"ruleId":"308","severity":1,"message":"322","line":17,"column":21,"nodeType":"310","messageId":"311","endLine":17,"endColumn":31},{"ruleId":"312","severity":1,"message":"313","line":26,"column":32,"nodeType":"314","messageId":"315","endLine":26,"endColumn":34},{"ruleId":"316","severity":1,"message":"317","line":53,"column":8,"nodeType":"318","endLine":53,"endColumn":10,"suggestions":"323"},{"ruleId":"316","severity":1,"message":"324","line":73,"column":8,"nodeType":"318","endLine":73,"endColumn":20,"suggestions":"325"},{"ruleId":"312","severity":1,"message":"313","line":291,"column":22,"nodeType":"314","messageId":"315","endLine":291,"endColumn":24},{"ruleId":"312","severity":1,"message":"313","line":298,"column":22,"nodeType":"314","messageId":"315","endLine":298,"endColumn":24},{"ruleId":"312","severity":1,"message":"313","line":301,"column":29,"nodeType":"314","messageId":"315","endLine":301,"endColumn":31},{"ruleId":"312","severity":1,"message":"313","line":313,"column":47,"nodeType":"314","messageId":"315","endLine":313,"endColumn":49},{"ruleId":"312","severity":1,"message":"313","line":344,"column":48,"nodeType":"314","messageId":"315","endLine":344,"endColumn":50},{"ruleId":"312","severity":1,"message":"313","line":435,"column":48,"nodeType":"314","messageId":"315","endLine":435,"endColumn":50},{"ruleId":"312","severity":1,"message":"313","line":464,"column":48,"nodeType":"314","messageId":"315","endLine":464,"endColumn":50},{"ruleId":"312","severity":1,"message":"313","line":527,"column":41,"nodeType":"314","messageId":"315","endLine":527,"endColumn":43},{"ruleId":"312","severity":1,"message":"313","line":529,"column":72,"nodeType":"314","messageId":"315","endLine":529,"endColumn":74},{"ruleId":"308","severity":1,"message":"326","line":1,"column":8,"nodeType":"310","messageId":"311","endLine":1,"endColumn":19},{"ruleId":"308","severity":1,"message":"327","line":2,"column":17,"nodeType":"310","messageId":"311","endLine":2,"endColumn":27},{"ruleId":"308","severity":1,"message":"328","line":2,"column":50,"nodeType":"310","messageId":"311","endLine":2,"endColumn":69},{"ruleId":"308","severity":1,"message":"329","line":2,"column":71,"nodeType":"310","messageId":"311","endLine":2,"endColumn":82},{"ruleId":"312","severity":1,"message":"313","line":26,"column":32,"nodeType":"314","messageId":"315","endLine":26,"endColumn":34},{"ruleId":"316","severity":1,"message":"317","line":40,"column":8,"nodeType":"318","endLine":40,"endColumn":10,"suggestions":"330"},{"ruleId":"316","severity":1,"message":"331","line":49,"column":8,"nodeType":"318","endLine":49,"endColumn":21,"suggestions":"332"},{"ruleId":"312","severity":1,"message":"313","line":161,"column":22,"nodeType":"314","messageId":"315","endLine":161,"endColumn":24},{"ruleId":"312","severity":1,"message":"313","line":168,"column":22,"nodeType":"314","messageId":"315","endLine":168,"endColumn":24},{"ruleId":"312","severity":1,"message":"313","line":185,"column":47,"nodeType":"314","messageId":"315","endLine":185,"endColumn":49},{"ruleId":"312","severity":1,"message":"313","line":216,"column":48,"nodeType":"314","messageId":"315","endLine":216,"endColumn":50},{"ruleId":"312","severity":1,"message":"313","line":252,"column":47,"nodeType":"314","messageId":"315","endLine":252,"endColumn":49},{"ruleId":"312","severity":1,"message":"313","line":281,"column":48,"nodeType":"314","messageId":"315","endLine":281,"endColumn":50},{"ruleId":"312","severity":1,"message":"313","line":305,"column":41,"nodeType":"314","messageId":"315","endLine":305,"endColumn":43},{"ruleId":"312","severity":1,"message":"313","line":307,"column":72,"nodeType":"314","messageId":"315","endLine":307,"endColumn":74},{"ruleId":"312","severity":1,"message":"313","line":16,"column":32,"nodeType":"314","messageId":"315","endLine":16,"endColumn":34},{"ruleId":"316","severity":1,"message":"317","line":32,"column":8,"nodeType":"318","endLine":32,"endColumn":10,"suggestions":"333"},{"ruleId":"316","severity":1,"message":"334","line":40,"column":8,"nodeType":"318","endLine":40,"endColumn":10,"suggestions":"335"},{"ruleId":"312","severity":1,"message":"313","line":162,"column":22,"nodeType":"314","messageId":"315","endLine":162,"endColumn":24},{"ruleId":"312","severity":1,"message":"313","line":169,"column":22,"nodeType":"314","messageId":"315","endLine":169,"endColumn":24},{"ruleId":"312","severity":1,"message":"313","line":172,"column":29,"nodeType":"314","messageId":"315","endLine":172,"endColumn":31},{"ruleId":"312","severity":1,"message":"313","line":184,"column":47,"nodeType":"314","messageId":"315","endLine":184,"endColumn":49},{"ruleId":"312","severity":1,"message":"313","line":215,"column":48,"nodeType":"314","messageId":"315","endLine":215,"endColumn":50},{"ruleId":"312","severity":1,"message":"313","line":259,"column":47,"nodeType":"314","messageId":"315","endLine":259,"endColumn":49},{"ruleId":"312","severity":1,"message":"313","line":288,"column":48,"nodeType":"314","messageId":"315","endLine":288,"endColumn":50},{"ruleId":"312","severity":1,"message":"313","line":320,"column":41,"nodeType":"314","messageId":"315","endLine":320,"endColumn":43},{"ruleId":"312","severity":1,"message":"313","line":322,"column":72,"nodeType":"314","messageId":"315","endLine":322,"endColumn":74},{"ruleId":"312","severity":1,"message":"313","line":15,"column":32,"nodeType":"314","messageId":"315","endLine":15,"endColumn":34},{"ruleId":"316","severity":1,"message":"317","line":30,"column":8,"nodeType":"318","endLine":30,"endColumn":10,"suggestions":"336"},{"ruleId":"316","severity":1,"message":"331","line":39,"column":8,"nodeType":"318","endLine":39,"endColumn":21,"suggestions":"337"},{"ruleId":"312","severity":1,"message":"313","line":156,"column":22,"nodeType":"314","messageId":"315","endLine":156,"endColumn":24},{"ruleId":"312","severity":1,"message":"313","line":163,"column":22,"nodeType":"314","messageId":"315","endLine":163,"endColumn":24},{"ruleId":"312","severity":1,"message":"313","line":166,"column":29,"nodeType":"314","messageId":"315","endLine":166,"endColumn":31},{"ruleId":"312","severity":1,"message":"313","line":178,"column":47,"nodeType":"314","messageId":"315","endLine":178,"endColumn":49},{"ruleId":"312","severity":1,"message":"313","line":209,"column":48,"nodeType":"314","messageId":"315","endLine":209,"endColumn":50},{"ruleId":"312","severity":1,"message":"313","line":251,"column":48,"nodeType":"314","messageId":"315","endLine":251,"endColumn":50},{"ruleId":"312","severity":1,"message":"313","line":280,"column":48,"nodeType":"314","messageId":"315","endLine":280,"endColumn":50},{"ruleId":"312","severity":1,"message":"313","line":312,"column":41,"nodeType":"314","messageId":"315","endLine":312,"endColumn":43},{"ruleId":"312","severity":1,"message":"313","line":314,"column":72,"nodeType":"314","messageId":"315","endLine":314,"endColumn":74},{"ruleId":"312","severity":1,"message":"313","line":14,"column":32,"nodeType":"314","messageId":"315","endLine":14,"endColumn":34},{"ruleId":"316","severity":1,"message":"317","line":28,"column":8,"nodeType":"318","endLine":28,"endColumn":10,"suggestions":"338"},{"ruleId":"316","severity":1,"message":"331","line":36,"column":7,"nodeType":"318","endLine":36,"endColumn":20,"suggestions":"339"},{"ruleId":"312","severity":1,"message":"313","line":103,"column":21,"nodeType":"314","messageId":"315","endLine":103,"endColumn":23},{"ruleId":"312","severity":1,"message":"313","line":110,"column":26,"nodeType":"314","messageId":"315","endLine":110,"endColumn":28},{"ruleId":"312","severity":1,"message":"313","line":125,"column":47,"nodeType":"314","messageId":"315","endLine":125,"endColumn":49},{"ruleId":"312","severity":1,"message":"313","line":156,"column":48,"nodeType":"314","messageId":"315","endLine":156,"endColumn":50},{"ruleId":"312","severity":1,"message":"313","line":190,"column":47,"nodeType":"314","messageId":"315","endLine":190,"endColumn":49},{"ruleId":"312","severity":1,"message":"313","line":219,"column":48,"nodeType":"314","messageId":"315","endLine":219,"endColumn":50},{"ruleId":"312","severity":1,"message":"313","line":243,"column":41,"nodeType":"314","messageId":"315","endLine":243,"endColumn":43},{"ruleId":"312","severity":1,"message":"313","line":245,"column":72,"nodeType":"314","messageId":"315","endLine":245,"endColumn":74},{"ruleId":"312","severity":1,"message":"313","line":15,"column":32,"nodeType":"314","messageId":"315","endLine":15,"endColumn":34},{"ruleId":"316","severity":1,"message":"317","line":31,"column":8,"nodeType":"318","endLine":31,"endColumn":10,"suggestions":"340"},{"ruleId":"316","severity":1,"message":"341","line":40,"column":8,"nodeType":"318","endLine":40,"endColumn":21,"suggestions":"342"},{"ruleId":"312","severity":1,"message":"313","line":158,"column":22,"nodeType":"314","messageId":"315","endLine":158,"endColumn":24},{"ruleId":"312","severity":1,"message":"313","line":165,"column":22,"nodeType":"314","messageId":"315","endLine":165,"endColumn":24},{"ruleId":"312","severity":1,"message":"313","line":168,"column":29,"nodeType":"314","messageId":"315","endLine":168,"endColumn":31},{"ruleId":"312","severity":1,"message":"313","line":180,"column":47,"nodeType":"314","messageId":"315","endLine":180,"endColumn":49},{"ruleId":"312","severity":1,"message":"313","line":211,"column":48,"nodeType":"314","messageId":"315","endLine":211,"endColumn":50},{"ruleId":"312","severity":1,"message":"313","line":253,"column":48,"nodeType":"314","messageId":"315","endLine":253,"endColumn":50},{"ruleId":"312","severity":1,"message":"313","line":282,"column":48,"nodeType":"314","messageId":"315","endLine":282,"endColumn":50},{"ruleId":"312","severity":1,"message":"313","line":314,"column":41,"nodeType":"314","messageId":"315","endLine":314,"endColumn":43},{"ruleId":"312","severity":1,"message":"313","line":316,"column":72,"nodeType":"314","messageId":"315","endLine":316,"endColumn":74},{"ruleId":"343","severity":1,"message":"344","line":68,"column":25,"nodeType":"345","endLine":68,"endColumn":45},{"ruleId":"343","severity":1,"message":"344","line":42,"column":11,"nodeType":"345","endLine":42,"endColumn":40},{"ruleId":"343","severity":1,"message":"344","line":44,"column":11,"nodeType":"345","endLine":44,"endColumn":37},{"ruleId":"312","severity":1,"message":"313","line":46,"column":18,"nodeType":"314","messageId":"315","endLine":46,"endColumn":20},{"ruleId":"308","severity":1,"message":"346","line":12,"column":12,"nodeType":"310","messageId":"311","endLine":12,"endColumn":19},{"ruleId":"308","severity":1,"message":"347","line":12,"column":33,"nodeType":"310","messageId":"311","endLine":12,"endColumn":46},{"ruleId":"308","severity":1,"message":"348","line":1,"column":17,"nodeType":"310","messageId":"311","endLine":1,"endColumn":26},{"ruleId":"308","severity":1,"message":"349","line":13,"column":12,"nodeType":"310","messageId":"311","endLine":13,"endColumn":19},{"ruleId":"308","severity":1,"message":"346","line":14,"column":12,"nodeType":"310","messageId":"311","endLine":14,"endColumn":19},{"ruleId":"308","severity":1,"message":"347","line":14,"column":33,"nodeType":"310","messageId":"311","endLine":14,"endColumn":46},{"ruleId":"308","severity":1,"message":"350","line":1,"column":27,"nodeType":"310","messageId":"311","endLine":1,"endColumn":37},{"ruleId":"308","severity":1,"message":"351","line":2,"column":27,"nodeType":"310","messageId":"311","endLine":2,"endColumn":33},{"ruleId":"308","severity":1,"message":"352","line":2,"column":35,"nodeType":"310","messageId":"311","endLine":2,"endColumn":41},{"ruleId":"308","severity":1,"message":"353","line":2,"column":43,"nodeType":"310","messageId":"311","endLine":2,"endColumn":48},{"ruleId":"308","severity":1,"message":"354","line":3,"column":10,"nodeType":"310","messageId":"311","endLine":3,"endColumn":14},{"ruleId":"308","severity":1,"message":"355","line":11,"column":12,"nodeType":"310","messageId":"311","endLine":11,"endColumn":20},{"ruleId":"308","severity":1,"message":"356","line":11,"column":21,"nodeType":"310","messageId":"311","endLine":11,"endColumn":32},{"ruleId":"308","severity":1,"message":"357","line":12,"column":12,"nodeType":"310","messageId":"311","endLine":12,"endColumn":16},{"ruleId":"308","severity":1,"message":"358","line":12,"column":17,"nodeType":"310","messageId":"311","endLine":12,"endColumn":24},{"ruleId":"316","severity":1,"message":"359","line":15,"column":8,"nodeType":"318","endLine":15,"endColumn":10,"suggestions":"360"},{"ruleId":"312","severity":1,"message":"313","line":45,"column":42,"nodeType":"314","messageId":"315","endLine":45,"endColumn":44},{"ruleId":"312","severity":1,"message":"313","line":57,"column":40,"nodeType":"314","messageId":"315","endLine":57,"endColumn":42},{"ruleId":"316","severity":1,"message":"361","line":33,"column":7,"nodeType":"318","endLine":33,"endColumn":15,"suggestions":"362"},{"ruleId":"308","severity":1,"message":"363","line":56,"column":15,"nodeType":"310","messageId":"311","endLine":56,"endColumn":19},{"ruleId":"312","severity":1,"message":"313","line":99,"column":25,"nodeType":"314","messageId":"315","endLine":99,"endColumn":27},{"ruleId":"308","severity":1,"message":"348","line":1,"column":17,"nodeType":"310","messageId":"311","endLine":1,"endColumn":26},{"ruleId":"308","severity":1,"message":"350","line":1,"column":36,"nodeType":"310","messageId":"311","endLine":1,"endColumn":46},{"ruleId":"312","severity":1,"message":"313","line":45,"column":20,"nodeType":"314","messageId":"315","endLine":45,"endColumn":22},{"ruleId":"316","severity":1,"message":"364","line":51,"column":7,"nodeType":"318","endLine":51,"endColumn":13,"suggestions":"365"},{"ruleId":"308","severity":1,"message":"366","line":59,"column":11,"nodeType":"310","messageId":"311","endLine":59,"endColumn":28},{"ruleId":"312","severity":1,"message":"313","line":116,"column":36,"nodeType":"314","messageId":"315","endLine":116,"endColumn":38},{"ruleId":"312","severity":1,"message":"313","line":119,"column":36,"nodeType":"314","messageId":"315","endLine":119,"endColumn":38},{"ruleId":"312","severity":1,"message":"313","line":122,"column":36,"nodeType":"314","messageId":"315","endLine":122,"endColumn":38},{"ruleId":"312","severity":1,"message":"313","line":125,"column":36,"nodeType":"314","messageId":"315","endLine":125,"endColumn":38},{"ruleId":"312","severity":1,"message":"313","line":128,"column":36,"nodeType":"314","messageId":"315","endLine":128,"endColumn":38},{"ruleId":"312","severity":1,"message":"313","line":131,"column":36,"nodeType":"314","messageId":"315","endLine":131,"endColumn":38},{"ruleId":"312","severity":1,"message":"313","line":134,"column":36,"nodeType":"314","messageId":"315","endLine":134,"endColumn":38},{"ruleId":"308","severity":1,"message":"327","line":1,"column":17,"nodeType":"310","messageId":"311","endLine":1,"endColumn":27},{"ruleId":"308","severity":1,"message":"367","line":1,"column":29,"nodeType":"310","messageId":"311","endLine":1,"endColumn":35},{"ruleId":"308","severity":1,"message":"328","line":1,"column":56,"nodeType":"310","messageId":"311","endLine":1,"endColumn":75},{"ruleId":"308","severity":1,"message":"368","line":4,"column":8,"nodeType":"310","messageId":"311","endLine":4,"endColumn":16},{"ruleId":"308","severity":1,"message":"369","line":5,"column":8,"nodeType":"310","messageId":"311","endLine":5,"endColumn":16},{"ruleId":"308","severity":1,"message":"370","line":6,"column":8,"nodeType":"310","messageId":"311","endLine":6,"endColumn":22},{"ruleId":"308","severity":1,"message":"371","line":7,"column":8,"nodeType":"310","messageId":"311","endLine":7,"endColumn":24},{"ruleId":"312","severity":1,"message":"313","line":50,"column":16,"nodeType":"314","messageId":"315","endLine":50,"endColumn":18},{"ruleId":"316","severity":1,"message":"364","line":56,"column":7,"nodeType":"318","endLine":56,"endColumn":13,"suggestions":"372"},{"ruleId":"316","severity":1,"message":"373","line":60,"column":7,"nodeType":"318","endLine":60,"endColumn":13,"suggestions":"374"},{"ruleId":"308","severity":1,"message":"366","line":81,"column":11,"nodeType":"310","messageId":"311","endLine":81,"endColumn":28},{"ruleId":"312","severity":1,"message":"313","line":139,"column":36,"nodeType":"314","messageId":"315","endLine":139,"endColumn":38},{"ruleId":"312","severity":1,"message":"313","line":142,"column":36,"nodeType":"314","messageId":"315","endLine":142,"endColumn":38},{"ruleId":"312","severity":1,"message":"313","line":145,"column":36,"nodeType":"314","messageId":"315","endLine":145,"endColumn":38},{"ruleId":"312","severity":1,"message":"313","line":148,"column":36,"nodeType":"314","messageId":"315","endLine":148,"endColumn":38},{"ruleId":"312","severity":1,"message":"313","line":151,"column":36,"nodeType":"314","messageId":"315","endLine":151,"endColumn":38},{"ruleId":"312","severity":1,"message":"313","line":154,"column":36,"nodeType":"314","messageId":"315","endLine":154,"endColumn":38},{"ruleId":"312","severity":1,"message":"313","line":157,"column":36,"nodeType":"314","messageId":"315","endLine":157,"endColumn":38},{"ruleId":"308","severity":1,"message":"375","line":7,"column":8,"nodeType":"310","messageId":"311","endLine":7,"endColumn":18},{"ruleId":"308","severity":1,"message":"376","line":8,"column":8,"nodeType":"310","messageId":"311","endLine":8,"endColumn":12},{"ruleId":"308","severity":1,"message":"377","line":15,"column":12,"nodeType":"310","messageId":"311","endLine":15,"endColumn":16},{"ruleId":"316","severity":1,"message":"361","line":20,"column":7,"nodeType":"318","endLine":20,"endColumn":9,"suggestions":"378"},{"ruleId":"308","severity":1,"message":"379","line":38,"column":12,"nodeType":"310","messageId":"311","endLine":38,"endColumn":16},{"ruleId":"308","severity":1,"message":"380","line":38,"column":17,"nodeType":"310","messageId":"311","endLine":38,"endColumn":24},{"ruleId":"316","severity":1,"message":"381","line":43,"column":7,"nodeType":"318","endLine":43,"endColumn":15,"suggestions":"382"},{"ruleId":"316","severity":1,"message":"383","line":49,"column":7,"nodeType":"318","endLine":49,"endColumn":19,"suggestions":"384"},{"ruleId":"308","severity":1,"message":"363","line":113,"column":19,"nodeType":"310","messageId":"311","endLine":113,"endColumn":23},{"ruleId":"312","severity":1,"message":"313","line":170,"column":44,"nodeType":"314","messageId":"315","endLine":170,"endColumn":46},{"ruleId":"312","severity":1,"message":"313","line":173,"column":44,"nodeType":"314","messageId":"315","endLine":173,"endColumn":46},{"ruleId":"312","severity":1,"message":"313","line":176,"column":44,"nodeType":"314","messageId":"315","endLine":176,"endColumn":46},{"ruleId":"312","severity":1,"message":"313","line":179,"column":44,"nodeType":"314","messageId":"315","endLine":179,"endColumn":46},{"ruleId":"312","severity":1,"message":"313","line":182,"column":44,"nodeType":"314","messageId":"315","endLine":182,"endColumn":46},{"ruleId":"312","severity":1,"message":"313","line":185,"column":44,"nodeType":"314","messageId":"315","endLine":185,"endColumn":46},{"ruleId":"312","severity":1,"message":"313","line":188,"column":44,"nodeType":"314","messageId":"315","endLine":188,"endColumn":46},{"ruleId":"308","severity":1,"message":"385","line":13,"column":12,"nodeType":"310","messageId":"311","endLine":13,"endColumn":16},{"ruleId":"316","severity":1,"message":"359","line":29,"column":7,"nodeType":"318","endLine":29,"endColumn":9,"suggestions":"386"},{"ruleId":"312","severity":1,"message":"313","line":51,"column":31,"nodeType":"314","messageId":"315","endLine":51,"endColumn":33},{"ruleId":"312","severity":1,"message":"313","line":56,"column":31,"nodeType":"314","messageId":"315","endLine":56,"endColumn":33},{"ruleId":"316","severity":1,"message":"361","line":75,"column":7,"nodeType":"318","endLine":75,"endColumn":15,"suggestions":"387"},{"ruleId":"312","severity":1,"message":"388","line":93,"column":17,"nodeType":"314","messageId":"315","endLine":93,"endColumn":19},{"ruleId":"316","severity":1,"message":"389","line":95,"column":7,"nodeType":"318","endLine":95,"endColumn":13,"suggestions":"390"},{"ruleId":"312","severity":1,"message":"388","line":99,"column":24,"nodeType":"314","messageId":"315","endLine":99,"endColumn":26},{"ruleId":"312","severity":1,"message":"313","line":101,"column":21,"nodeType":"314","messageId":"315","endLine":101,"endColumn":23},{"ruleId":"316","severity":1,"message":"391","line":109,"column":7,"nodeType":"318","endLine":109,"endColumn":15,"suggestions":"392"},{"ruleId":"312","severity":1,"message":"388","line":127,"column":17,"nodeType":"314","messageId":"315","endLine":127,"endColumn":19},{"ruleId":"316","severity":1,"message":"393","line":130,"column":7,"nodeType":"318","endLine":130,"endColumn":13,"suggestions":"394"},{"ruleId":"308","severity":1,"message":"395","line":162,"column":13,"nodeType":"310","messageId":"311","endLine":162,"endColumn":20},{"ruleId":"308","severity":1,"message":"348","line":1,"column":17,"nodeType":"310","messageId":"311","endLine":1,"endColumn":26},{"ruleId":"308","severity":1,"message":"396","line":1,"column":27,"nodeType":"310","messageId":"311","endLine":1,"endColumn":35},{"ruleId":"308","severity":1,"message":"397","line":2,"column":10,"nodeType":"310","messageId":"311","endLine":2,"endColumn":20},{"ruleId":"308","severity":1,"message":"309","line":3,"column":10,"nodeType":"310","messageId":"311","endLine":3,"endColumn":19},"no-native-reassign",["398"],"no-negated-in-lhs",["399"],"no-unused-vars","'useParams' is defined but never used.","Identifier","unusedVar","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'props'. Either include it or remove the dependency array. However, 'props' will change when *any* prop changes, so the preferred fix is to destructure the 'props' object outside of the useEffect call and refer to those specific props inside useEffect.","ArrayExpression",["400"],"React Hook useEffect has a missing dependency: 'props.id'. Either include it or remove the dependency array. If 'setDataset' needs the current value of 'props.id', you can also switch to useReducer instead of useState and read 'props.id' in the reducer.",["401"],"'setPublish' is assigned a value but never used.",["402"],"React Hook useEffect has missing dependencies: 'props.id' and 'props.nodes'. Either include them or remove the dependency array. If 'setPath' needs the current value of 'props.nodes', you can also switch to useReducer instead of useState and read 'props.nodes' in the reducer.",["403"],"'SelectInput' is defined but never used.","'forwardRef' is defined but never used.","'useImperativeHandle' is defined but never used.","'useCallback' is defined but never used.",["404"],"React Hook useEffect has a missing dependency: 'props.id'. Either include it or remove the dependency array. If 'setInput' needs the current value of 'props.id', you can also switch to useReducer instead of useState and read 'props.id' in the reducer.",["405"],["406"],"React Hook useEffect has missing dependencies: 'props.id' and 'props.nodes'. Either include them or remove the dependency array. If 'setIndex' needs the current value of 'props.nodes', you can also switch to useReducer instead of useState and read 'props.nodes' in the reducer.",["407"],["408"],["409"],["410"],["411"],["412"],"React Hook useEffect has a missing dependency: 'props.id'. Either include it or remove the dependency array. If 'setIndex' needs the current value of 'props.id', you can also switch to useReducer instead of useState and read 'props.id' in the reducer.",["413"],"jsx-a11y/anchor-is-valid","The href attribute is required for an anchor to be keyboard accessible. Provide a valid, navigable address as the href value. If you cannot provide an href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","JSXOpeningElement","'cookies' is assigned a value but never used.","'removeCookies' is assigned a value but never used.","'useEffect' is defined but never used.","'isError' is assigned a value but never used.","'useReducer' is defined but never used.","'Router' is defined but never used.","'Switch' is defined but never used.","'Route' is defined but never used.","'Link' is defined but never used.","'flowJson' is assigned a value but never used.","'setFlowJson' is assigned a value but never used.","'flow' is assigned a value but never used.","'setFlow' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'getUser'. Either include it or remove the dependency array.",["414"],"React Hook useEffect has a missing dependency: 'getTeam'. Either include it or remove the dependency array.",["415"],"'data' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'isMount' and 'save'. Either include them or remove the dependency array.",["416"],"'createFlowVersion' is assigned a value but never used.","'useRef' is defined but never used.","'TreeView' is defined but never used.","'TreeItem' is defined but never used.","'ExpandMoreIcon' is defined but never used.","'ChevronRightIcon' is defined but never used.",["417"],"React Hook useEffect has a missing dependency: 'getFlowJson'. Either include it or remove the dependency array.",["418"],"'FlowCreate' is defined but never used.","'Flow' is defined but never used.","'team' is assigned a value but never used.",["419"],"'test' is assigned a value but never used.","'setTest' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'getFlowTree'. Either include it or remove the dependency array.",["420"],"React Hook useEffect has missing dependencies: 'flowJson', 'nodes', and 'updateFlowVersion'. Either include them or remove the dependency array. You can also do a functional update 'setFlowJson(f => ...)' if you only need 'flowJson' in the 'setFlowJson' call.",["421"],"'user' is assigned a value but never used.",["422"],["423"],"Expected '!==' and instead saw '!='.","React Hook useEffect has a missing dependency: 'getPermissions'. Either include it or remove the dependency array.",["424"],"React Hook useEffect has a missing dependency: 'getFlow'. Either include it or remove the dependency array.",["425"],"React Hook useEffect has a missing dependency: 'getServers'. Either include it or remove the dependency array.",["426"],"'request' is assigned a value but never used.","'useState' is defined but never used.","'useCookies' is defined but never used.","no-global-assign","no-unsafe-negation",{"desc":"427","fix":"428"},{"desc":"429","fix":"430"},{"desc":"427","fix":"431"},{"desc":"432","fix":"433"},{"desc":"427","fix":"434"},{"desc":"429","fix":"435"},{"desc":"427","fix":"436"},{"desc":"429","fix":"437"},{"desc":"427","fix":"438"},{"desc":"429","fix":"439"},{"desc":"427","fix":"440"},{"desc":"429","fix":"441"},{"desc":"427","fix":"442"},{"desc":"429","fix":"443"},{"desc":"444","fix":"445"},{"desc":"446","fix":"447"},{"desc":"448","fix":"449"},{"desc":"448","fix":"450"},{"desc":"451","fix":"452"},{"desc":"453","fix":"454"},{"desc":"455","fix":"456"},{"desc":"457","fix":"458"},{"desc":"444","fix":"459"},{"desc":"446","fix":"460"},{"desc":"461","fix":"462"},{"desc":"463","fix":"464"},{"desc":"465","fix":"466"},"Update the dependencies array to be: [props]",{"range":"467","text":"468"},"Update the dependencies array to be: [props.id, props.nodes]",{"range":"469","text":"470"},{"range":"471","text":"468"},"Update the dependencies array to be: [props.id, props.node, props.nodes]",{"range":"472","text":"473"},{"range":"474","text":"468"},{"range":"475","text":"470"},{"range":"476","text":"468"},{"range":"477","text":"470"},{"range":"478","text":"468"},{"range":"479","text":"470"},{"range":"480","text":"468"},{"range":"481","text":"470"},{"range":"482","text":"468"},{"range":"483","text":"470"},"Update the dependencies array to be: [getUser]",{"range":"484","text":"485"},"Update the dependencies array to be: [getTeam, teamid]",{"range":"486","text":"487"},"Update the dependencies array to be: [flow, isMount, save]",{"range":"488","text":"489"},{"range":"490","text":"489"},"Update the dependencies array to be: [getFlowJson, prev]",{"range":"491","text":"492"},"Update the dependencies array to be: [getTeam]",{"range":"493","text":"494"},"Update the dependencies array to be: [getFlowTree, rootid]",{"range":"495","text":"496"},"Update the dependencies array to be: [flowJson, nodes, updateFlag, updateFlowVersion]",{"range":"497","text":"498"},{"range":"499","text":"485"},{"range":"500","text":"487"},"Update the dependencies array to be: [getPermissions, team]",{"range":"501","text":"502"},"Update the dependencies array to be: [flowid, getFlow]",{"range":"503","text":"504"},"Update the dependencies array to be: [flow, getServers]",{"range":"505","text":"506"},[1096,1098],"[props]",[1379,1392],"[props.id, props.nodes]",[1767,1769],[2633,2645],"[props.id, props.node, props.nodes]",[1232,1234],[1449,1462],[870,872],[1145,1147],[867,869],[1144,1157],[735,737],[953,966],[843,845],[1120,1133],[445,447],"[getUser]",[1016,1024],"[getTeam, teamid]",[1581,1587],"[flow, isMount, save]",[1784,1790],[1850,1856],"[getFlowJson, prev]",[554,556],"[getTeam]",[1498,1506],"[getFlowTree, rootid]",[1629,1641],"[flowJson, nodes, updateFlag, updateFlowVersion]",[938,940],[2398,2406],[3007,3013],"[getPermissions, team]",[3304,3312],"[flowid, getFlow]",[3919,3925],"[flow, getServers]"]